<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bobbie's Blog]]></title>
  <link href="http://bobbielf2.github.io/atom.xml" rel="self"/>
  <link href="http://bobbielf2.github.io/"/>
  <updated>2021-02-22T02:33:39-06:00</updated>
  <id>http://bobbielf2.github.io/</id>
  <author>
    <name><![CDATA[Bowei "Bobbie" Wu .]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[One Disastrous Week in Austin -- We Survived]]></title>
    <link href="http://bobbielf2.github.io/blog/2021/02/22/one-disastrous-week-in-austin/"/>
    <updated>2021-02-22T01:51:51-06:00</updated>
    <id>http://bobbielf2.github.io/blog/2021/02/22/one-disastrous-week-in-austin</id>
    <content type="html"><![CDATA[<p>80+ hours. I can’t remember the last time I have been without power at subzero temperature for this long.</p>

<p>Austin (and Texas) just went through a disaster. A winter storm devoured the city, turning it into a frozen world for a week. On Monday, January 15, 2021, temperature dropped below -10°C, coldest over the past century. Snow was thick enough to sink your entire boots in. While such cold weather is nothing special in northern states like Michigan, it is nothing the Texans have ever seen. The electricity infrastructures in Texas were absolutely unprepared for such extreme condition, leaving millions of people out of power throughout the week.</p>

<p>Unfortunately, I am one of the witnesses and sufferers in this historic event. To make things worse, both of the kitchen stove and hot water in my apartment rely on electricity, so we are out of every possible source of energy.</p>

<p>Long story short, we survived. And here is how.</p>

<!--more-->

<p>First of all, I am thankful to have been staying with my girlfriend this year. The support and encouragement we provide to each other is the most important reason that we stayed positive and endured this hardship. It is true that a long-term relationship compounds its value over time and can be your lifesaver in unexpected events.</p>

<p>Second of all, getting helps from our neighbors was the silver lining during the week. After a day without power and heat, I started asking around for help on my phone. Eventually, I was connected to a friend’s friend who lived nearby and was fortunate enough to still have power in their building. It was also important that we could just walk there because you don’t want to <a href="https://www.nytimes.com/2021/02/11/us/fort-worth-wreck.html">drive on icy roads</a> in such weather. So from Wednesday on, we could have something hot to eat for lunch and bring some hot water home. I sent food pictures to my family far away so that they knew I was doing fine.</p>

<p>Preparation also made a difference. We stocked up some food before the week because we paid attention to the weather forecast. This turned out to be one of our best decisions because later in the week we didn’t have to stand in the cold in long lines outside of HEB. Ironically, the freezing temperature helped preserve our food during the week-long power outage.</p>

<p>Daily activities became simple. We went to bed before 9 PM because there is nothing much you can do in a cold dark night. We had more than 12 hours of sleep every day to save energy and stay warm. During the day, when we were not busy surviving, we spent most of our time reading which distracted us from the frigid reality. I also did exercises and lifted weights at home, which I think is an acceptable compromise for my <a href="http://bobbielf2.github.io/blog/2021/01/02/making-small-changes-in-life/">365-day challenge</a> since it was unsafe to be running outside.</p>

<p>The weather warmed up towards the weekend, finally above freezing on Friday. Our building got its electricity back on Friday afternoon and it had been more than 80 hours since we lost power.</p>

<p>Looking back, I think it is equally important to survive both the physical and mental challenges. I can’t imagine what it would be like if I were enduring all this all by myself and had no one to talk to. Staying calm and positive during a hard time can make a huge difference. Once you have hope, the physical challenges look easier to defeat. I wish everybody who suffered the power outage during this brutal week had found someone they can reach out to.</p>

<p>As the driving condition was improved, we went to stay at our friends’ house during the weekend. Because of COVID, it’s been a long time since we could spend a day or two with people we care about. I feel grateful that a harsh situation like this became the best opportunity to bond again.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Underestimating My Ignorance]]></title>
    <link href="http://bobbielf2.github.io/blog/2021/02/14/underestimating-my-ignorance/"/>
    <updated>2021-02-14T22:23:50-06:00</updated>
    <id>http://bobbielf2.github.io/blog/2021/02/14/underestimating-my-ignorance</id>
    <content type="html"><![CDATA[<p>“Being ignorant is bad.” So would most people think. I try hard to be more knowledgeable and I am still ashamed of my own ignorance oftentimes. But I am also learning more and more about the positive power of ignorance — a power that has been underestimated.</p>

<!--more-->

<p>Thanks to last year’s COVID lockdown, I had the chance to concentrate on research without distractions. I was fortunate enough to make some discoveries, which I thought was a huge breakthrough. After submitting some papers, a few months later I found out that I have in fact overlooked some closely related work in the literature. One of my results looked less great given the existing work, although it was still a nice progress.</p>

<p>While this has been a humbling experience, it was also inspiring: I wouldn’t have been so optimistic if I knew how long a journey the pioneers have traveled; I might have lost my faith and given up early if I knew all the failed attempts by other people. It was exactly my ignorance that had given me the courage to attack the open problems and the hope to keep pushing. Luckily, I eventually bumped into paths and territories that others have overlooked which led to my destination.</p>

<p>As Alain Connes once wrote, the initial phase of making new math discoveries “requires a kind of protection of one’s ignorance.” Sometimes, ignorance “frees people from reverence for authority and allows them to rely on their intuition.” In the same spirit, Steve Jobs also told people to “stay hungry, stay foolish.” Perhaps all intellectuals, including academics and industrial innovators, can use some protections of ignorance.</p>

<p>We like to be well-prepared before going into a challenging adventure. But knowing all the failed journeys of other people, knowing that even some brave and strong peers had failed their missions, can actually paralyse you into inaction. In fact, exploring the math world doesn’t require your having “full knowledge” about any field. Nobody ever knew “enough.” Once you know a minimum amount of knowledge that allows you to survive, you can start your journey.</p>

<p>“Whatever the origin of one’s journey, one day, if one walks far enough, one is bound to stumble on a well-known town: for instance, elliptic functions, modular forms, or zeta functions.” This is another quote from Alain Connes, which resonates with me deeply. There is no single path to knowledge, we can be free to explore our own paths and not be ashamed of knowing too little about all other possible paths. Be brave and keep pushing, once in a while we will meet with other adventurers in one of those famous mathematical towns.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Sense of Potential Theory]]></title>
    <link href="http://bobbielf2.github.io/blog/2021/02/06/making-sense-of-potential-theory/"/>
    <updated>2021-02-06T18:47:18-06:00</updated>
    <id>http://bobbielf2.github.io/blog/2021/02/06/making-sense-of-potential-theory</id>
    <content type="html"><![CDATA[<p>Potential theory was developed a few centuries ago in part to solve the boundary value problems for partial differential equations (PDEs). It led to the so-called “indirect approach” to boundary integral equations for elliptic PDEs. The goal of this article is to give this indirect approach some physical meaning. Some basic knowledge of potential theory is assumed. (See the book by R. Kress<sup id="fnref:kress"><a href="#fn:kress" class="footnote">1</a></sup> for more details.)</p>

<p>Consider the classical Laplace equation in a domain $\Omega\subset\mathbb{R}^2$, with Dirichlet boundary condition on the boundary $\Gamma:=\partial\Omega$, written as</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{aligned}
\Delta u(x) &= 0 & x\in\Omega\\
u(x) &= f(x) & x\in\Gamma
\end{aligned} %]]&gt;</script>

<p>The theory of integral equations solves a given boundary value problem like this by reformulating it into an integral equation on the boundary of the domain, such that the 2D <em>spatial differential problem</em> in $\Omega$ is reduced to a 1D <em>boundary integral problem</em> on $\Gamma$.</p>

<p>There are two main approaches to integral equations: the <em>direct approach</em> and the <em>indirect approach</em>.</p>

<!--more-->

<p><strong>1.  Green’s representation (direct approach).</strong> The Green’s representation theorem says that the unknown function $u(x)$ can be expressed as</p>

<script type="math/tex; mode=display">u(x) = \int_\Gamma \Big(G(x,y)\frac{\partial u(y)}{\partial n_y} - \frac{\partial G(x,y)}{\partial n_y}u(y)\Big)\,ds_y,\quad x\in\Omega</script>

<p>where</p>

<script type="math/tex; mode=display">G(x,y)=\frac{1}{2\pi}\log\frac{1}{|x-y|}</script>

<p>is the fundamental solution of the Laplace equation. Then by letting $x\to\Gamma$, this representation becomes an integral equation</p>

<script type="math/tex; mode=display">\int_\Gamma G(x,y)\psi(y)\,ds_y = \int_\Gamma\frac{\partial G(x,y)}{\partial n_y}f(y)\,ds_y + \frac{f(x)}{2},\quad x\in\Gamma</script>

<p>where the function $\psi(y) = \frac{\partial u(y)}{\partial n_y}$ is the unknown Neumann data on $\Gamma$, and the $f(x)/2$ term is due to the so-called jump relation<sup id="fnref:kress:1"><a href="#fn:kress" class="footnote">1</a></sup>.</p>

<p><strong>2. Potential theory (indirect approach).</strong> In potential theory, one starts by assuming that the solution has the form</p>

<script type="math/tex; mode=display">u(x) = \int_\Gamma \frac{\partial G(x,y)}{\partial n_y}\varphi(y)\,ds_y,\quad x\in\Omega</script>

<p>where $\varphi$ is a “density function” on $\Gamma$. Then again by letting $x\to\Gamma$ and using the jump relation, we arrive at the integral equation</p>

<script type="math/tex; mode=display">\int_\Gamma \frac{\partial G(x,y)}{\partial n_y}\varphi(y)\,ds_y-\frac{\varphi(x)}{2}=f(x),\quad x\in\Gamma</script>

<p>Comparing these two approaches, we see that the unknown function $\psi=\frac{\partial u}{\partial n}$ in the Green’s representation approach has clear physical meaning (e.g.,  if $u$ is the temperature, then $\psi$ is the heat flux at the boundary), hence the name “direct approach.” On the other hand, the unknown function $\varphi$ in the potential theory approach doesn’t have a direct physical meaning, therefore the name “indirect approach.”</p>

<p>In fact, there are two ways to make sense of this density function $\varphi$.</p>

<p><strong>1. The charge density analogy.</strong> The name “potential theory” comes from the fact that the Laplace equation describes the gravitational potential or electrostatic potential in space. If $G(x,y)$ represents the electric potential generated by a point charge at $y$, then $\frac{\partial G(x,y)}{\partial n_y}$ is the potential generated by a dipole charge at $y$, hence $\varphi$ is the dipole charge density on $\Gamma$. Potential theory then generalizes the concept of charge density to other elliptic PDEs as well, terming $\varphi$ the density function for a variety of potentials. (E.g., velocity potential, traction potential, electromagnetic potential, etc.)</p>

<p><strong>2. The jump of physical quantities.</strong> Another way to give meaning to $\varphi$ is to go through the process of how we arrived at an assumption such as $u(x) = \int_\Gamma \frac{\partial G(x,y)}{\partial n_y}\varphi(y)\,ds_y$. The key fact is that, with such an assumption, one is actually extending the solution $u(x)$ from $\Omega$ to the entire space $\mathbb{R}^2$ based on an underlying continuity assumption on $u$. Specifically, let’s assume a solution $U(x)$ for all $x\in\mathbb{R}^2\setminus\Gamma$, such that</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
U(x) = \begin{cases}
u(x) & x\in\Omega\\
u_\mathrm{out}(x) & x\in\mathbb{R}^2\setminus\bar\Omega
\end{cases} %]]&gt;</script>

<p>i.e., $U$ is an extension of $u$ into the whole space by stitching together the field $u$ inside $\Omega$ and some unknown harmonic field $u_\mathrm{out}$ outside $\Omega$ . According to the interior and exterior versions of Green’s representation theorem, we have</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\int_\Gamma \Big(G(x,y)\frac{\partial u(y)}{\partial n_y} - \frac{\partial G(x,y)}{\partial n_y}u(y)\Big)\,ds_y =
\begin{cases}
u(x), & x\in\Omega\\
0, & x\in\mathbb{R}^2\setminus\bar\Omega
\end{cases} %]]&gt;</script>

<p>and</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\int_\Gamma \Big(\frac{\partial G(x,y)}{\partial n_y}u_\mathrm{out}(y) - G(x,y)\frac{\partial u_\mathrm{out}(y)}{\partial n_y}\Big)\,ds_y =
\begin{cases}
-u_\infty, & x\in\Omega\\
u_\mathrm{out}(x)-u_\infty, & x\in\mathbb{R}^2\setminus\bar\Omega
\end{cases} %]]&gt;</script>

<p>where $u_\infty$ is a constant associated to $u_\mathrm{out}$ at $\infty$. Without loss of generality, let’s just assume $u_\infty=0$ and add the above two expressions together, this yields</p>

<script type="math/tex; mode=display">U(x) = \int_\Gamma G(x,y)\Big(\frac{\partial u(y)}{\partial n_y}-\frac{\partial u_\mathrm{out}(y)}{\partial n_y}\Big)\,ds_y - \int_\Gamma\frac{\partial G(x,y)}{\partial n_y}\big(u(y)-u_\mathrm{out}(y)\big)\,ds_y.</script>

<p>If we assume that the normal derivative of $U$ is continuous across the boundary $\Gamma$, i.e. the normal derivative of $u$ matches that of $u_\mathrm{out}$ on $\Gamma$, then the first integral in the above representation vanishes. Therefore, defining the density $\varphi$ as</p>

<script type="math/tex; mode=display">\varphi(y) := u_\mathrm{out}(y) - u(y),\quad y\in\Gamma,</script>

<p>we recover the potential theoretic representation $u(x) = \int_\Gamma \frac{\partial G(x,y)}{\partial n_y}\varphi(y)\,ds_y$ for $x\in\Omega$.</p>

<p>In summary, the density function $\varphi$ physically represents the jump of the extended field $U(x)$ across the boundary $\Gamma$, assuming its normal derivative is continuous across $\Gamma$.</p>

<p>Based on the above idea of field-extension, we consequently obtain an intuitive picture about the solvability relations between the interior and exterior boundary value problems:</p>

<p><strong>1)</strong> When using potential theory to solve the exterior Neumann problem, we assume that the extended field $U(x)$ has matching Dirichlet data across the boundary, and then solve for the unknown jump of the Neumann data $\psi(y):=\frac{\partial u(y)}{\partial n_y}-\frac{\partial u_\mathrm{out}(y)}{\partial n_y}$. Since we know that the interior Dirichlet problem is uniquely solvable, the exterior Neumann problem is also uniquely solvable (with some appropriate behavior at the infinity).</p>

<p><strong>2)</strong> Likewise, the exterior Dirichlet problem is solved by matching the Neumann data of the extended field $U(x)$, and then solve for the jump of Dirichlet data across $\Gamma$.  Because the solution of an interior Neumann problem is only unique up to an arbitrary constant, the naive potential assumption for the exterior field $u_\mathrm{out}(x) = \int_\Gamma \frac{\partial G(x,y)}{\partial n_y}\varphi(y)\,ds_y$ will result in an integral equation with a one-dimensional nullspace. An additional condition is needed, besides the potential theoretic equation, in order to retrieve the unique-solvability of the exterior Dirichlet problem using integral equations.</p>

<div class="footnotes">
  <ol>
    <li id="fn:kress">
      <p>Kress, R. (2013). <em>Linear Integral Equations</em> (Vol. 82). Springer Science &amp; Business Media. (Chapter 6: Potential Theory) <a href="#fnref:kress" class="reversefootnote">&#8617;</a> <a href="#fnref:kress:1" class="reversefootnote">&#8617;<sup>2</sup></a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Audience Under the Lightcone]]></title>
    <link href="http://bobbielf2.github.io/blog/2021/01/30/audience-under-the-lightcone/"/>
    <updated>2021-01-30T17:13:15-06:00</updated>
    <id>http://bobbielf2.github.io/blog/2021/01/30/audience-under-the-lightcone</id>
    <content type="html"><![CDATA[<p>Knowledge is information plus understanding. A big part of doing scientific research is to communicate knowledge with others. But knowing how to effectively communicate ideas is to some extend an art that is not so easily acquired.</p>

<p>One key ingredient of public communication is to know your audience well. I would like to propose a visual model that can be helpful for adjusting your presentation based on the type of your audience.</p>

<p>I call this model the <em>Audience Lightcone</em>:</p>

<p><img class="center" src="http://bobbielf2.github.io/images/blog_figures/lightcone.png" width="500" /></p>

<!--more-->

<p>The Audience Lightcone is a simple idea that goes as follows. Your audience is covered by a lightcone. To cover a broader audience with a bigger lightcone, you will need to move the light source to a higher level.</p>

<p>In this model, the lightcone coverage is the broadness/narrowness of your audience with respect to the idea you want to convey. The level of the light source is the level of your viewpoint when presenting the idea.</p>

<p>For example, if I were to present a piece of math I did to an audience, then for me the audience can be classified as follows, from broader to narrower:</p>

<p>(1) a general audience that only know very basic math<br />
(2) people who are/were in math or science majors<br />
(3) math researchers<br />
(4) computational math researchers<br />
(5) researchers who work on problems related to mine</p>

<p>If I have an audience that sits closer to the top of this list, then I will need to present my ideas from a higher-level viewpoint. This means to provide more context and background stories, to build more bridges between what my audience might know and what I want to convey, to use more appropriate analogies, and to refrain from speaking technical jargons.</p>

<p>On the contrary, if I have a narrower audience, such as my colleagues and project collaborators, then I can quickly jump into the lower-level details without spending much time on explaining the context, because it should be our common knowledge.</p>

<p>The big challenge here, therefore, is how well can you still effectively communicate ideas as your audience is broadened? This is a hard task that requires tons of practices to do well. But I think the Audience Lightcone is a useful mental model that can remind you about one of the most important aspect of effective communcation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regular and Singular Numerical Integration]]></title>
    <link href="http://bobbielf2.github.io/blog/2021/01/24/regular-and-singular-numerical-integration/"/>
    <updated>2021-01-24T20:49:12-06:00</updated>
    <id>http://bobbielf2.github.io/blog/2021/01/24/regular-and-singular-numerical-integration</id>
    <content type="html"><![CDATA[<p>The Pareto principle (a.k.a. 80/20 rule) says that for many outcomes, roughly 80% of consequences come from 20% of the causes. Qualitatively speaking, this also applies to numerical integration: most of the integral can be handled by just a few quadrature rules.</p>

<p>People who have learned numerical analysis all know about the <a href="https://en.wikipedia.org/wiki/Gauss%E2%80%93Legendre_quadrature">Gauss quadrature</a> rule: for any integer $n&gt;0$, there exist $n$ nodes $x_1,x_2,\dots,x_n\in[-1,1]$ and $n$ corresponding weights $w_1,w_2,\dots,w_n$, such that the approximation</p>

<script type="math/tex; mode=display">\int_{-1}^1f(x)\,dx\approx \sum_{i=1}^nf(x_i)w_i</script>

<p>is highly accurate for any function $f$ smoothly defined on $[-1,1]$. The error of this approximation typically decays exponentially as $n$ increases. Together with scaling and shifting of variables, the Gauss quadrature efficiently handles all the regular integrals (i.e. integrals involving smooth integrands) on any interval $[a,b]\subset\mathbb{R}$.</p>

<p>What if the integrand is singular? How would you approximate an integral when the integrand is not smooth or even blowing up somewhere on the interval? It turns out that most of the singular integrals in practice can be handled by a few strategies (80/20 rule again!). Here they are:</p>

<!--more-->

<p><strong>1. Integration by parts.</strong> People in calculus classes may have heard the joke: “Integrate by parts whenever you’re not sure what to do.” This is sometimes true for singular integrals. For example:</p>

<script type="math/tex; mode=display">\int_0^1e^x\ln x\,dx = (e^x-1)\ln x\Big|_{x\to0}^1 - \int_0^1\frac{e^x-1}{x}\,dx</script>

<p>then on the right-hand side, the boundary terms evaluate to $0$ while the new integral is in fact regular, so applying the Gauss quadrature will be excellent.</p>

<p><strong>2. Integration by substitution.</strong> Many singular integrals can be made regular after a change of variables. For example, substituting $x=\cos\theta$ in the integral below yields</p>

<script type="math/tex; mode=display">\int_{-1}^1\frac{f(x)}{\sqrt{1-x^2}}dx = \int_0^\pi f(\cos\theta)\,d\theta</script>

<p>then, assuming $f$ is smooth, the Gauss quadrature will just work for the second integral.</p>

<p><strong>3. Product quadratures.</strong> When the integrand is a product of a regular function $f(x)$ and a singular function $w(x)$ (usually refered to as “weight function”), one can often design efficient quadratures of the form</p>

<script type="math/tex; mode=display">\int_{-1}^1f(x)w(x)\,dx\approx\sum_{i=1}^nf(x_i)w_i</script>

<p>For example, the <a href="https://en.wikipedia.org/wiki/Chebyshev%E2%80%93Gauss_quadrature">Chebyshev quadrature</a> works perfectly for the integral in the previous example where $w(x)=(1-x^2)^{-1/2}$. On the other hand, both the Gauss quadrature and the Chebyshev quadrature are particular instances from the <a href="https://en.wikipedia.org/wiki/Gauss%E2%80%93Jacobi_quadrature">Jacobi quadrature</a> family. These example quadrature rules are derived based on the theory of <a href="https://en.wikipedia.org/wiki/Orthogonal_polynomials">orthogonal polynomials</a>, where for each given weight $w(x)$, there is a family of polynomials ${g_0(x),g_1(x),\dots}$ such that any two different polynomials are “orthogonal” to each other in the sense that, for any $i\neq j$,</p>

<script type="math/tex; mode=display">\int_{-1}^1g_i(x)g_j(x)w(x)\,dx=0.</script>

<p><strong>4. Extrapolation.</strong> The <a href="https://en.wikipedia.org/wiki/Romberg%27s_method">Romberg integration</a> is an extrapolation method that can enhance the accuracy of quadrature rules define on equally-spaced nodes. As a simple example, consider the following trapezoidal rule approximation with spacing $h=\frac{\pi}{n}$</p>

<script type="math/tex; mode=display">\int_{-\pi}^\pi\sin|x|\,dx = \sum_{i=-n+1}^{n-1}\sin|ih|h + \frac{\sin|-\pi|+\sin|\pi|}{2}h + E(h)</script>

<p>where the integrand is nonsmooth at $x=0$, and where $E(h)$ is the error that depends on $h$. It turns out that this error can be written as a power series of $h$:</p>

<script type="math/tex; mode=display">E(h) = C_1h^2+C_2h^4+C_3h^6+\dots</script>

<p>The leading error will be canceled if one appropriately combine an $h$-approximation with a $2h$-approxiation:</p>

<script type="math/tex; mode=display">E_2(h):=\frac{4E(h)-E(2h)}{3} = C_2'h^4 + C_3'h^6+\dots</script>

<p>The new error is of size $h^4$ which is much smaller than the original $h^2$. This procedure can be done multiple times to cancel the leading errors in the expansion one at a time, such that the accuracy is substantially improved.</p>

<p><strong>5. Singularity cancellation.</strong> Some singularities are stronger than others. For example, $x\ln x$ is less singular than $\ln x$ because the former is bounded near $x=0$. Let’s consider the first example above again that integrates $e^x\ln x$. It is easy to see that the integrand near $0$ behaves like $\ln x$, so we can subtract $\int_0^1\ln x\,dx$ from the original integral and then add it back, that is</p>

<script type="math/tex; mode=display">\int_0^1e^x\ln x\,dx = \int_0^1(e^x-1)\ln x\,dx+\int_0^1\ln x\,dx</script>

<p>The integral  $\int_0^1\ln x\,dx=-1$ by a simple integration by parts. Then we can apply the $n$-point Gauss quadrature to the remaining integral $\int_0^1(e^x-1)\ln x\,dx$, the error decays roughly like $1/n^4$, much faster than the $1/n^2$ decay rate that you would get if applying the same quadrature to the original integral.</p>

<p>These five strategies, or a combination of them, cover almost all common ways to integrate singular function. One strategy could be more efficiently than another depending on the particular application of interest.</p>

<p><a href="https://www.urbandictionary.com/define.php?term=BOCTAOE">BOCTAOE</a>. There are situations where none of the above strategies are efficient enough. Such marginal cases attract most of the research efforts. (80/20 rule again.) For example, here is one strategy that I recently took in my research:</p>

<p><strong>6. Error correction.</strong> Sometimes, it may be necessary to find an explicit expression for the quadrature error $E(h)$, so that you have the power to develop more sophisticated methods tailored to your application of interest. To give an example, consider the integral of $f(x)=e^{-x^2}\ln x$, its right-hand Riemann sum approximation on $[0,6]$ with $n$ subdivisions is</p>

<script type="math/tex; mode=display">\int_0^6e^{-x^2}\ln x\,dx = \sum_{i=1}^nf(ih)h + E(h) + \epsilon</script>

<p>where $h=\frac{6}{n}$, $\epsilon=\int_6^\infty f(x)\,dx&lt;10^{-16}$ is some small constant that is immaterial in practice. The error $E(h)$ has the following expansion:</p>

<script type="math/tex; mode=display">E(h) = \sum_{m=0}^{M-1}\frac{(-1)^m}{m!}[\zeta(-2m)\log h-\zeta'(-2m)]h^{2m+1} + O(h^{2M+1}\log h)</script>

<p>where $\zeta(z)$ is the famous <a href="https://en.wikipedia.org/wiki/Riemann_zeta_function">Riemann zeta function</a>.  Such formulae could take a lot of effort to derive in general. But once available, they allow you to develop highly efficient numerical methods.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reaction and Creation Are Antonyms]]></title>
    <link href="http://bobbielf2.github.io/blog/2021/01/17/reaction-and-creation-are-antonyms/"/>
    <updated>2021-01-17T20:06:52-06:00</updated>
    <id>http://bobbielf2.github.io/blog/2021/01/17/reaction-and-creation-are-antonyms</id>
    <content type="html"><![CDATA[<p>… and anagrams. (How cute!)</p>

<h3 id="the-reactionary-approach">The Reactionary Approach</h3>

<p>The reactionary approach seems to be a default setting of human behavior: people react only when something undesirable happens. Consequently, people have to react every single time something undesirable happens. This is apparently so in politics (especially prominent in 2020). But you can observe reactionary behaviors in all other domains.</p>

<!--more-->

<p>For example, parents and teachers often react against technology. It’s quite typical to hear things like “Turn off the video game!” or “Put down your phone!” or “No electronics in class!”</p>

<p>Another common example is doing presentations. Now that most presentations are done with slides, you can find a lot of reactionary advice such as “Don’t put everything on one slide” or “Don’t include irrelavant pictures or animations” or “Don’t use illegible fancy fonts.”</p>

<p>Taking a reactionary approach is totally fine when the problem you are dealing with is simple (like replenishing your toilet paper) or a one-off thing (like repairing a flat tire). For more complex and constantly evolving problems, such as education and technology, taking a reactionary approach is like playing a never-ending whac-a-mole game: you banned gaming, they turned to their phones; you banned phones, they turned to weed and drugs. It never solves the real problem. It is exhausting and can be harmful to your relationships. Maybe we can take a more systematic approach.</p>

<h3 id="the-creationary-approach">The Creationary Approach</h3>

<p>What makes me happy is that more and more creative people are taking on the task of improving education with technology.</p>

<p>An early example is the Khan Academy. Khan started by making videos to teach some of the school classes online. This seemingly simple approach enables what’s called the self-paced learning: instead of being forced to sit and listen in class, students can pick their own time to watch the videos; instead of feeling embarrassed to ask questions, students can just replay the part where they were lost. The traditional way of learning is to attend lectures in class and do the homework after. But with the video lectures, students can now watch them at home and do the homework in class (i.e., tutoring). Learning becomes more engaging and more human.</p>

<p>This is what I’d like to call a <strong>creationary approach</strong>. I see “reactionary” and “creationary” as antonyms (and they are anagrams!):</p>

<ul>
  <li>A reactionary approach is to react against something only when an undesirable result happens.</li>
  <li>A creationary approach is to create something so that desirable results can happen.</li>
</ul>

<p>Over the past decades, I am seeing more and more creationary people teaching math creatively with the help of technology. Just to name a few of them:</p>

<ul>
  <li>Burkard Polster (channel: <a href="https://www.youtube.com/channel/UC1_uAIS3r8Vu6JjXWvastJg">Mathologer</a>) is an engaging story-teller. He presents interesting maths that are not taught in school, which can really broaden your view.</li>
  <li>Grant Sanderson (channel: <a href="https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw">3Blue1Brown</a>) created a <a href="https://github.com/3b1b/manim">math animation engine</a> to make inspiring animations that introduce cool maths to a general audience.</li>
  <li>Cliff Stoll (appeared many times on the <a href="https://youtube.com/playlist?list=PLt5AfwLFPxWJeBhzCJ_JXdaIXi_YJl7Bh">Numberphile</a>), among many other creative things, has made strange pieces of glassware to teach topology. (He is also a <a href="https://slashdot.org/comments.pl?sid=1981970&amp;cid=35112450">creative science teacher</a>. I highly recommend listening to his <a href="https://youtu.be/lxdcBD4ppF0">interview</a> with the Numberphile.)</li>
  <li>The recent <a href="https://computationalthinking.mit.edu/Fall20/">Computational Thinking</a> course is a collaboration between MIT and the Julia Programming community. It is a terrific attempt to push the limit of distance learning during the pandemic.</li>
</ul>

<p>It is people like these who have given me a lot of hope and excitement about the future of education.</p>

<h3 id="be-creationary">Be Creationary</h3>

<p>In our daily life, we often run into a whac-a-mole lifestyle, too. People go on a diet to lose weight multiple times a year. People try to quit smoking many times in their life. People are making the same New Year Resolutions every year.</p>

<p>To take a creationary approach to life means to make choices based on what you are <em>for</em> rather than what you are <em>against</em>.</p>

<p>One trick I often use is to create connections between the things I love doing with the things I think I should do. For example, I enjoy doing exercises because I love listening to podcasts at the same time. I enjoy eating healthy because healthy foods are delicious and it allows me to focus on my research problems for longer without getting fatigue easily. Once these connections become my habits and instincts, doing the “hard” thing feels effortless.</p>

<p>Of course, taking a creationary approach is hard. It is not always easy to know what you are for; it can be very hard to find your purpose; being creative may not always give you the desired result. But I also believe that creativity is something that you can train for: be aware that you can always choose creation over reaction, allow yourself more chances to experiment and to fail, learn from creative people and enjoy their company. Sooner or later, you will encounter your own serendipity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Y Combinator's Startup Advice: An Academic Perspective]]></title>
    <link href="http://bobbielf2.github.io/blog/2021/01/10/y-combinators-startup-advice-an-academic-perspective/"/>
    <updated>2021-01-10T16:33:04-06:00</updated>
    <id>http://bobbielf2.github.io/blog/2021/01/10/y-combinators-startup-advice-an-academic-perspective</id>
    <content type="html"><![CDATA[<p>Y Combinator (YC) is a startup incubator that had launched many successful companies including Airbnb, Coinbase, Dropbox, Reddit, etc. YC’s founder Paul Graham wrote an inspiring article, “<a href="http://paulgraham.com/ds.html">Do Things That Don’t Scale</a>,” that gives solid advice to startup founders on what they should focus on when starting a business. I find it interesting that when I read the article through the lens of academia, Graham’s advice appears to also be useful for people heading into an academic career, such as myself.</p>

<p>I have noticed that there are a lot of similarities between building a startup company and building an academic career:</p>

<!--more-->

<ul>
  <li>Both startups and academics strive for novelty (i.e., being correct is not enough, you must also be different)</li>
  <li>Both startups and academics get to attach their names on their work (i.e. unlike in the industry, things an employee built are owned by their companies.)</li>
  <li>Both startups and academics need to promote their work themselves (e.g. founders do marketing, scientists write papers and give presentations)</li>
  <li>Startup founders and junior academics both have flexible schedules in their workdays, but they both need to work really hard or they fail.</li>
  <li>Both the startup world and academia have high probabilities of failure.</li>
</ul>

<h3 id="ycs-startup-advice-the-academic-version">YC’s startup advice, the academic version</h3>

<p><em>Disclaimer: I am writing these as an exercise for myself to think things through. If you are a junior academic searching for career advice, please take them with a grain of salt.</em></p>

<p>In the business world, people know the economy of scale. But Graham pointed out that at the early stage of a startup, it is actually important to focus on things that don’t scale. Here are a few pieces that I think are also valuable for academic people. I will state the original advice from Graham, then map it into the academic context.</p>

<ol>
  <li><strong>Recruit users manually.</strong> People don’t automatically come to you just because you have built new products. People may have other things to be busy with, or they may not appreciate or trust what you’ve built (e.g. think of Airbnb in 2008). You have to go out to find users, one by one, and help them use your products. Likewise in academia, new ideas don’t just get accepted; you have to go out and discuss with and persuade your colleagues, give seminar talks, present at conferences. In particular, you’d like to discuss with the few people who are most interested, they are the initial “users” of your work.</li>
  <li><strong>Act as a consultant</strong> (who builds something just for a particular customer). Sometimes YC would ask founders to pick out a single user, help this user solve their particular problem by using your software yourself on their behalf. This can be an effective way to know what it’s like to be using your product, what is lacking, and how it can be improved. Likewise in academia, if you have invented a new method, one thing you could do is to go out and help people (who may be in a different field from yours) solve their problems. This is not only a way to stress test your method, but you are also more likely to get quality feedback and get inspired to do further studies.</li>
  <li><strong>Manually build your prototype from ground up.</strong> Sometimes, YC would advise hardware startups to assemble their machines maually. By going through each tiny step, you get better knowledge and will be able to tweak your design faster in the later stage. In the academia context, “hardware” may correspond to our own brains: you should spend time to understand the fundamentals before doing anything high-level. For example, when writing your own code, try not to use the existing libraries at first, but write everything from scratch and get better understandings of each component. The knowledge will later be helpful when you want to optimize for more serious work.</li>
  <li><strong>Go out extra steps to make your users happy as far as you can.</strong> Extraordinary customer service is what startups can do that big companies can’t afford to do. (I happen to know one perfect example: try order a Klein bottle from <a href="https://www.kleinbottle.com/">Cliff Stoll</a>, he will make it a best day of your life.) Another reason is that any products can’t be perfect from the beginning, so spending time to make users happy is also a way to get feedback. Interactions with initial users are what keeps the startup fire from going off. In academia, your “users” are your collaborators, your peers, your mentors, your students, and people who use your methods. Great “customer service” in academia means to contribute to discussions, to give people their due credit, and to be thoughtful and responsive, etc. At the end of the day, we are human beings. We like people who are helpful, respectful, and easy to work with. We are more willing to help such people as well.</li>
</ol>

<p>The roadmap of startups or academic careers is multi-dimensional: you strive to do novel things, but you also need to do unscalably laborious things, especially at the early stage. Graham suggested to think of this multi-dimensional task as a vector rather than a scalar. I made the following diagram to illustrate this idea:</p>

<p><img class="center" src="http://bobbielf2.github.io/images/blog_figures/dont_scale.png" width="400" /></p>

<p>Some people (including myself) tend to focus solely on doing research and hope everything else will take care of themselves eventually (path A in the diagram), but in reality we often need to also do the unscalable things in the other dimensions, such as to improve our skills to present, to communicate, to collaborate, and to help others (path B in the diagram). After all, scientists are humans; <a href="https://www.stevepavlina.com/blog/2020/01/money-and-success-goals-are-social-not-personal/">career goals are social, not just personal</a>. Building a career is not just about personal gains, but also about helping others and making the world around us better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Small Changes in Life]]></title>
    <link href="http://bobbielf2.github.io/blog/2021/01/02/making-small-changes-in-life/"/>
    <updated>2021-01-02T02:12:19-06:00</updated>
    <id>http://bobbielf2.github.io/blog/2021/01/02/making-small-changes-in-life</id>
    <content type="html"><![CDATA[<p>Yesterday was the last day of 2020 and the first day that was cold and rainy and windy all day since I resumed exercising every day. I had been expecting such a day.</p>

<p>At the beginning of December after reading a <a href="https://www.stevepavlina.com/blog/2020/12/pondering-a-365-day-challenge-for-2021/">blog post</a>, I finally decided to do a 365-Day Challenge for the year of 2021: running every day for at least 15 minutes a day. Then I decided to start right away even if it was still 2020, because why not. This may sound like a joke to some people because, seriously, how is this even a “challenge”?</p>

<!--more-->

<p>As someone who has done a few short-term challenges, I know that there are always something unexpected in the way that can ruin your plan. If you do a <a href="https://www.stevepavlina.com/blog/2005/04/30-days-to-success/">30-Day Challenge</a>, one most important point is not that how easy or hard it is to do it on a given day, but that if you skipped even one day, you failed. When a challenge lasts as long as 365 days, there are plenty of bad things that could just happen, say, on the 113th day and then all the things you did during the first 112 days are wasted.</p>

<p>For my own challenge, I have imagined days when I will be too busy and stressful meeting a deadline, or days when the weather is just too bad, or days when I have been driving all day and feel too tired to do anything, or days when I have traveled to a strange place that could be unsafe to run outside. I am sure there are many more situations that I just can’t imagine yet.</p>

<h3 id="short-term-challenges">Short-term challenges</h3>

<p>Since 2018, I have done a few short-term challenges – sometimes with a purpose and sometimes just to bring some new ingredients into life. I started with a 30-Day Vegan challenge; then I went on to do a 30-Day Pescatarian challenge which wound up lasted almost 5 months. Now I am back to omnivorous, but with more knowledge about different dietary options and how it feels to be a practitioner. In general, I become more mindful with how different foods affect my body and mind, and I am eating much healthier than before the dietary challenges.</p>

<p>One thing that was unexpected while eating vegan was the experience of being a minority. Growing up in China I have never been a member of a minority group. After I came to the US, I did meet racist strangers in a few occasions throughout these years, but in general I am in academic environments that have always been welcoming and never made me feel like a minority. But during my 30 days of eating vegan, the restaurants I went to often made me feel that I am a trouble to them through their reactions, including some major restaurants that do provide vegetarian options. In order to feel more comfortable, every time I decided to eat out I had to do more investigations and select appropriate restaurants. Most of the time I just cook my own food. (On the good side, I did discover some vegan friendly cuisines, like Indian and Mediterranean, which are very enjoyable.)</p>

<p>I also did a 30-Day Swimming challenge for which I swam for an hour a day everyday. I did it because there was a year or two during my time at Michigan when I stopped exercising completely. I remember it was one sunny day in the winter in early 2018, I finally went for a swim after a long time. I can never forget the moment when I pushed open the door and came out of the gym, a breeze of cool air flowed into my chest. “How refreshing!” I said to myself. That was a feeling I had missed for so long. At that day, I started and completed the swimming challenge. Then I was motivated enough that I continued to do exercise, either swimming or running for at least an hour, 5 to 6 times every week, until the pandemic hit in the March of 2020.</p>

<p>There is one important lesson I learned from making these small changes in life: you must reinforce these changes by associating them with immediate rewards; never rely on grit and pervseverance since those are guaranteed to wane overtime and you are bound to fail that way; losing weight is such a reward that comes so late that most people with that goal fail. Here are some examples of immediate rewards that worked for me:</p>

<ul>
  <li>Find shows or programs that you love, and listen to them when working out. I particularly liked listening to podcasts when I am running. (Lately I am listening to NPR’s Hidden Brain and The Numberphile Podcast.)</li>
  <li>Pay attention to your feelings, however small they are. When I eat more veges and less sugars, I typically feel more agile and can stay focused for longer periods. When I am done exercising, I feel happier, more awaked and alert.</li>
</ul>

<h3 id="day-challenge">365-Day Challenge</h3>

<p>I have stopped being active for 9 months since the COVID lockdown in March. So finally at the beginning of December, I decided to do the 365-Day Challenge for the year of 2021 and also started running again right away.</p>

<p>All went well for almost a month. Then there came December 31th of 2020, the day that I have so many perfect excuses to skip it.</p>

<p>It was cold and rainy the whole day (even raining hail in the afternoon); I had invited a few people for a gathering that night and had to do grocery shopping during the day; I had planned to work a little on my research in the morning; most “importantly,” it was still 2020 and my 365-Day Challenge did not “officially” start until the next day.</p>

<p>Given all the circumstances, this is a day I have imagined from the beginning. I decided that if I skip this day, I won’t be able to convince myself that I can still complete every single day of the following 365 days. So I kept an eye on the weather forecast and just went out once the rain temporarily stopped. It was freezing and windy outside, the street was empty and quiet. Shortly after I began running, it started to rain again. When I got home, my face and hands were numb but I was very happy. Interestingly, the <a href="https://omny.fm/shows/hidden-brain/a-creature-of-habit">podcast</a> I was listening to that day talked about building habits.</p>

<p>Now, my 365 days begin. Thanks to that rainy day, I am quite confident about completing it this year while working on many different things.</p>

<h3 id="update-jan-10-2021">Update Jan 10, 2021</h3>

<p>Today, it snowed in Austin! Going out for a run is actually not hard for me at this point – I think I have successfully built this into my habit in the past 30 days.</p>

<p>I have taken some photos of the snow. Although such snow is no big deal for someone who has lived in Michigan, it is definitely a rare event in Texas!</p>

<p><img class="center" src="http://bobbielf2.github.io/images/blog_figures/austin_snow1.jpg" width="400" /></p>

<p><img class="center" src="http://bobbielf2.github.io/images/blog_figures/austin_snow2.jpg" width="400" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everybody Said That 2020 Was Bad]]></title>
    <link href="http://bobbielf2.github.io/blog/2020/12/27/everybody-said-that-2020-was-bad/"/>
    <updated>2020-12-27T16:40:06-06:00</updated>
    <id>http://bobbielf2.github.io/blog/2020/12/27/everybody-said-that-2020-was-bad</id>
    <content type="html"><![CDATA[<p>I feel like writing something before 2020 ends. Since this has been a special year, I will write two versions of it.</p>

<h3 id="version-i">Version I</h3>

<p>This has been a special year because everybody said that it was bad. The COVID pandemic suddenly exploded and completely changed our way of living. People may still remember that this is the same year when Kobe Bryant died from an accident, but it feels like this happened an eternity ago — as with everything else that happened before lockdown.</p>

<!--more-->

<p>The pandemic seemed “inevitable” in hindsight. For decades people like Nassim Taleb and Bill Gates had been warning about such an event as being a necessary outcome of our world getting ever more connected. Yet, when it finally happened, it has hit us so quickly and strongly that nobody was prepared. Early on, many people wishfully thought that it would just disappear quickly and magically somehow; then people thought that it might only last for a few months; eventually, people are disappointed to find out that we end up practicing the lockdown lifestyle for the rest of 2020 and may well be doing it for a good part of 2021. Currently, the first wave of vaccines arrived and are being produced and distributed; however, a second wave of outbreak is also hitting hard on the US, Europe, and many other places in the world. The virus has mutated and we still don’t see a clear way out of this extended battle.</p>

<p>This is the mainstream and social media’s version of “This has been a special year.” Everybody has been living an extraordinarily bad year according to this narrative. We are under the constant bombardment of bad news.</p>

<p>I would like to take a break for a moment, and remind myself that nobody’s life is the same. After all, we are individuals living our own life and having our own experience. It is true that everybody was hit by the pandemic one way or another, but it cannot be true that we all have the same experience and feelings.</p>

<p>We can’t control what comes at us, but we can decide how we perceive and respond to those events. (And it is probably wise to cut oneself off from the media most of the time, too.)</p>

<p>So I would like to write a second version of “This has been a special year” that is particular to myself, because surely everybody has their own special year.</p>

<h3 id="version-ii">Version II</h3>

<p>This has been a special year for me, because it is meaningful to myself in many ways.</p>

<ul>
  <li>I began this year traveling to New Orleans and Houston. This has been my first road trip in the south since I came to Austin, and I liked the culture and history of those places.</li>
  <li>After the lockdown in March, I was able to entirely focus on my research projects. Luckily, I had made some important breakthroughs, which turned into one of the most meaningful and rewarding experience in my life. I realized being an academic is a previlage during the pandemic and I am very grateful for that.</li>
  <li>I had been in a long distance relationship. But because of the pandemic, I get to spend most of this year living with my girlfriend. Her emotional support has been vital during this time. I am truly grateful for all the precious time and memories we had together so far.</li>
  <li>I used to swim 5 to 6 times a week before the pandemic. But since March, I stopped exercising completely and stayed this way for the past 9 months. I was clearly feeling worse with my body and realizing that I had been taking my health for granted. So finally this month, I decided to return to the habit of daily exercise. So far, I am enjoying running outside everyday while listening to podcasts — I know this would have been much harder if I were still in Michigan’s cold winter!</li>
</ul>

<p>At the beginning of the COVID pandemic, my parents from China were very worried about my situation in the US. I assured them that I was fine and had things to be busy with; I remember I explicitly told my parents: “This pandemic will one day come to an end and become a past memory. I don’t want to wake up that day just to realize that I have wasted my time in the entire year of 2020, doing nothing but doomscrolling through bad news all day long.” I would like to thank my past self for delivering this powerful message and staying focused on the more important and meaningful things.</p>

<p>To be fair though, I did take the COVID seriously from early on (maybe even a little paranoid). Back in January when everything was unclear about the disease, and when people in China were still planning to celebrate the Lunar New Year, I already bought my parents some masks and told them to stay away from crowds and wash hands. I recall that just a few days after I bought those masks for my parents, all the masks were sold out on Taobao or any other Chinese e-commerce platforms. No joke, it was frightening. After the pandemic hit the US, “don’t let my parents worry for me” had been one of my biggest motivations to stay healthy. I very much hope that the situation would end soon in 2021 that I can be meeting with my family and friends and traveling again.</p>

<p>I have not updated my blog for a year now and I would like to get back to writing a little more often. I originally planned to start writing after the New Year. But the lockdown experience made it clear to me that many concepts (such as the “new year”) are merely human constructs — they can be sometimes a mental obstruction when you want to start something new. So, to break the “wait after the new year” mantra, I decided to start writing before the new year, making this a part of 2020 as well. (I am sure my future self will thank me for this decision.) I hope that in 2021, I can become a better writer, which also means a better thinker.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[电工 Debug 现场]]></title>
    <link href="http://bobbielf2.github.io/blog/2019/11/20/dian-gong-debug-xian-chang/"/>
    <updated>2019-11-20T11:00:50-06:00</updated>
    <id>http://bobbielf2.github.io/blog/2019/11/20/dian-gong-debug-xian-chang</id>
    <content type="html"><![CDATA[<p>来 Austin 一段时间了都没写什么。今天恰巧有个好故事可以讲一讲。</p>

<p>室友办公桌的几个插口没电，前天报修了。今天一大早回来，我发现办公室门竟敞开着，走到门口前，只见室友的办公桌前赫然坐着两位老头在聊天。跟他们聊了几句，原来是来做维修的电工，为了修这几个电插口颇费了一番工夫。</p>

<p>看起来年纪没那么大的老头说，这个插头不行是因为天花板上的线有问题；天花板上的线有问题呢，又是因为办公室另一头墙里的线有问题；这些问题会发生，可能就是上一个负责线路的人，因为某种原因线没接好就放着不管了。</p>

<p>我听他解释一大轮，只感到不明觉厉。我问，这肯定很难才诊断出来吧？他指着另外一个很老的老头说：“花了一个多小时才找出原因，都是他的功劳，他叫 George。” 我不禁肃然起敬，有种遇见少林扫地僧的感觉。我说：“非常感谢，我一定转告我的室友！”</p>

<p>他们走后，我一边回味一边感叹，这不就是一次电工版的 debug 吗？前人坏习惯留下的 bug，让后来的优秀程序员几经波折才修好。可见遵从 best practice 的程序员是多么可贵。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resume Octopress Blogging From a New Computer]]></title>
    <link href="http://bobbielf2.github.io/blog/2019/06/21/resume-octopress-from-a-new-computer/"/>
    <updated>2019-06-21T12:02:54-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2019/06/21/resume-octopress-from-a-new-computer</id>
    <content type="html"><![CDATA[<p>I recently switched to a new computer. The switch isn’t too messy because I basically have all my data backed up, either on Google Drive or on GitHub.</p>

<p>One thing I wanted to make sure is that I can still update this blog, which is hosted using Octopress. But to be honest, until recently I am not really good at using git and GitHub, so it took me some time to figure out what I need to do to resume blogging with Octopress.</p>

<!--more-->

<p>Logically, the key concept with Octopress is that it uses a <em>ghost branch</em>. All the source files for my blog is tracked NOT by the master branch, but by a ghost branch (named “source” under the Octopress framework) that is completely unrelated to the master branch in terms of git history – it’s a hanging branch that lives in a parallel world albeit in the same repo, hence the name “ghost branch.”</p>

<p>Another important thing with Octopress is to find out how the local blog is deployed onto <a href="https://pages.github.com/">GitHub Pages</a>. This also took me a little bit to figure out. It turns out that my blog is first generated under a <code>_deploy</code>  folder, and then that folder is synced to the master branch on the repo.</p>

<p>Summarizing the two paragraphs above, Octopress is organizing my blog in the following way:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">MyBlog
</span><span class="line">|--source files (tracked by ghost branch)
</span><span class="line">|--_deploy
</span><span class="line">   |--github page files (tracked by master branch)</span></code></pre></td></tr></table></div></figure>

<p>Apparently, it is not the best practice to use a ghost branch, also not the best practice to use the master branch to track a sub-folder of the ghost branch. These are some twisted logic puzzles for the mind. But that’s how Octopress works!</p>

<p>Once the logic is clear, I only need to do the following three things to resume blogging:</p>

<p><strong>1. Clone source from ghost branch</strong> (my ghost branch named <code>source</code>)</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git clone -b <span class="nb">source </span>https://github.com/YOURNAME/YOURNAME.github.io.git
</span></code></pre></td></tr></table></div></figure>

<p><strong>2. Clone GitHub Page (to a sub-directory <code>_deploy</code>) from master branch</strong></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd </span>YOURNAME.github.io
</span><span class="line">mkdir _deploy
</span><span class="line">git clone https://github.com/YOURNAME/YOURNAME.github.io.git _deploy
</span></code></pre></td></tr></table></div></figure>

<p><strong>3. Re-install the plugins for my blog</strong></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">bundle install --path vendor/bundle
</span></code></pre></td></tr></table></div></figure>

<p>Of course, you need to have installed the <a href="https://bundler.io/">Bundler</a> to use the <code>bundle</code> command, and to do that on a Mac you will probably need to first install <a href="https://github.com/rbenv/rbenv">rbenv</a> for smoothly running your blog by executing Ruby commands. In other word, you will need to set up your environment again for Octopress, which I have covered in my <a href="http://bobbielf2.github.io/blog/2016/08/06/yong-you-ni-de-ge-ren-bo-ke/index.html">first blog post</a> (in Chinese).</p>

<hr />

<h3 id="updates-on-2019-11-20-using-rbenv-on-macos-catalina">(Updates on 2019-11-20) Using <code>rbenv</code> on MacOS Catalina</h3>

<p>After I upgraded my MacOS to 10.15 Catalina, I encountered troubles again. This time, when I do <code>rake</code> commands, I got the error message:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">You must use Bundler <span class="m">2</span> or greater with this lockfile.
</span></code></pre></td></tr></table></div></figure>

<p>So I need to update the <code>bundler</code> to version 2 or higher.</p>

<p>However, when I did <code>gem install bundler</code>, I got permission error again – this means that <code>gem</code> is trying to install bundler on Mac’s default system ruby, in other words, <code>rbenv</code> is broken.</p>

<p>So I tried to reinstall <code>rbenv</code> :</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">brew reinstall rbenv
</span><span class="line">rbenv init
</span></code></pre></td></tr></table></div></figure>

<p>and then install a custom <code>ruby</code> (version 2.6.5):</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rbenv install 2.6.5
</span></code></pre></td></tr></table></div></figure>

<p>However, in this last step, I constantly ran into troubles. It was a long debugging process, so I am just going to list the hurdles that I have gone through, which maybe helpful to others.</p>

<p><strong>Hurdle #1</strong>: <code>openssl</code> overhead</p>

<p><code>rbenv</code> keep trying to first install <code>openssl</code> before actually installing <code>ruby 2.6.5</code>, this is taking a lot of time and greatly reducing my debugging efficiency. I checked <code>which openssl</code> and confirmed that my system has already had <code>openssl</code> installed. So I need to tell <code>rbenv</code> to use my system’s <code>openssl</code>. I do this with the command:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">RUBY_CONFIGURE_OPTS</span><span class="o">=</span>--with-openssl-dir<span class="o">=</span>/opt/local <span class="nv">CC</span><span class="o">=</span>/usr/bin/gcc rbenv install 2.6.5
</span></code></pre></td></tr></table></div></figure>

<p><strong>Hurdle #2</strong>: incorrect C compiler</p>

<p>After many fails, I finally found out in the error log that <code>rbenv</code> is using <code>CC=x86_64-apple-darwin13.4.0-clang</code> as C compiler and therefore has not been able to compile and install ruby. This can be resolved by explicitly telling <code>rbenv</code> to use the system compiler <code>/usr/bin/gcc</code>.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">CC</span><span class="o">=</span>/usr/bin/gcc <span class="nv">RUBY_CONFIGURE_OPTS</span><span class="o">=</span>--with-openssl-dir<span class="o">=</span>/opt/local rbenv install 2.6.5
</span></code></pre></td></tr></table></div></figure>

<p><strong>Hurdle #3</strong>: anaconda gets in the way</p>

<p>After the previous two fixes, I am still unable to install ruby. This time I found the following lines in the error log:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">/anaconda3/bin/x86_64-apple-darwin13.4.0-ar: illegal option -- n
</span><span class="line">usage:  ar -d <span class="o">[</span>-TLsv<span class="o">]</span> archive file ...
</span></code></pre></td></tr></table></div></figure>

<p>It turns out that <code>rbenv</code> is using anaconda’s <code>ar</code> function instead of the system’s own <code>ar</code>. So I need to disable anaconda in my system as follows:</p>

<ul>
  <li>Open the <code>~/.bash_profile</code> file, remove/comment out any lines that have to do with anaconda/conda</li>
  <li>Restart terminal</li>
  <li>Try install ruby again:</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">RUBY_CONFIGURE_OPTS</span><span class="o">=</span>--with-openssl-dir<span class="o">=</span>/opt/local rbenv install 2.6.5
</span></code></pre></td></tr></table></div></figure>

<p>Finally, I was able to install ruby on <code>rbenv</code>! Notice that in the last command I have removed <code>CC=/usr/bin/gcc</code>, because disabling anaconda also resolves the problem in Hurdle #2.</p>

<h4 id="final-steps">Final Steps</h4>

<p>After installing a custom ruby, I need to first tell the system to use that version of ruby</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rbenv global 2.6.5
</span></code></pre></td></tr></table></div></figure>

<p>Then I can go back to my Octopress blog folder and install the newest bundler</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">gem install bundler
</span><span class="line">bundle install
</span></code></pre></td></tr></table></div></figure>

<p>However, there is still a final small hurdle for me:</p>

<p><strong>Hurdle #4</strong>: rake version</p>

<p>When I tried to create a new blog post via <code>rake new_post['title']</code>, I got the following error message:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake aborted!
</span><span class="line">Gem::LoadError: You have already activated rake 12.3.2, but your Gemfile requires rake 10.5.0. Prepending <span class="sb">`</span>bundle <span class="nb">exec</span><span class="sb">`</span> to your <span class="nb">command </span>may solve this.
</span></code></pre></td></tr></table></div></figure>

<p>So I just open the <code>Gemfile</code> in my Octopress folder, find the line with <code>gem 'rake', '~&gt; 10.5'</code>, change it to <code>gem 'rake', '~&gt; 12.3'</code>, and then <code>bundle install</code> again. Now it’s all set.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using GNU Screen to Resume an SSH Session]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/09/14/using-gnu-screen-to-resume-an-ssh-session/"/>
    <updated>2017-09-14T13:30:46-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/09/14/using-gnu-screen-to-resume-an-ssh-session</id>
    <content type="html"><![CDATA[<h3 id="why-gnu-screen">Why GNU Screen?</h3>

<p><strong>Scenario</strong>: you finish working with an SSH session, you close your laptop to go for lunch or for a tea. Then you come back and open your laptop wanting to resume your job, but the connection is broken or the VPN breaks and forced you to disconnect. You have no choice but setup the connection once again and reopen the documents/apps before you can resume from where you left.</p>

<!--more-->

<p><strong>Solution</strong>: with GNU Screen, you can directly resume from where you left, without having to reopen all the documents/apps you’ve been working on.</p>

<p>The concept of GNU Screen is like turning on and off of a computer screen. You turn off a screen when you are done, let the computer to hang in there; you come back later, turn the screen back on and continue your tasks.</p>

<h3 id="steps-using-gnu-screen">Steps Using GNU Screen</h3>

<ol>
  <li><strong>Connect</strong>. Connect to a remote server and create a Screen session via <code>ssh -t &lt;server.domain.name&gt; screen -R</code></li>
  <li><strong>Detach</strong>. When done with the SSH session, use <code>ctrl-a d</code> to detach from the session. This also disconnect with the SSH server.</li>
  <li><strong>Reconnect</strong>. The SSH session is still running actually. When you are ready to resume working with the session, use <code>ssh -t &lt;server.domain.name&gt; screen -R</code> again to reconnect, then you are right where you left it.</li>
  <li><strong>Terminate</strong>. To permanently terminate a Screen session, just disconnect from the server the usual way (<code>ctrl-d</code>).</li>
</ol>

<p><strong>Limitation</strong>: If you are using apps with graphical interface, not just the command line environment, then <code>screen</code> is not suitable for resuming such jobs, and <a href="https://en.wikipedia.org/wiki/Virtual_Network_Computing">VNC</a> instead would be the ideal choice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Access to Linux-based Computing Resources With Graphical Interface (for UM Students)]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/09/07/remote-access-to-linux-based-computing-resources-with-graphical-interface-for-um-students/"/>
    <updated>2017-09-07T15:25:54-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/09/07/remote-access-to-linux-based-computing-resources-with-graphical-interface-for-um-students</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Note: this note is about University of Michigan computing resources.</p>
</blockquote>

<p>People working on numerical analysis often need to develop efficient code by doing multi-language programming, e.g. MATLAB/C++ or MATLAB/Fortran. Linux operating system is needed to have the best programming experience. (Mac OS has all sorts of compatibility issues.) For UM people who are using a Mac, I have explore the following four options for remotely accessing Linux-based computing resources.</p>

<!--more-->

<h3 id="use-the-its-statistics-and-computation-service-scs">1. Use the ITS Statistics and Computation Service (SCS)</h3>

<p>The <a href="http://www.itcs.umich.edu/scs/">ITS SCS</a> provides the easiest way to certain computational resources, no extra permissions/purchases needed. But the software may not be up-to-date, e.g. MATLAB version on this server is relatively old (MATLAB R2012b).</p>

<p>Steps:</p>

<ol>
  <li>Install <a href="https://www.xquartz.org/">XQuartz</a> on your Mac (See <a href="http://www.itcs.umich.edu/scs/x11.php">info</a>)</li>
  <li>Connect to server by typing <code>ssh -Y uniqname@scs.dsc.umich.edu</code> in terminal.</li>
  <li>Upon successful connection, type <code>matlab</code> to run the program. XQuartz graphics will be invoked.</li>
</ol>

<h3 id="ask-lsa-it-for-help">2. Ask LSA-IT for help</h3>

<p>For math people, we can contact the East Hall Technical Service (EHTS) for help. They offer newer software. (The EHTS is one of the four regional support desks of the <a href="https://lsa.umich.edu/lsait">LSA-IT</a>).</p>

<p>Steps:</p>

<ol>
  <li>Install <a href="https://www.xquartz.org/">XQuartz</a> on your Mac.</li>
  <li>Ask EHTS techicians (Room 1069EH) to grant you access to a Linux machine.</li>
  <li>Download the <a href="https://wiki.x2go.org/doku.php/download:start">X2Go Client</a>.</li>
  <li>Configure X2Go Client to connect to the <code>vulpix.math.lsa.umich.edu</code> server.</li>
</ol>

<h3 id="use-the-caen-computers">3. Use the CAEN computers</h3>

<p>The UM Computer-Aided Engineering Network (CAEN) provides the smoothest experience for general users as well as power users. The CAEN computer operates the newest Linux and Windows systems, with newest and most complete software libraries for all sorts of computational work. <strong>But these are only conveniently available to engineering students.</strong></p>

<p>Availability:</p>

<ul>
  <li>If you are an engineering student, or are currently taking engineering classes, then you can <a href="https://caen.engin.umich.edu/accounts/">access CAEN computing resources anywhere</a>, on-site or remotely.</li>
  <li>All other non-engineering students have NO remote access to CAEN computers, and can only go to north campus to use the CAEN computers in the Duderstadt Center.</li>
</ul>

<p>Steps:</p>

<ol>
  <li>See CAEN <a href="https://caen.engin.umich.edu/connect/linux-login-service/">Linux Login Service</a></li>
</ol>

<h3 id="use-the-flux-hpc-cluster">4. Use the Flux HPC Cluster</h3>

<p>This option builds connections using <a href="https://en.wikipedia.org/wiki/Virtual_Network_Computing">VNC</a> (instead of XQuartz) is faster and more stable, can disconnect and <strong>resume</strong> right where you left at any time.</p>

<p>Info about Flux:</p>

<ul>
  <li>The <a href="http://arc-ts.umich.edu/">ARC-TS</a>’s Flux HPC Cluster provides high performance computing service and has its own professional technical help.</li>
  <li>LSA people can use the <a href="http://arc-ts.umich.edu/document/lsas-public-flux-allocation/">public LSA allocations</a> on Flux. These allocations are free, but take longer for jobs to start.</li>
  <li>If you or your advisor has purchased <a href="http://arc-ts.umich.edu/flux/managing-a-flux-project/">private allocation</a> on Flux, then there is much <a href="http://arc-ts.umich.edu/document/lsas-public-flux-allocation/">less wait or limitations</a>.</li>
</ul>

<p>Steps:</p>

<ol>
  <li><a href="http://arc-ts.umich.edu/flux-user-guide/">Obtain access to Flux</a></li>
  <li>Follow instructions <a href="http://arc-ts.umich.edu/flux/vnc/">here</a> to configure a VNC server, and use a VNC client to connect.</li>
  <li>Follow instructions <a href="http://arc-ts.umich.edu/flux-user-guide/#document-14">here</a> to load and use softwares on Flux.</li>
</ol>

<h3 id="summary">Summary</h3>

<ul>
  <li>If eligible for a CAEN account, always use CAEN</li>
  <li>For general use and easy access, ask LSA-IT for help</li>
  <li>For serious programming, use Flux HPC Cluster</li>
  <li>For not-so-serious purpose, use the ITS SCS</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天都看见，却视而不见的东西]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/08/12/mei-tian-du-kan-jian-,que-shi-er-bu-jian-de-dong-xi/"/>
    <updated>2017-08-12T17:10:51-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/08/12/mei-tian-du-kan-jian-,que-shi-er-bu-jian-de-dong-xi</id>
    <content type="html"><![CDATA[<p>今天无聊去搜了一下这个世界上有多少美元在流通，网上的信息来源一般说有超过一兆美金（1 后面 12 个零）。于是又不禁想到，既然最大是这个数，那最小的美元单位是多少呢？</p>

<!--more-->

<p>之所以想到美元的问题，是因为今天玩编程的时候研究了一下 64 位的整数 Int64，看最大能表示多少位数字。Int64 是一种专门用来表示整数的数据类型，用到 64 位的 0 和 1 二进制数。因为有一位要表示正负号，剩下 63 位可以表示最大的数是 $2^{63}-1 \approx 9.22
\times10^{18}$，是一个 19 位的数字。</p>

<p>有趣的是维基百科里面有<a href="https://en.wikipedia.org/wiki/9,223,372,036,854,775,807">这个数字的页面</a>，其中有一栏提到了这么一则新闻，说 PayPal 在 2013 年的时候曾经系统出错了一次，给一位客户的账户打了 “$92 quadrillion（9.2 万兆美金）” 。这是一个 17 位数，加上小数点后 2 位，一共刚刚好 19 位，就是最大的 Int64 整数 —— 所以 PayPal 是以 Int64 数据型来记账的，这是一次数据溢出的操作。</p>

<p>我们看到用 Int64 来记账的话，如果小数点后留两位，整数位大约可以记到 9.2 万兆美元的级别，这比起现在全世界流通的 1 兆多的美元高了五个数量级，还是绰绰有余的。</p>

<p>进一步，这个故事告诉我们 PayPal 上的金额最小单位是 1 美分。所以美分就是最小的美元单位了吗？于是跑到<a href="https://en.wikipedia.org/wiki/United_States_dollar">美元的维基页面</a>瞧了一下，发现并不是 1 美分。现行最小的美元单位是 1 mill （千分之一美金），小数点后三位。这并没有让我吃惊，我真正吃惊的是，里面有一段这样的说明：</p>

<blockquote><p>... “mill” is largely unknown to the general public, though mills are sometimes used in matters of tax levies, and gasoline prices are usually in the form of \$X.XX9 per gallon, e.g., \$3.599, more commonly written as \$3.59 ⁹⁄₁₀.</p><footer><strong>Wikipedia</strong> <cite><a href="https://en.wikipedia.org/wiki/United_States_dollar">United States Dollar</a></cite></footer></blockquote>

<p>读到这里，我不禁惊叹：这个东西我每天都见到，只不过我又理所当然地把它忽略了。</p>

<p>这段话在说什么呢？说的是我们平时去加油站时看到的价格板，上面的价格都是精确到小数点后三位的，像是这样：</p>

<p><img src="http://bobbielf2.github.io/images/blog_figures/youjia.png" width="400" /></p>

<p>有些天天见的东西，我们也都以为自己知道那是什么意思，直到疑问被提出来。几千年前，苏格拉底式的提问让当时的人开始审视自己的知识，发现自己以往认识的界限。今天我自己经历了一番这样的感受。</p>

<p>–</p>

<h3 id="section">后记：</h3>

<p>1) 如果保留数点后三位而不是两位，那 Int64 还是能表示到千兆美元的级别的，没有太大影响。而且既然 PayPal 只保留两位小数，我有理由相信金融行业实际操作都是用同样的数据贮存方式的。这样保持了业界金融软件的一致性，可以节省成本。而需要用到 mill 这个单位的少数行业，只需要额外记录一位数字就好了。</p>

<p>2) 视而不见（英文可以说 to look without seeing it 吗？）让我想起了那首 50 多年前的经典的歌曲：</p>

<blockquote><p>People talking without speaking  <br />People hearing without listening  <br />People writing songs that voices never share  <br />And no one dared  <br />Disturb the sound of silence.</p><footer><strong>Simon &amp; Garfunkel</strong> <cite>The Sound of Silence</cite></footer></blockquote>

<p>其实这首歌在美国已俨然成为一个恶搞文化的符号了。当一个人在某个情境之下想起不堪回首的过去，陷入沉思与回忆，背景音乐就会响起：“Hello darkness my old friend …” 。网上有大量恶搞视频，都挺搞笑的。</p>

<p>3) 写这篇文章的时候，需要把英文计数单位翻译成中文。比如 billion 翻成十亿，trillion 翻成一兆。在这个过程中，我发现“不可思议”竟然也是一个单位，一个不可思议等于 1 后面加 64 个零。这个单位的起源是一个佛教用语，形容神通很大的意思。真是够不可思议的！</p>

<p><img src="http://bobbielf2.github.io/images/blog_figures/bukesiyi.png" width="400" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[色情和艺术是近义词吗？]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/08/12/se-qing-he-yi-zhu-shi-jin-yi-ci-ma-%3F/"/>
    <updated>2017-08-12T15:32:46-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/08/12/se-qing-he-yi-zhu-shi-jin-yi-ci-ma-?</id>
    <content type="html"><![CDATA[<p>色情和艺术是不是一线之隔的近义词？热情和沮丧是不是两种相反的情绪？我最近对这一类问题有一些思考，想把它们整理出来。</p>

<!--more-->

<h3 id="section">1. 结果上的反义词，原因上的同义词</h3>

<p>我发觉世上很多反义词其实都是近义词</p>

<p>比如成功和失败是一对经典的反义词。</p>

<p>你去参加一个比赛，比如围棋或者马拉松，你就有可能赢或者输，这取决于你的能力。而有一些事情，比如创业或投资，这种不确定性很大的领域，能力可能也不是决定的因素，有时就是运气不眷顾你，无可避免地会遭遇一些失败。就算你是乔丹，也有投篮不中和输球的时候；就算你是柯洁，也有输给 AI 无力还手的时候；就算你是巴菲特，也有投资项目赔钱的时候。</p>

<p>但是无论成败于否，这其实都是勇于尝试的结果，都表明你曾经勇敢进取过。它的反面应该是无为或者平庸，没有争取过，就无所谓成功失败了。在这个意义上，成功和失败是近义词，平庸才是它们的共同反义词。</p>

<p>这就是为什么有人能够看得开，勇敢地面对失败。他们知道失败无可避免，所以他们的注意力都放在自己能掌控的东西上，继续拼搏不断获得成长。</p>

<p>–</p>

<p>再比如热情和沮丧、热切和厌烦，看起来都是相反的情绪。你喜欢的东西带给你热情，你憎恨的东西让你沮丧。</p>

<p>但其实无论热情还是沮丧，都源于执着，是同样的执着面对不同结果时的自然产物。</p>

<p>你对一份事业抱有热情是因为事业的成功能给你快感，即便是想像中的成功；你对一份事业感到厌烦则是因为事业上的失败让你痛苦，即便失败还没到来而只是你的预期。这两者都是在意与执着的表现，只不过有人最终得到了，有人没有得到。<strong>热情还是沮丧，都只是你踏上了执着这条路之后必将到达的一个分岔路口。</strong>往哪一边走？你可能都无法控制。在这种意义上，热情和沮丧、热切和厌烦都是近义词，它们共同的反义词其实是无为和冷淡——不踏上这条路，就不用到达分岔口。</p>

<p>因此有经验的投资人在审核一个项目时，看重的不是创业者有没有热情，而是他们有没有能力。没有能力的人，热情终将沦为沮丧，热情越高，沮丧越大。</p>

<h3 id="section-1">2. 表像上的近义词，本质上的反义词</h3>

<p>与此同时，很多近义词其实都是反义词</p>

<p>比如艺术和色情，像是近义词。人们会说，艺术与色情就只有一线之隔</p>

<p>你去艺术博物馆，看到各种祼体的画像和雕像。有的人觉得这是色情被美化和合理化之后的公然展示，是人对自己的欲望找一个发泄的借口；有的人却能用细腻的语言描述一件作品想表达和传递的信息，知道作者有什么样的经历激发了这种灵感，以及这种表达的有什么与众不同之处和对后来的人产生了怎样的影响。</p>

<p>同样的作品，是什么样的“一线之隔”让不同的人有天差地别的解读？这要回归到艺术和色情两者的起源。</p>

<p>艺术源于生活的细心观察和思考，它建立在好奇心之上，用最纯粹的眼光去看这个世界，然后再运用创意和技巧把感受和想法表达出来成为一件作品。这是极致的感性和理性共同作用下产生的作品。色情则既非感性也非理性，而是源于最原始的冲动， 是直觉，是本能的反射，是动物的本性。<strong>看似相近的艺术和色情，其实是人性与动物性这两种相反的原动力所生产出来的结果。</strong></p>

<p>所以我们可以看到大众里不断有人站出来，指责艺术家龌龊和势利，博得一片叫好。同时又不断有艺术家屡屡发明新的表达形式，挑战世俗的眼光，引发人们重新思考，甚至不惜为此付出代价。被当代人指责和不被理解，几乎是艺术家的宿命。</p>

<h3 id="section-2">3. 你的想法？</h3>

<p>按照这些思路，很多东西都可以重新思考：理想和妄想，信息和知识，机器和生物，科学和迷信，爱国和排外。 这些到底是近义词还是反义词呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dancing With Julia]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/06/07/dancing-with-julia/"/>
    <updated>2017-06-07T16:39:19-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/06/07/dancing-with-julia</id>
    <content type="html"><![CDATA[<p>I have been having fun with <a href="https://julialang.org/">the Julia language</a> lately. It is a new programming language for scientific computing. You may wonder, why do we need a new language at all? Don’t we already have MATLAB, Mathematica, Python with NumPy and SciPy, etc., are’t those enough?</p>

<p>Well, it is true that those are awesome softwares for scientific computing, they have all the necessary functionalities and powerful libraries, and they are easy to learn. But there is a common (fatal) issue that prevents them from creating industrial quality codes – speed. We want faster speed! The Julia language is developed specifically for this.</p>

<!--more-->

<h2 id="the-julia-language">1. The Julia Language</h2>

<p>What is the Julia language? According to its <a href="https://julialang.org/">official page</a></p>

<blockquote>
  <p>Julia a high-level, high-performance dynamic programming language for numerical computing.</p>
</blockquote>

<p>There are two keywords here: <strong>high-performance</strong> and <strong>dynamic programming</strong>. These two words don’t usually come together! If you have written some program for numerical computations, you probably have noticed:</p>

<ul>
  <li><strong>Dynamic programming</strong> languages like Python and MATLAB are very handy and human-friendly. Each such language has a <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a> that allows you to see the effects of your code immediately, so the workflow is interactive. You can easily explore ideas, quickly prototype a new software. The syntax is simple which allows for fast development.</li>
  <li>However, when you finally decide to write some software for practical use, all these dynamic programming languages suffer from slow running speeds. Then you have to switch to a <strong>high-performance</strong> programming language like C/C++ and Fortran. These languages are static, use a classic edit-compile-run-debug (ECRD) cycle in contrast to REPL. It takes a lot of time to write the code and debug.</li>
</ul>

<p>This is called the <strong>Two-language problem</strong>: efficiency for human or efiiciency for the machine, pick one. There have been efforts trying to resolve this problem, for example, by linking the C libraries in a Python code, but such usage of multi-language programming quickly makes the code really complex and hard to maintain.</p>

<h3 id="solving-the-two-language-problem">1.1 Solving the two-language problem</h3>

<p>This is exactly where Julia kicks in.</p>

<p>Julia is a dynamic programming language as MATLAB or Python, making it easy to use. But Julia also runs <a href="https://julialang.org/benchmarks/">very fast</a>, comparable to the performance of C codes. How could a dynamic language run fast? It does so by using the <a href="https://en.wikipedia.org/wiki/LLVM">LLVM</a>-based <a href="https://en.wikipedia.org/wiki/Just-in-time_compilation">just-in-time</a> (JIT) compiler. In fact Julia is designed for JIT from the very beginning!</p>

<h3 id="want-to-try-julia">1.2 Want to try Julia?</h3>

<p>If you would like to try out the Julia language, I recommend this quick hands-on approach: firstly, you learn the basics by going through some short tutorial found <a href="https://julialang.org/learning/#tutorials">here</a>; after having some familiarity with the syntax, you start some programming with your field of study with the help of some <a href="http://pkg.julialang.org/">existing packages</a>. For example, I work on numerical analysis and spectral methods, so I started with the <a href="https://github.com/JuliaApproximation/ApproxFun.jl">ApproxFun</a> package under the <a href="https://github.com/JuliaApproximation">JuliaApproximation</a> project; or if you have done some statistics programming with languages like R, there is a collection of statistics packages under the <a href="https://github.com/JuliaStats">Julia Statistics</a> project; or if you are an algebraist, you may have done some symbolic programming with languages like REDUCE, there is also a <a href="https://github.com/chakravala/Reduce.jl">Reduce</a> package for you. Check the <a href="http://pkg.julialang.org/">list of available packages</a>, no matter what you work on, you are likely to find something that suits your need.</p>

<p>Next, I am going to talk about an experience I had when coding Julia. It will be an example with very technical details, so you may stop reading at this point if all you want is just some general information about Julia.</p>

<h2 id="testing-my-code-why-cant-i-redefine-my-test-functions">2. Testing my code: why can’t I redefine my test functions?</h2>

<p>(<strong>Note:</strong> the issue mentioned in this note pertains to julia version <code>v0.5</code>, there will be a change/fix of the behavior in <code>v0.6</code>; see the P.S. in the end.)</p>

<h3 id="redefine-test-functions-that-will-be-called-by-a-high-order-function-the-failure">2.1 Redefine test functions that will be called by a high-order function: the failure</h3>

<p>In scientific computing, we often need to test a function by feeding it different parameters to see if the behaviors are as expected.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> myFun1</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">           <span class="k">return</span> <span class="n">value</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">v</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">myFun1</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>    <span class="c">#test case 1</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">v</span> <span class="o">=</span> <span class="nb">pi</span><span class="p">;</span> <span class="n">myFun1</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>    <span class="c">#test case 2</span>
</span><span class="line"><span class="mf">4.141592653589793</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">v</span> <span class="o">=</span> <span class="o">-</span><span class="n">e</span><span class="p">;</span> <span class="n">myFun1</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>    <span class="c">#test case 3</span>
</span><span class="line"><span class="o">-</span><span class="mf">1.718281828459045</span>
</span></code></pre></td></tr></table></div></figure>

<p>This is completely fine with a simple function. But if you are debugging a <strong>high-order function</strong>, i.e. a function whose input (or output) is also a function:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line">           <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>    <span class="c">#test case 1</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>    <span class="c">#test case 2</span>
</span><span class="line"><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f</span><span class="p">(</span><span class="kt">Any</span><span class="p">)</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span><span class="mi">1</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="mf">1.</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>    <span class="c">#test case 3</span>
</span><span class="line"><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f</span><span class="p">(</span><span class="kt">Any</span><span class="p">)</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="mi">1</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span><span class="mf">1.</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">println</span><span class="p">([</span><span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)])</span>
</span><span class="line"><span class="p">[</span><span class="mf">7.38906</span><span class="p">,</span><span class="mf">2.0</span><span class="p">]</span> <span class="c">#both should have returned the same value f(2)!</span>
</span></code></pre></td></tr></table></div></figure>

<p>We see that redefining a function is okay if you just want to evaluate it, but redefining for the testing of another high-order function won’t work. Unless you also <strong>redefine that high-order function to update the dependence</strong>:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line">           <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line"><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">myFun2</span><span class="p">(</span><span class="kt">Any</span><span class="p">)</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span><span class="mi">2</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">11</span><span class="p">]:</span><span class="mf">2.</span>
</span><span class="line"><span class="n">myFun2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line"><span class="mf">7.38905609893065</span>
</span></code></pre></td></tr></table></div></figure>

<p>But redefining every high-order function is cumbersome, and even impractical if there is a chain of dependencies among multiple high-order functions.</p>

<h3 id="the-logic-behind-such-failure-how-the-jit-compiler-works">2.2 The logic behind such failure: how the JIT compiler works</h3>

<p>This issue received a long discussion (started a couple years ago and is still going on) on GitHub <a href="https://github.com/JuliaLang/julia/issues/265">issue #265</a>. This goes back to the fundamental question of how Julia’s JIT compiler works (under the hood) in real time.</p>

<ul>
  <li>The JIT compiler would compile a custom function (high-order or not) when it is executed for the first time. So you see behavior like this</li>
</ul>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> f1</span><span class="p">()</span>
</span><span class="line">           <span class="mi">2</span><span class="p">;</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line"><span class="n">f1</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> f2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line">           <span class="n">f</span><span class="p">()</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line"><span class="n">f2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> f1</span><span class="p">()</span>
</span><span class="line">           <span class="mi">3</span><span class="p">;</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line"><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f1</span><span class="p">()</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span><span class="mi">2</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="mf">2.</span>
</span><span class="line"><span class="n">f1</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f2</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span>
</span><span class="line"><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>
    <p>Because <code>f2</code> is compiled when <code>f2(f1)</code> is called; before the call, <code>f1</code> is most recently defined to return <code>3</code>, so <code>f2(f1)</code> returns <code>3</code>; the first definition of <code>f1</code> that returned <code>2</code> was overwritten.</p>
  </li>
  <li>
    <p>After the <code>f2(f1)</code> call, no matter how you overwrite the definition of <code>f1</code>, <code>f2(f1)</code> will always return <code>3</code> since that’s how it was when compiled at its first call.</p>
  </li>
</ul>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> f1</span><span class="p">()</span>
</span><span class="line">           <span class="mi">2</span><span class="p">;</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line"><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f1</span><span class="p">()</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="mi">2</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span><span class="mf">2.</span>
</span><span class="line"><span class="n">f1</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f2</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span>
</span><span class="line"><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>Unless you also redefine <code>f2</code>, then <code>f2</code> becomes an uncompiled function again. The next time <code>f2</code> is called, it will be compiled again and updates its behavior.</li>
</ul>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> f2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line">           <span class="n">f</span><span class="p">()</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line"><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f2</span><span class="p">(</span><span class="kt">Any</span><span class="p">)</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span><span class="mi">2</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">7</span><span class="p">]:</span><span class="mf">2.</span>
</span><span class="line"><span class="n">f2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f2</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span>
</span><span class="line"><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>This experiment shows that the compilation is down to the lowest-order function, so if a high-order function is called, the JIT will compile all the functions it calls, until it hits a simple function. (Compilation can also occur when you feed a custom function with variables of different types. This is the subject of <strong>multiple dispatch</strong>, another great advantage of Julia).</li>
</ul>

<h3 id="solution-using-anonymous-functions">2.3 Solution: using anonymous functions</h3>

<p>I have found a solution in <a href="https://github.com/JuliaPlots/Plots.jl/issues/508#issuecomment-250200614">a comment of issue #508</a>, which is to use the lambda function notation <code>-&gt;</code> in Julia to define an anonymous function, and assign the anonymous function to a variable <code>f</code>. Then feed this variable into the high-order function you want to test.</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line">           <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line"><span class="n">myFun2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line"><span class="mi">4</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line"><span class="mf">7.38905609893065</span>
</span></code></pre></td></tr></table></div></figure>

<p>All works well now! This is because the variable <code>f</code> is now pointing to an anonymous function. If it is later redefined to point to a different function, this pointer value is updated because every anonymous function receives a unique label. So there are no more confusions!</p>

<h3 id="ps-issue-fixed-in-v06">P.S. Issue fixed in <code>v0.6</code></h3>

<p>I have downloaded the pre-released version <code>julia v0.6.0-rc2</code> to check if the issue is well handled. Apparently, the issue is well fixed in this new version:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line">           <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line"><span class="n">myFun2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line"><span class="mi">4</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line"><span class="mf">7.38905609893065</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Holy Trinity]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/05/19/the-holy-trinity/"/>
    <updated>2017-05-19T22:03:22-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/05/19/the-holy-trinity</id>
    <content type="html"><![CDATA[<p>This isn’t about theology, but I will talk about the number three.</p>

<p>We love the number three. Many of our rules/doctrines consist of three parts. For example, in Christianity, there is the theory of the Holy Trinity, stating that God manifests Himself in three forms: the Father, the Son, and the Holy Spirit. I’d love to cast them into a shamrock diagram:</p>

<p><img class="center" src="http://bobbielf2.github.io/images/blog_figures/shamrock_holy.png" width="300" /></p>

<p>The key idea here is that, although there are three forms, there is really only one God.</p>

<!--more-->

<p>While I am not a Theologist, I appreciate the idea that an important concept is broken into three aspects, each of them stems from the same root, and connects with each other to promote deeper understanding of the subject. Let’s call them the “shamrock ideas”.</p>

<p>I happened to have encountered some of the interesting and beautiful shamrock ideas in the realm of science and mathematics. These ideas have given me incredible insights into subjects, helping me see the big pictures of a lot of seemingly scattered knowledge.</p>

<h2 id="science">Science</h2>

<p>Perhaps the most well-known example of a shamrock idea is the three components of science.</p>

<blockquote>
  <p>There are three great branches of modern science: theory, experiment, and computation.</p>
</blockquote>

<p><img class="center" src="http://bobbielf2.github.io/images/blog_figures/shamrock_science.png" width="300" /></p>

<p>The keyword in this shamrock is <em>computation</em>, it reminds us how computation has influenced science, and has evolved from a mere tool into a full-fledged scientific branch.</p>

<p>In the early days of science, machines were invented to help scientists with their calculations. Searching the internet you will find calculators like Arithmometer (1850s-1910s) and Comptometer (1880s-1970s). Those machines can add, subtract, multiply and divide numbers. They were once very useful to scientists, and are now all gone to museums. In the mid-1900s, electronic computers started to take over, and computing power skyrocketed in the past 60 years. Computer performance evolved from hectoscale computing (~200 operations per second) with the first IBM computer in 1946, to petascale computing in 2009 with modern supercomputers, which is thousands of trillions of operations per second.</p>

<p>Such leap in computing power has unleashed ideas that were sheer impossible just decades ago.</p>

<p>With experiment, science have gone a long way tracing back to the ancient Greeks. With computation, science has taken off and is moving ever faster. We can simulate things that are too far (universe), too small (quantum), too expensive (medicine), or too complex (social network).</p>

<h2 id="mathematics">Mathematics</h2>

<p>I would like to mention more shamrock ideas I found reading math.</p>

<h3 id="functions-boyd">Functions <sup id="fnref:boyd"><a href="#fn:boyd" class="footnote">1</a></sup></h3>

<p>The function shamrock has three leaves respectively labeled formula, spectral coefficients, and grid point values. Together, these three concepts help us better understand and use functions. To see how these three concepts connect to each other, we realize that we go from the symbolic $f(x)$ to values ${f_j}$ by sampling, from $f(x)$ to spectral coefficients ${a_j}$ by integral transforms (e.g. Fourier transform), and from ${f_j}$ to ${a_j}$ by discrete algorithms (e.g. FFT).</p>

<p><img class="center" src="http://bobbielf2.github.io/images/blog_figures/shamrock_function.png" width="300" /></p>

<p>When solving a problem that involves a function $f(x)$, the symbolic formula is manipulated with analytical methods, its spectral coefficients are useful for Galerkin methods, and the grid point values are what the convenient pseudospectral methods operate on.</p>

<p>A mathematician would be crippled if failing to understand and to freely switch between any of them.</p>

<h3 id="analysis-trefethen">Analysis <sup id="fnref:trefethen"><a href="#fn:trefethen" class="footnote">2</a></sup></h3>

<p>This probably is my favorite shamrock. In analysis, the three types of series, Fourier, Laurent, and Chebyshev, are really the same series looking from different angles.</p>

<p><img class="center" src="http://bobbielf2.github.io/images/blog_figures/shamrock_analysis.png" width="300" /></p>

<p>Let’s consider the substitutions</p>

<script type="math/tex; mode=display">x = \frac{z+z^{-1}}{2} = \cos\theta</script>

<p>they give the equivalent relations</p>

<script type="math/tex; mode=display">T_n(x) = \frac{z^n+z^{-n}}{2} = \cos(n\theta)</script>

<p>where $T_n(x)$ is the Chebyshev polynomial of order $n$. Given a smooth function $f(x)$ on $x\in[-1,1]$, it can be expanded as a Chebyshev series</p>

<script type="math/tex; mode=display">f(x) = \sum^\infty_{n=0}a_nT_n(x)</script>

<p>which under the equivalent relations gives</p>

<script type="math/tex; mode=display">\sum^\infty_{n=0}a_nT_n(x) = \sum^\infty_{n=0} a_n \frac{z^n+z^{-n}}{2} = \sum^\infty_{n=0} a_n \cos(n\theta)</script>

<p>or</p>

<script type="math/tex; mode=display">\sum^\infty_{n=0}a_nT_n(x) = \frac{a_0}{2}+\frac{1}{2}\sum^\infty_{n=-\infty} a_{|n|} z^n = \frac{a_0}{2}+\frac{1}{2}\sum^\infty_{n=-\infty} a_{|n|} e^{in\theta}</script>

<p>The last equalities show the amazing relationships between the three branches of analysis, providing a picture about how viewing from different angles gives you different series expansions:</p>

<ul>
  <li>If you look at the unit circle in the complex plane (or a periodic interval) $\theta\in[0,2\pi]$, you see Fourier series, the fundamental tool for real analysis</li>
  <li>If you look at the annulus <span>$\frac{1}{\rho} &lt; |z| &lt; \rho$</span>, you see Laurent series, the fundamental tool for complex analysis</li>
  <li>If you look at the interval $x\in[-1,1]$, you see Chebyshev series, the fundamental tool for numerical analysis</li>
</ul>

<p>Such connections are always there, but you need to discover them. Even many math majors know little about the shamrock, and most of them have taken all three courses.</p>

<h2 id="a-final-note">A final note</h2>

<p>I love the shamrocks not because they teach me new concepts; in fact they don’t. I have understood the concepts in the three leaves of each shamrock before I saw them put together. The important thing of these shamrocks is that they provide a unified view, a new prospective that connects and sees things you knew differently. Like Kalid Azad (author of <a href="https://betterexplained.com">BetterExplained</a>) once <a href="https://betterexplained.com/articles/learn-math-like-mega-man/">mentioned in a post</a>, our understandings improve the most not when we’ve learned new concepts, but when mindset shifts happen.</p>

<h3 id="references">References:</h3>

<div class="footnotes">
  <ol>
    <li id="fn:boyd">
      <p>John P Boyd, <em>Chebyshev and Fourier Spectral Methods</em>, Section 9.3 <a href="#fnref:boyd" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:trefethen">
      <p>Nick Trefethen, <em>Approximation Theory and Approximation Practice</em>, Chapter 3 <a href="#fnref:trefethen" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preserve the Table of Contents When Converting a Book From Djvu to PDF]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/04/11/preserve-the-table-of-contents-when-converting-a-book-from-djvu-to-pdf/"/>
    <updated>2017-04-11T20:47:57-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/04/11/preserve-the-table-of-contents-when-converting-a-book-from-djvu-to-pdf</id>
    <content type="html"><![CDATA[<p>There are many readily available softwares (e.g. <a href="https://itunes.apple.com/us/app/djvu2pdf/id629039447?mt=12">DjVu2PDF</a>) for converting a book from <code>.djvu</code> to <code>.pdf</code> format, but none of those will preserve the table of contents in the output PDF.</p>

<!--more-->

<p>Having a table of contents is very handy. For example when viewing a book in Preview, the table of contents works like a multi-level bookmark, you can simply click on any link in the sidebar to jump to any chapter/section of the book.</p>

<p><img src="http://bobbielf2.github.io/images/blog_figures/toc_in_preview.png" width="600" /></p>

<p>So I Googled and found <a href="https://superuser.com/a/915399">this quetion</a> on StackExchange that asked exactly my question. Here is a summary of the accepted answer on how you can preserve (or more precisely, create) the table of contents in a PDF converted from Djvu.</p>

<h2 id="preliminary">1. Preliminary</h2>

<p>You will need to install <a href="https://www.pdflabs.com/tools/pdftk-server/">pdftk</a> (part of PDFtk Server) and <a href="https://sourceforge.net/projects/djvu/">djvused</a> (part of DjVuLibre)</p>

<p><strong>Note 1:</strong> pdftk for Mac OS X 10.11 and above. I found in <a href="http://stackoverflow.com/a/33248310/4608899">this answer</a> on Stack Overflow that the developer of PDFtk provides an installer for PDFtk Server on OS X 10.11 and above. It is kind of strange that the <a href="https://www.pdflabs.com/tools/pdftk-server/">official website</a> only provides the installer for OS X up to 10.8. (This older version can be installed, but won’t run. When you type pdftk commands in the Terminal, it will make you wait forever.)</p>

<p><strong>Note 2:</strong> About djvused command line setup on OS X. After installing DjVuLibre, in order to use djvused in command line, you need to run</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">eval</span> <span class="s1">&#39;/Applications/DjView.app/Contents/setpath.sh&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>If this doesn’t add the correct path, you can also manually add the following line into <code>~/.bash_profile</code></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line">PATH<span class="p">=</span><span class="s2">&quot;/Applications/DjView.app/Contents/bin:${PATH}&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="convert-the-table-of-contents">2. Convert the Table of Contents</h2>

<p>(Note: all materials in this section follow closely the <a href="https://superuser.com/a/915399">original answer</a> on StackExchange, except I coded a very simple python program in Step 2.)</p>

<p>Suppose now you have converted <code>book.djvu</code> into <code>book.pdf</code>, the former has a table of contents but the latter doesn’t.</p>

<h3 id="step-1-extract-djvu-outline">Step 1. extract Djvu outline</h3>

<p>Use the following command to extract the table of contents from <code>book.djvu</code></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">djvused <span class="s2">&quot;book.djvu&quot;</span> -e <span class="s1">&#39;print-outline&#39;</span> &gt; bmarks.out
</span></code></pre></td></tr></table></div></figure>

<p>The output file <code>bmarks.out</code> lists the table of contents in a serialized tree format using <a href="https://en.wikipedia.org/wiki/S-expression">SEXPR</a>, which can be summarized as:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">file ::<span class="o">=</span> <span class="o">(</span>bookmarks
</span><span class="line">           &lt;bookmark&gt;*<span class="o">)</span>
</span><span class="line">bookmark ::<span class="o">=</span> <span class="o">(</span>name
</span><span class="line">               page
</span><span class="line">               &lt;bookmark&gt;*<span class="o">)</span>
</span><span class="line">name ::<span class="o">=</span> <span class="s2">&quot;&lt;character&gt;*&quot;</span>
</span><span class="line">page ::<span class="o">=</span> <span class="s2">&quot;#&lt;digit&gt;+&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Notice that under this format, you can append a “child bookmark” inside a “parent bookmark”. For example, a <code>bmarks.out</code> may look like this</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">(</span>bookmarks
</span><span class="line">  <span class="o">(</span><span class="s2">&quot;bmark1&quot;</span>
</span><span class="line">    <span class="s2">&quot;#1&quot;</span><span class="o">)</span>
</span><span class="line">  <span class="o">(</span><span class="s2">&quot;bmark2&quot;</span>
</span><span class="line">    <span class="s2">&quot;#5&quot;</span>
</span><span class="line">    <span class="o">(</span><span class="s2">&quot;bmark2subbmark1&quot;</span>
</span><span class="line">      <span class="s2">&quot;#6&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="o">(</span><span class="s2">&quot;bmark2subbmark2&quot;</span>
</span><span class="line">      <span class="s2">&quot;#7&quot;</span><span class="o">))</span>
</span><span class="line">  <span class="o">(</span><span class="s2">&quot;bmark3&quot;</span>
</span><span class="line">    <span class="s2">&quot;#9&quot;</span>
</span><span class="line">    ...<span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="step-2-translate-the-djvu-outline-to-pdf-metadata-format">Step 2. translate the Djvu outline to PDF metadata format</h3>

<p>Now, Djvu and PDF store the bookmark data in different formats. While Djvu uses SEXPR, PDF uses metadata, which looks like this:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">file ::<span class="o">=</span> &lt;entry&gt;*
</span><span class="line">entry ::<span class="o">=</span> BookmarkBegin
</span><span class="line">          BookmarkTitle: &lt;title&gt;
</span><span class="line">          BookmarkLevel: &lt;number&gt;
</span><span class="line">          BookmarkPageNumber: &lt;number&gt;
</span><span class="line">title ::<span class="o">=</span> &lt;character&gt;*
</span></code></pre></td></tr></table></div></figure>

<p>The example in Step 1 when translated into PDF metadata will look like</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">BookmarkBegin
</span><span class="line">BookmarkTitle: bmark1
</span><span class="line">BookmarkLevel: 1
</span><span class="line">BookmarkPageNumber: 1
</span><span class="line">BookmarkBegin
</span><span class="line">BookmarkTitle: bmark2
</span><span class="line">BookmarkLevel: 1
</span><span class="line">BookmarkPageNumber: 5
</span><span class="line">BookmarkBegin
</span><span class="line">BookmarkTitle: bmark2subbmark1
</span><span class="line">BookmarkLevel: 2
</span><span class="line">BookmarkPageNumber: 6
</span><span class="line">BookmarkBegin
</span><span class="line">BookmarkTitle: bmark2subbmark2
</span><span class="line">BookmarkLevel: 2
</span><span class="line">BookmarkPageNumber: 7
</span><span class="line">BookmarkBegin
</span><span class="line">BookmarkTitle: bmark3
</span><span class="line">BookmarkLevel: 1
</span><span class="line">BookmarkPageNumber: 9
</span><span class="line">...
</span></code></pre></td></tr></table></div></figure>

<p>It is a fun exercise to work out the correspondence of the two formats.</p>

<p><strong>Note:</strong> I have written a python program to automatically convert the Djvu SEXPR <code>bmarks.out</code> into the PDF metadata form and output as <code>bmarks2.txt</code></p>

<figure class="code"><figcaption><span>Convert Djvu outline into PDF metadata (bmarkDjvu2pdf.py)</span> <a href="http://bobbielf2.github.io/downloads/code/bmarkDjvu2pdf.py">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="c">#! /usr/bin/env python</span>
</span><span class="line"><span class="n">metadata</span> <span class="o">=</span> <span class="s">&#39;&#39;</span> <span class="c"># string to be written into PDF metadata</span>
</span><span class="line"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;bmarks.out&quot;</span><span class="p">)</span> <span class="c"># open input file: djvu outline</span>
</span><span class="line"><span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class="line"><span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;(bookmarks&#39;</span><span class="p">):</span>
</span><span class="line">    <span class="n">level</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="k">while</span> <span class="p">(</span><span class="n">level</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">):</span>
</span><span class="line">    <span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class="line">    <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;(&quot;&#39;</span><span class="p">):</span>
</span><span class="line">        <span class="n">level</span> <span class="o">=</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">metadata</span> <span class="o">=</span> <span class="n">metadata</span> <span class="o">+</span> <span class="s">&quot;BookmarkBegin</span><span class="se">\n</span><span class="s">BookmarkTitle: &quot;</span><span class="o">+</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;(&quot;&#39;</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">BookmarkLevel: &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">level</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class="line">        <span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class="line">        <span class="k">while</span> <span class="n">line</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&#39;)&#39;</span><span class="p">):</span>
</span><span class="line">            <span class="n">level</span> <span class="o">=</span> <span class="n">level</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class="line">        <span class="n">metadata</span> <span class="o">=</span> <span class="n">metadata</span> <span class="o">+</span> <span class="s">&quot;BookmarkPageNumber: &quot;</span><span class="o">+</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;&quot;#&#39;</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="k">while</span> <span class="n">line</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&#39;)&#39;</span><span class="p">):</span>
</span><span class="line">            <span class="n">level</span> <span class="o">=</span> <span class="n">level</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;bmarks2.txt&quot;</span><span class="p">,</span><span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="c"># output file: for PDF metadata</span>
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">metadata</span><span class="p">)</span>
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="step-3-modify-pdf-metadata-to-include-the-bookmark-data">Step 3. modify PDF metadata to include the bookmark data</h3>

<p>Extract PDF metadata with this command:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">pdftk <span class="s2">&quot;book.pdf&quot;</span> dump_data &gt; pdfmetadata.out
</span></code></pre></td></tr></table></div></figure>

<p>Open the <code>pdfmetadata.out</code> file, and find the line that begins with <code>NumberOfPages:</code>, and insert your list of bookmarks after this line. Save the new file as <code>pdfmetadata.in</code>. Now run this command:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">pdftk <span class="s2">&quot;book.pdf&quot;</span> update_info <span class="s2">&quot;pdfmetadata.in&quot;</span> output newbook.pdf
</span></code></pre></td></tr></table></div></figure>

<p>The output <code>newbook.pdf</code> is your new <code>book.pdf</code> equiped with a convenient table of contents. Happy reading!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beamer Video Tutorial]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/01/12/beamer-video-tutorial/"/>
    <updated>2017-01-12T16:04:51-05:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/01/12/beamer-video-tutorial</id>
    <content type="html"><![CDATA[<p>As a researcher, I often need to make presentation slides, and want to embed movies in my slides for better illustrations. After doing a little research, I converged to the solution described in this article.</p>

<!--more-->

<p>If you want to benefit from this tutorial, here are two most important assumptions:</p>

<p><strong>1</strong>. Slides are made with the <a href="https://en.wikipedia.org/wiki/Beamer_(LaTeX)"><strong>LaTeX beamer</strong></a> package.<br />
<strong>2</strong>. Movie format is assumed to be <code>.flv</code> (because I can’t play <code>.mp4</code> movies on my Mac).</p>

<p>Accordingly, this tutorial has two parts:</p>

<p><strong>1</strong>. How to embed <code>.flv</code> in beamer.<br />
<strong>2</strong>. How to convert movie format to <code>.flv</code>.</p>

<h2 id="part-i-embed-flv-movies-in-latex">Part I: Embed <code>.flv</code> movies in LaTeX</h2>

<p><strong>(Update: I have found a better option, please ignore this part and jump to Part III)</strong></p>

<p><strong>Step 1</strong>: Download the <code>flashmovie.sty</code> package file from <a href="http://tug.ctan.org/tex-archive/macros/latex/contrib/flashmovie/">CTAN</a></p>

<blockquote>
  <p>Remark: The <code>flashmovie.sty</code> package is written by Professor Timo Hartmann from TU Berlin.</p>
</blockquote>

<p><strong>Step 2</strong>: Download the <a href="https://ia601703.us.archive.org/8/items/JwPlayerFiles/player.swf"><code>player.swf</code></a> file from <a href="https://archive.org/details/JwPlayerFiles">https://archive.org/details/JwPlayerFiles</a>. This file is needed by the JW Player engine in order to correctly compile the <code>.tex</code> file.</p>

<p><strong>Step 3</strong>: Embed the <code>.flv</code> movie in your beamer. Here is an example <code>.tex</code> file.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="latex"><span class="line"><span class="k">\RequirePackage</span><span class="nb">{</span>flashmovie<span class="nb">}</span>
</span><span class="line"><span class="k">\documentclass</span><span class="nb">{</span>beamer<span class="nb">}</span>
</span><span class="line"><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span>
</span><span class="line"><span class="k">\begin</span><span class="nb">{</span>frame<span class="nb">}</span>
</span><span class="line"><span class="k">\frametitle</span><span class="nb">{</span>embed a movie<span class="nb">}</span>
</span><span class="line"><span class="k">\begin</span><span class="nb">{</span>center<span class="nb">}</span>
</span><span class="line"><span class="k">\flashmovie</span><span class="na">[width=0.7\textwidth,engine=jw-player,auto=0,image=POSTER.jpg,controlbar=1,loop=0]</span><span class="nb">{</span>YOUR<span class="nb">_</span>MOVIE.flv<span class="nb">}</span>
</span><span class="line"><span class="k">\end</span><span class="nb">{</span>center<span class="nb">}</span>
</span><span class="line"><span class="k">\end</span><span class="nb">{</span>frame<span class="nb">}</span>
</span><span class="line"><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here <code>YOUR_MOVIE.flv</code> is the flv movie you want to embed, and <code>POSTER.jpg</code> is the image shown before the movie is played (note that the poster image is optional).</p>

<p><strong>Step 4</strong>: Compile the <code>.tex</code> file into PDF with all the neccessary files in the same directory (i.e. <code>flashmovie.sty</code>, <code>player.swf</code>, <code>YOUR_MOVIE.flv</code>, <code>POSTER.jpg</code>). Then open the PDF file using <strong>Adobe Reader 9 or above</strong></p>

<blockquote>
  <p>Remark:<br />
1. more options of the <code>\flashmovie</code> command can be found in the <code>flashmovie.sty</code> file.<br />
2. there are more different player options for <code>engine</code> other than the JW Player. For example, you may instead set <code>engine=flv-player</code> which uses an open-source player from <a href="http://flv-player.net">http://flv-player.net</a>. For this player another <code>.swf</code> file, <a href="http://flv-player.net/medias/player_flv_maxi.swf"><code>player_flv_maxi.swf</code></a>, is needed.</p>
</blockquote>

<h2 id="part-ii-convert-movie-formats-to-flv">Part II: Convert movie formats to <code>.flv</code></h2>

<p>The software used to convert movie formats is <a href="https://ffmpeg.org/"><strong>FFmpeg</strong></a>. This is a free and open-source software.</p>

<p>Assuming you are using Mac OSX like me, here are the steps:</p>

<p><strong>1</strong>. Make sure you installed <strong>Homebrew</strong> on your Mac, for details go to <a href="http://brew.sh/">http://brew.sh/</a>.<br />
<strong>2</strong>. Install <strong>ffmpeg</strong> by running <code>brew install ffmpeg</code> in command line.<br />
<strong>3</strong>. Convert movie formats using the <code>ffmpeg</code> command.</p>

<blockquote>
  <p>An explanation of the <code>ffmpeg</code> options can be found <a href="https://www.virag.si/2012/01/web-video-encoding-tutorial-with-ffmpeg-0-9/">here</a>. (Also a helpful article if your are using Windows or Linux.)</p>
</blockquote>

<p>An example command that I used to convert an <code>.mp4</code> file to <code>.flv</code>:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ffmpeg -i input_file.mp4 -c:v libx264 -vf <span class="nv">scale</span><span class="o">=</span>-1:270 -ar <span class="m">22050</span> output_file.flv
</span></code></pre></td></tr></table></div></figure>

<p>Some explanation of the command</p>

<ul>
  <li><strong><code>-i input_file.mp4</code></strong>: specify the input file</li>
  <li><strong><code>-c:v libx264</code></strong>: set video codec to be libx264</li>
  <li><strong><code>-vf scale=-1:270</code></strong>: set resolution of output file, <code>-1</code> means to maintain aspect ratio, <code>270</code> indicates the vertical resolution is 270p. (1080p is Full HD.) If not specified, resolution remains unchanged.</li>
  <li><strong><code>-ar 22050</code></strong>: set the audio sampling frequency. If don’t want any sound, use <code>-an</code> flag instead.</li>
  <li><strong><code>output_file.flv</code></strong>: specify output file and format</li>
</ul>

<h2 id="part-iii-embed-flv-movies-in-latex-to-replace-part-i">Part III: Embed <code>.flv</code> movies in LaTeX (To replace Part I)</h2>

<p><strong>(Updated 1/19/17)</strong></p>

<p>I have used the following movie embedding option a couple times before I posted this article, but I didn’t summarize it back then and forgot about it. Now memory strikes back.</p>

<p>The <a href="https://www.ctan.org/pkg/media9?lang=en"><code>media9</code> package</a> is the best option so far for embedding movies in beamer. Here is an example <code>.tex</code> file to do it:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="latex"><span class="line"><span class="k">\documentclass</span><span class="nb">{</span>beamer<span class="nb">}</span>
</span><span class="line"><span class="k">\usepackage</span><span class="nb">{</span>media9<span class="nb">}</span>
</span><span class="line"><span class="k">\usepackage</span><span class="nb">{</span>graphicx<span class="nb">}</span>
</span><span class="line"><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span>
</span><span class="line"><span class="k">\begin</span><span class="nb">{</span>frame<span class="nb">}{</span>embed a movie<span class="nb">}</span>
</span><span class="line"><span class="k">\begin</span><span class="nb">{</span>center<span class="nb">}</span>
</span><span class="line"><span class="k">\includemedia</span>[
</span><span class="line">	width=0.4<span class="k">\linewidth</span>,height=0.3<span class="k">\linewidth</span>,
</span><span class="line">	activate=pageopen,
</span><span class="line">	addresource=YOUR<span class="nb">_</span>MOVIE.flv,
</span><span class="line">	flashvars=<span class="nb">{</span>
</span><span class="line">	   source=YOUR<span class="nb">_</span>MOVIE.flv
</span><span class="line">	<span class="nb">}</span>
</span><span class="line">]<span class="nb">{</span><span class="k">\includegraphics</span><span class="na">[height=0.3\linewidth]</span><span class="nb">{</span>POSTER.jpg<span class="nb">}{</span>VPlayer9.swf<span class="nb">}</span>
</span><span class="line"><span class="k">\end</span><span class="nb">{</span>center<span class="nb">}</span>
</span><span class="line"><span class="k">\end</span><span class="nb">{</span>frame<span class="nb">}</span>
</span><span class="line"><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>A couple remarks about this example:</p>

<p><strong>1.</strong> Compile the <code>.tex</code> file into <code>.pdf</code> with all neccesary files (<code>YOUR_MOVIE.flv</code>, <code>POSTER.jpg</code>) in the same folder<br />
<strong>2.</strong> <code>POSTER.jpg</code> is the image displayed before <code>YOUR_MOVIE.flv</code> is played, and is included using the <code>\includegraphics</code> command from the <code>graphicx</code> package. The poster image is optional, you may intead use a <code>{}</code> (before the <code>{VPlayer9.swf}</code>) to leave it blank.<br />
<strong>3.</strong> <code>VPlayer9.swf</code> is the video player. You may use a fancier player <code>StrobeMediaPlayback.swf</code> and correspondingly in the <code>flashvars</code> options change <code>source=...</code> into <code>src=...</code>. Or if you are embedding audio, use <code>APlayer9.swf</code>.<br />
<strong>4.</strong> Embedding YouTube video would be a piece of cake with this package, here is an example given in the official documentation:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="latex"><span class="line"><span class="k">\includemedia</span>[
</span><span class="line">  width=0.6<span class="k">\linewidth</span>,height=0.3375<span class="k">\linewidth</span>, <span class="c">% 16:9</span>
</span><span class="line">  activate=pageopen,
</span><span class="line">  flashvars=<span class="nb">{</span>
</span><span class="line">    modestbranding=1 <span class="c">% no YT logo in control bar</span>
</span><span class="line">    <span class="nb">&amp;</span>autohide=1 <span class="c">% controlbar autohide</span>
</span><span class="line">    <span class="nb">&amp;</span>showinfo=0 <span class="c">% no title and other info before start</span>
</span><span class="line">    <span class="nb">&amp;</span>rel=0      <span class="c">% no related videos after end</span>
</span><span class="line">  <span class="nb">}</span>
</span><span class="line">]<span class="nb">{}{</span>http://www.youtube.com/v/r382kfkqAF4?rel=0<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>5.</strong> Go to the <a href="https://www.ctan.org/pkg/media9?lang=en">CTAN</a> page to find the complete <a href="http://mirrors.ctan.org/macros/latex/contrib/media9/doc/media9.pdf">documentation</a> for <code>media9</code>.</p>

<p>Hope this is helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客更新]]></title>
    <link href="http://bobbielf2.github.io/blog/2016/11/26/bo-ke-geng-xin/"/>
    <updated>2016-11-26T15:24:57-05:00</updated>
    <id>http://bobbielf2.github.io/blog/2016/11/26/bo-ke-geng-xin</id>
    <content type="html"><![CDATA[<p>我对最开始的两编博客内容进行了更新。因为经过这段时间的学习，我的电脑水平有所增长，回头看当时写的东西不禁发现了各种不严谨和各种 bug，忍不修补了一下。</p>

<p>好了，本篇的主要内容完毕，以下完全是跑题的内容，是我对这个学期所学的一门课的吐嘈，可以随意忽略。。</p>

<!--more-->

<p>最近在忙学业。这个学期选修了一门 Scientific Computing 的课（简称 SC 课），是 <a href="http://micde.umich.edu/">MICDE</a> 开的第一门课。对于一个编程一直只用 Matlab，没有开发经验，不怎么 geek 的伪码农，我表示这门课又让我体验了一次被虐的快感。所以我决定小小吐嘈一下，就以“中途出家的码农之挣扎系列”为副标题，以后说不定这个系列还会更新。</p>

<p>吐嘈开始，首先看看这门课的大纲：</p>

<table>
  <thead>
    <tr>
      <th>Week</th>
      <th>Topic</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Introduction to Linux</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Programming Langues: C, C++, Fortran</td>
    </tr>
    <tr>
      <td> </td>
      <td>Linux Bash Scripting &amp; Introduction to Python</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Elements of Development: Configuring, Compiling, Linking</td>
    </tr>
    <tr>
      <td> </td>
      <td>Tools of the Trade: Version Control, Text Editors, Dev. Env</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Algorithms for Numerical Linear Algebra</td>
    </tr>
    <tr>
      <td> </td>
      <td>Sci. Computing Libs: BLAS, LAPACK, PETSc, Trilinos</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Software Engineering Practices &amp; Development Workflows</td>
    </tr>
    <tr>
      <td> </td>
      <td>Object-Oriented Programming, Design Patterns, UML</td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
    </tr>
    <tr>
      <td>8</td>
      <td>Serial Optimization Techniques</td>
    </tr>
    <tr>
      <td> </td>
      <td>Parallel Programming Models</td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
    </tr>
    <tr>
      <td>11</td>
      <td>Data Format Libraries: HDF5, NetCDF, SILO</td>
    </tr>
    <tr>
      <td> </td>
      <td>Mesh Libraries: Libmesh, Exodus, others</td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
    </tr>
  </tbody>
</table>

<p>可以看出主题非常广泛，包括操作系统，各种语言编程，开发过程，版本控制，文本处理，数值算法，计算机工程，并行运算，数据存贮和可视化，等等。基本上每周的 topic 都足以开一门一整个学期的课，我们的任务就是尽力掌握那一周的内容，达到基础程度的理解，并且能够在上机实验环节实行简单应用。</p>

<p>于是每个星期对于我们来说都像一场生死循环：在课堂上尽全力去理解，然后在上机实验的时候费尽九牛二虎之力完成任务，刚觉得这周的 topic 总算是入门了，又尼玛进入下一周的主题，重新开始轮回。</p>

<p>但是当你尽力从这门课里活下来了，你所看到的世界都不一样了，在科学计算的方方面面都已经有所涉足，对于这个信息时代的齿轮如何运作有了全新的深度和广度的理解。当然我还远远不是任何一方面的 expert，精确的说，现在的我对科学计算这门学问有了一个比以前更清晰的整体图像（big picture），就像下面这张图所展示的第二种（progressive）进程，对整个学科有了从低像素到高像素的改善。</p>

<p><img src="http://bobbielf2.github.io/images/blog_figures/baseline_vs_progressive.jpg" width="500" /></p>

<h3 id="section">万金油技能总结</h3>

<p>Scientific Computing 的根本目标就是通过科学方法论、高效的协作来促进科学计算的理论和技术的发展。在接触这些方法论的过程中，我觉得有一些技能是在任何地方都十分宝贵的，不局限于 SC。</p>

<ol>
  <li><strong><a href="https://en.wikipedia.org/wiki/RTFM">RTFM</a> 的能力</strong>。在任何时候，懂得读 manual 和 documentation，都让你有了解决所有问题的利器。</li>
  <li><strong>运用 feedback 的能力</strong>。无论是编程 debug，还是学习别的技能，本质都是针对薄弱环节的刻意练习（deliberate practice）。刻意练习需要不断的接受 feedback 再次练习，feedback 的来源可以是程序的 compiler，老师，同学，网上练习系统等等。有效运用 feedback 本质上也是一种理解能力（动态的 RTFM）。</li>
  <li><strong>搜索（STFW）的能力</strong>。这个能力一说起来好像很简单，搜索谁不会嘛！但其实搜索能力是有不同级别，人人都能搜索，但是有的人是专家，有的人搜一下搜不到就放弃了。搜索能力本质上是<em>把碎片信息整理成系统信息的能力</em>。“搜”只是第一步，后续的整理信息，再搜索，再整理，再搜索……就是搜索能力的差别所在。</li>
  <li><strong>从“术”到“道”的能力</strong>。换个说法，就是从技术到理论，从 how 到 why，从方法到哲学，从科学到艺术的升华能力。说到底，知识是人的知识，人有强大的逻辑思维能力，但还有感情的影响和追求目标的动力。把知识学会，只需要有思维能力理解能力；把知识推向极致，运用到造福社会的程度，则需要理论和哲学的支持，需要做一件事情的意义和审美，需要影响其他人和接受他人的帮助，这些都是经过耐心的思考、实践、积累才能得到的。</li>
</ol>

<p>回想起来，我对付 SC 课和完成一切其他任务所用到的不外乎就是这几种技能了。</p>
]]></content>
  </entry>
  
</feed>
