<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bobbie's Blog]]></title>
  <link href="http://bobbielf2.github.io/atom.xml" rel="self"/>
  <link href="http://bobbielf2.github.io/"/>
  <updated>2017-11-12T18:43:10-05:00</updated>
  <id>http://bobbielf2.github.io/</id>
  <author>
    <name><![CDATA[Bowei "Bobbie" Wu .]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using GNU Screen to Resume an SSH Session]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/09/14/using-gnu-screen-to-resume-an-ssh-session/"/>
    <updated>2017-09-14T13:30:46-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/09/14/using-gnu-screen-to-resume-an-ssh-session</id>
    <content type="html"><![CDATA[<h3 id="why-gnu-screen">Why GNU Screen?</h3>

<p><strong>Scenario</strong>: you finish working with an SSH session, you close your laptop to go for lunch or for a tea. Then you come back and open your laptop wanting to resume your job, but the connection is broken or the VPN breaks and forced you to disconnect. You have no choice but setup the connection once again and reopen the documents/apps before you can resume from where you left.</p>

<!--more-->

<p><strong>Solution</strong>: with GNU Screen, you can directly resume from where you left, without having to reopen all the documents/apps you’ve been working on.</p>

<p>The concept of GNU Screen is like turning on and off of a computer screen. You turn off a screen when you are done, let the computer to hang in there; you come back later, turn the screen back on and continue your tasks.</p>

<h3 id="steps-using-gnu-screen">Steps Using GNU Screen</h3>

<ol>
  <li><strong>Connect</strong>. Connect to a remote server and create a Screen session via <code>ssh -t &lt;server.domain.name&gt; screen -R</code></li>
  <li><strong>Detach</strong>. When done with the SSH session, use <code>ctrl-a d</code> to detach from the session. This also disconnect with the SSH server.</li>
  <li><strong>Reconnect</strong>. The SSH session is still running actually. When you are ready to resume working with the session, use <code>ssh -t &lt;server.domain.name&gt; screen -R</code> again to reconnect, then you are right where you left it.</li>
  <li><strong>Terminate</strong>. To permanently terminate a Screen session, just disconnect from the server the usual way (<code>ctrl-d</code>).</li>
</ol>

<p><strong>Limitation</strong>: If you are using apps with graphical interface, not just the command line environment, then <code>screen</code> is not suitable for resuming such jobs, and <a href="https://en.wikipedia.org/wiki/Virtual_Network_Computing">VNC</a> instead would be the ideal choice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Access to Linux-based Computing Resources With Graphical Interface (for UM Students)]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/09/07/remote-access-to-linux-based-computing-resources-with-graphical-interface-for-um-students/"/>
    <updated>2017-09-07T15:25:54-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/09/07/remote-access-to-linux-based-computing-resources-with-graphical-interface-for-um-students</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Note: this note is about University of Michigan computing resources.</p>
</blockquote>

<p>People working on numerical analysis often need to develop efficient code by doing multi-language programming, e.g. MATLAB/C++ or MATLAB/Fortran. Linux operating system is needed to have the best programming experience. (Mac OS has all sorts of compatibility issues.) For UM people who are using a Mac, I have explore the following four options for remotely accessing Linux-based computing resources.</p>

<!--more-->

<h3 id="use-the-its-statistics-and-computation-service-scs">1. Use the ITS Statistics and Computation Service (SCS)</h3>

<p>The <a href="http://www.itcs.umich.edu/scs/">ITS SCS</a> provides the easiest way to certain computational resources, no extra permissions/purchases needed. But the software may not be up-to-date, e.g. MATLAB version on this server is relatively old (MATLAB R2012b).</p>

<p>Steps:</p>

<ol>
  <li>Install <a href="https://www.xquartz.org/">XQuartz</a> on your Mac (See <a href="http://www.itcs.umich.edu/scs/x11.php">info</a>)</li>
  <li>Connect to server by typing <code>ssh -Y uniqname@scs.dsc.umich.edu</code> in terminal.</li>
  <li>Upon successful connection, type <code>matlab</code> to run the program. XQuartz graphics will be invoked.</li>
</ol>

<h3 id="ask-lsa-it-for-help">2. Ask LSA-IT for help</h3>

<p>For math people, we can contact the East Hall Technical Service (EHTS) for help. They offer newer software. (The EHTS is one of the four regional support desks of the <a href="https://lsa.umich.edu/lsait">LSA-IT</a>).</p>

<p>Steps:</p>

<ol>
  <li>Install <a href="https://www.xquartz.org/">XQuartz</a> on your Mac.</li>
  <li>Ask EHTS techicians (Room 1069EH) to grant you access to a Linux machine.</li>
  <li>Download the <a href="https://wiki.x2go.org/doku.php/download:start">X2Go Client</a>.</li>
  <li>Configure X2Go Client to connect to the <code>vulpix.math.lsa.umich.edu</code> server.</li>
</ol>

<h3 id="use-the-caen-computers">3. Use the CAEN computers</h3>

<p>The UM Computer-Aided Engineering Network (CAEN) provides the smoothest experience for general users as well as power users. The CAEN computer operates the newest Linux and Windows systems, with newest and most complete software libraries for all sorts of computational work. <strong>But these are only conveniently available to engineering students.</strong></p>

<p>Availability:</p>

<ul>
  <li>If you are an engineering student, or are currently taking engineering classes, then you can <a href="https://caen.engin.umich.edu/accounts/">access CAEN computing resources anywhere</a>, on-site or remotely.</li>
  <li>All other non-engineering students have NO remote access to CAEN computers, and can only go to north campus to use the CAEN computers in the Duderstadt Center.</li>
</ul>

<p>Steps:</p>

<ol>
  <li>See CAEN <a href="https://caen.engin.umich.edu/connect/linux-login-service/">Linux Login Service</a></li>
</ol>

<h3 id="use-the-flux-hpc-cluster">4. Use the Flux HPC Cluster</h3>

<p>This option builds connections using <a href="https://en.wikipedia.org/wiki/Virtual_Network_Computing">VNC</a> (instead of XQuartz) is faster and more stable, can disconnect and <strong>resume</strong> right where you left at any time.</p>

<p>Info about Flux:</p>

<ul>
  <li>The <a href="http://arc-ts.umich.edu/">ARC-TS</a>’s Flux HPC Cluster provides high performance computing service and has its own professional technical help.</li>
  <li>LSA people can use the <a href="http://arc-ts.umich.edu/document/lsas-public-flux-allocation/">public LSA allocations</a> on Flux. These allocations are free, but take longer for jobs to start.</li>
  <li>If you or your advisor has purchased <a href="http://arc-ts.umich.edu/flux/managing-a-flux-project/">private allocation</a> on Flux, then there is much <a href="http://arc-ts.umich.edu/document/lsas-public-flux-allocation/">less wait or limitations</a>.</li>
</ul>

<p>Steps:</p>

<ol>
  <li><a href="http://arc-ts.umich.edu/flux-user-guide/">Obtain access to Flux</a></li>
  <li>Follow instructions <a href="http://arc-ts.umich.edu/flux/vnc/">here</a> to configure a VNC server, and use a VNC client to connect.</li>
  <li>Follow instructions <a href="http://arc-ts.umich.edu/flux-user-guide/#document-14">here</a> to load and use softwares on Flux.</li>
</ol>

<h3 id="summary">Summary</h3>

<ul>
  <li>If eligible for a CAEN account, always use CAEN</li>
  <li>For general use and easy access, ask LSA-IT for help</li>
  <li>For serious programming, use Flux HPC Cluster</li>
  <li>For not-so-serious purpose, use the ITS SCS</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每天都看见，却视而不见的东西]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/08/12/mei-tian-du-kan-jian-,que-shi-er-bu-jian-de-dong-xi/"/>
    <updated>2017-08-12T17:10:51-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/08/12/mei-tian-du-kan-jian-,que-shi-er-bu-jian-de-dong-xi</id>
    <content type="html"><![CDATA[<p>今天无聊去搜了一下这个世界上有多少美元在流通，网上的信息来源一般说有超过一兆美金（1 后面 12 个零）。于是又不禁想到，既然最大是这个数，那最小的美元单位是多少呢？</p>

<!--more-->

<p>之所以想到美元的问题，是因为今天玩编程的时候研究了一下 64 位的整数 Int64，看最大能表示多少位数字。Int64 是一种专门用来表示整数的数据类型，用到 64 位的 0 和 1 二进制数。因为有一位要表示正负号，剩下 63 位可以表示最大的数是 $2^{63}-1 \approx 9.22
\times10^{18}$，是一个 19 位的数字。</p>

<p>有趣的是维基百科里面有<a href="https://en.wikipedia.org/wiki/9,223,372,036,854,775,807">这个数字的页面</a>，其中有一栏提到了这么一则新闻，说 PayPal 在 2013 年的时候曾经系统出错了一次，给一位客户的账户打了 “$92 quadrillion（9.2 万兆美金）” 。这是一个 17 位数，加上小数点后 2 位，一共刚刚好 19 位，就是最大的 Int64 整数 —— 所以 PayPal 是以 Int64 数据型来记账的，这是一次数据溢出的操作。</p>

<p>我们看到用 Int64 来记账的话，如果小数点后留两位，整数位大约可以记到 9.2 万兆美元的级别，这比起现在全世界流通的 1 兆多的美元高了五个数量级，还是绰绰有余的。</p>

<p>进一步，这个故事告诉我们 PayPal 上的金额最小单位是 1 美分。所以美分就是最小的美元单位了吗？于是跑到<a href="https://en.wikipedia.org/wiki/United_States_dollar">美元的维基页面</a>瞧了一下，发现并不是 1 美分。现行最小的美元单位是 1 mill （千分之一美金），小数点后三位。这并没有让我吃惊，我真正吃惊的是，里面有一段这样的说明：</p>

<blockquote><p>... “mill” is largely unknown to the general public, though mills are sometimes used in matters of tax levies, and gasoline prices are usually in the form of \$X.XX9 per gallon, e.g., \$3.599, more commonly written as \$3.59 ⁹⁄₁₀.</p><footer><strong>Wikipedia</strong> <cite><a href="https://en.wikipedia.org/wiki/United_States_dollar">United States Dollar</a></cite></footer></blockquote>

<p>读到这里，我不禁惊叹：这个东西我每天都见到，只不过我又理所当然地把它忽略了。</p>

<p>这段话在说什么呢？说的是我们平时去加油站时看到的价格板，上面的价格都是精确到小数点后三位的，像是这样：</p>

<p><img src="http://bobbielf2.github.io/images/blog_figures/youjia.png" width="400" /></p>

<p>有些天天见的东西，我们也都以为自己知道那是什么意思，直到疑问被提出来。几千年前，苏格拉底式的提问让当时的人开始审视自己的知识，发现自己以往认识的界限。今天我自己经历了一番这样的感受。</p>

<p>–</p>

<h3 id="section">后记：</h3>

<p>1) 如果保留数点后三位而不是两位，那 Int64 还是能表示到千兆美元的级别的，没有太大影响。而且既然 PayPal 只保留两位小数，我有理由相信金融行业实际操作都是用同样的数据贮存方式的。这样保持了业界金融软件的一致性，可以节省成本。而需要用到 mill 这个单位的少数行业，只需要额外记录一位数字就好了。</p>

<p>2) 视而不见（英文可以说 to look without seeing it 吗？）让我想起了那首 50 多年前的经典的歌曲：</p>

<blockquote><p>People talking without speaking  <br />People hearing without listening  <br />People writing songs that voices never share  <br />And no one dared  <br />Disturb the sound of silence.</p><footer><strong>Simon &amp; Garfunkel</strong> <cite>The Sound of Silence</cite></footer></blockquote>

<p>其实这首歌在美国已俨然成为一个恶搞文化的符号了。当一个人在某个情境之下想起不堪回首的过去，陷入沉思与回忆，背景音乐就会响起：“Hello darkness my old friend …” 。网上有大量恶搞视频，都挺搞笑的。</p>

<p>3) 写这篇文章的时候，需要把英文计数单位翻译成中文。比如 billion 翻成十亿，trillion 翻成一兆。在这个过程中，我发现“不可思议”竟然也是一个单位，一个不可思议等于 1 后面加 64 个零。这个单位的起源是一个佛教用语，形容神通很大的意思。真是够不可思议的！</p>

<p><img src="http://bobbielf2.github.io/images/blog_figures/bukesiyi.png" width="400" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[色情和艺术是近义词吗？]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/08/12/se-qing-he-yi-zhu-shi-jin-yi-ci-ma-%3F/"/>
    <updated>2017-08-12T15:32:46-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/08/12/se-qing-he-yi-zhu-shi-jin-yi-ci-ma-?</id>
    <content type="html"><![CDATA[<p>色情和艺术是不是一线之隔的近义词？热情和沮丧是不是两种相反的情绪？我最近对这一类问题有一些思考，想把它们整理出来。</p>

<!--more-->

<h3 id="section">1. 结果上的反义词，原因上的同义词</h3>

<p>我发觉世上很多反义词其实都是近义词</p>

<p>比如成功和失败是一对经典的反义词。</p>

<p>你去参加一个比赛，比如围棋或者马拉松，你就有可能赢或者输，这取决于你的能力。而有一些事情，比如创业或投资，这种不确定性很大的领域，能力可能也不是决定的因素，有时就是运气不眷顾你，无可避免地会遭遇一些失败。就算你是乔丹，也有投篮不中和输球的时候；就算你是柯洁，也有输给 AI 无力还手的时候；就算你是巴菲特，也有投资项目赔钱的时候。</p>

<p>但是无论成败于否，这其实都是勇于尝试的结果，都表明你曾经勇敢进取过。它的反面应该是无为或者平庸，没有争取过，就无所谓成功失败了。在这个意义上，成功和失败是近义词，平庸才是它们的共同反义词。</p>

<p>这就是为什么有人能够看得开，勇敢地面对失败。他们知道失败无可避免，所以他们的注意力都放在自己能掌控的东西上，继续拼搏不断获得成长。</p>

<p>–</p>

<p>再比如热情和沮丧、热切和厌烦，看起来都是相反的情绪。你喜欢的东西带给你热情，你憎恨的东西让你沮丧。</p>

<p>但其实无论热情还是沮丧，都源于执着，是同样的执着面对不同结果时的自然产物。</p>

<p>你对一份事业抱有热情是因为事业的成功能给你快感，即便是想像中的成功；你对一份事业感到厌烦则是因为事业上的失败让你痛苦，即便失败还没到来而只是你的预期。这两者都是在意与执着的表现，只不过有人最终得到了，有人没有得到。<strong>热情还是沮丧，都只是你踏上了执着这条路之后必将到达的一个分岔路口。</strong>往哪一边走？你可能都无法控制。在这种意义上，热情和沮丧、热切和厌烦都是近义词，它们共同的反义词其实是无为和冷淡——不踏上这条路，就不用到达分岔口。</p>

<p>因此有经验的投资人在审核一个项目时，看重的不是创业者有没有热情，而是他们有没有能力。没有能力的人，热情终将沦为沮丧，热情越高，沮丧越大。</p>

<h3 id="section-1">2. 表像上的近义词，本质上的反义词</h3>

<p>与此同时，很多近义词其实都是反义词</p>

<p>比如艺术和色情，像是近义词。人们会说，艺术与色情就只有一线之隔</p>

<p>你去艺术博物馆，看到各种祼体的画像和雕像。有的人觉得这是色情被美化和合理化之后的公然展示，是人对自己的欲望找一个发泄的借口；有的人却能用细腻的语言描述一件作品想表达和传递的信息，知道作者有什么样的经历激发了这种灵感，以及这种表达的有什么与众不同之处和对后来的人产生了怎样的影响。</p>

<p>同样的作品，是什么样的“一线之隔”让不同的人有天差地别的解读？这要回归到艺术和色情两者的起源。</p>

<p>艺术源于生活的细心观察和思考，它建立在好奇心之上，用最纯粹的眼光去看这个世界，然后再运用创意和技巧把感受和想法表达出来成为一件作品。这是极致的感性和理性共同作用下产生的作品。色情则既非感性也非理性，而是源于最原始的冲动， 是直觉，是本能的反射，是动物的本性。<strong>看似相近的艺术和色情，其实是人性与动物性这两种相反的原动力所生产出来的结果。</strong></p>

<p>所以我们可以看到大众里不断有人站出来，指责艺术家龌龊和势利，博得一片叫好。同时又不断有艺术家屡屡发明新的表达形式，挑战世俗的眼光，引发人们重新思考，甚至不惜为此付出代价。被当代人指责和不被理解，几乎是艺术家的宿命。</p>

<h3 id="section-2">3. 你的想法？</h3>

<p>按照这些思路，很多东西都可以重新思考：理想和妄想，信息和知识，机器和生物，科学和迷信，爱国和排外。 这些到底是近义词还是反义词呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dancing With Julia]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/06/07/dancing-with-julia/"/>
    <updated>2017-06-07T16:39:19-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/06/07/dancing-with-julia</id>
    <content type="html"><![CDATA[<p>I have been having fun with <a href="https://julialang.org/">the Julia language</a> lately. It is a new programming language for scientific computing. You may wonder, why do we need a new language at all? Don’t we already have MATLAB, Mathematica, Python with NumPy and SciPy, etc., are’t those enough?</p>

<p>Well, it is true that those are awesome softwares for scientific computing, they have all the necessary functionalities and powerful libraries, and they are easy to learn. But there is a common (fatal) issue that prevents them from creating industrial quality codes – speed. We want faster speed! The Julia language is developed specifically for this.</p>

<!--more-->

<h2 id="the-julia-language">1. The Julia Language</h2>

<p>What is the Julia language? According to its <a href="https://julialang.org/">official page</a></p>

<blockquote>
  <p>Julia a high-level, high-performance dynamic programming language for numerical computing.</p>
</blockquote>

<p>There are two keywords here: <strong>high-performance</strong> and <strong>dynamic programming</strong>. These two words don’t usually come together! If you have written some program for numerical computations, you probably have noticed:</p>

<ul>
  <li><strong>Dynamic programming</strong> languages like Python and MATLAB are very handy and human-friendly. Each such language has a <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a> that allows you to see the effects of your code immediately, so the workflow is interactive. You can easily explore ideas, quickly prototype a new software. The syntax is simple which allows for fast development.</li>
  <li>However, when you finally decide to write some software for practical use, all these dynamic programming languages suffer from slow running speeds. Then you have to switch to a <strong>high-performance</strong> programming language like C/C++ and Fortran. These languages are static, use a classic edit-compile-run-debug (ECRD) cycle in contrast to REPL. It takes a lot of time to write the code and debug.</li>
</ul>

<p>This is called the <strong>Two-language problem</strong>: efficiency for human or efiiciency for the machine, pick one. There have been efforts trying to resolve this problem, for example, by linking the C libraries in a Python code, but such usage of multi-language programming quickly makes the code really complex and hard to maintain.</p>

<h3 id="solving-the-two-language-problem">1.1 Solving the two-language problem</h3>

<p>This is exactly where Julia kicks in.</p>

<p>Julia is a dynamic programming language as MATLAB or Python, making it easy to use. But Julia also runs <a href="https://julialang.org/benchmarks/">very fast</a>, comparable to the performance of C codes. How could a dynamic language run fast? It does so by using the <a href="https://en.wikipedia.org/wiki/LLVM">LLVM</a>-based <a href="https://en.wikipedia.org/wiki/Just-in-time_compilation">just-in-time</a> (JIT) compiler. In fact Julia is designed for JIT from the very beginning!</p>

<h3 id="want-to-try-julia">1.2 Want to try Julia?</h3>

<p>If you would like to try out the Julia language, I recommend this quick hands-on approach: firstly, you learn the basics by going through some short tutorial found <a href="https://julialang.org/learning/#tutorials">here</a>; after having some familiarity with the syntax, you start some programming with your field of study with the help of some <a href="http://pkg.julialang.org/">existing packages</a>. For example, I work on numerical analysis and spectral methods, so I started with the <a href="https://github.com/JuliaApproximation/ApproxFun.jl">ApproxFun</a> package under the <a href="https://github.com/JuliaApproximation">JuliaApproximation</a> project; or if you have done some statistics programming with languages like R, there is a collection of statistics packages under the <a href="https://github.com/JuliaStats">Julia Statistics</a> project; or if you are an algebraist, you may have done some symbolic programming with languages like REDUCE, there is also a <a href="https://github.com/chakravala/Reduce.jl">Reduce</a> package for you. Check the <a href="http://pkg.julialang.org/">list of available packages</a>, no matter what you work on, you are likely to find something that suits your need.</p>

<p>Next, I am going to talk about an experience I had when coding Julia. It will be an example with very technical details, so you may stop reading at this point if all you want is just some general information about Julia.</p>

<h2 id="testing-my-code-why-cant-i-redefine-my-test-functions">2. Testing my code: why can’t I redefine my test functions?</h2>

<p>(<strong>Note:</strong> the issue mentioned in this note pertains to julia version <code>v0.5</code>, there will be a change/fix of the behavior in <code>v0.6</code>; see the P.S. in the end.)</p>

<h3 id="redefine-test-functions-that-will-be-called-by-a-high-order-function-the-failure">2.1 Redefine test functions that will be called by a high-order function: the failure</h3>

<p>In scientific computing, we often need to test a function by feeding it different parameters to see if the behaviors are as expected.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> myFun1</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class="line">           <span class="k">return</span> <span class="n">value</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">v</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">myFun1</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>    <span class="c">#test case 1</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">v</span> <span class="o">=</span> <span class="nb">pi</span><span class="p">;</span> <span class="n">myFun1</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>    <span class="c">#test case 2</span>
</span><span class="line"><span class="mf">4.141592653589793</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">v</span> <span class="o">=</span> <span class="o">-</span><span class="n">e</span><span class="p">;</span> <span class="n">myFun1</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>    <span class="c">#test case 3</span>
</span><span class="line"><span class="o">-</span><span class="mf">1.718281828459045</span>
</span></code></pre></td></tr></table></div></figure>

<p>This is completely fine with a simple function. But if you are debugging a <strong>high-order function</strong>, i.e. a function whose input (or output) is also a function:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line">           <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>    <span class="c">#test case 1</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>    <span class="c">#test case 2</span>
</span><span class="line"><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f</span><span class="p">(</span><span class="kt">Any</span><span class="p">)</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span><span class="mi">1</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="mf">1.</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>    <span class="c">#test case 3</span>
</span><span class="line"><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f</span><span class="p">(</span><span class="kt">Any</span><span class="p">)</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="mi">1</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span><span class="mf">1.</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">println</span><span class="p">([</span><span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)])</span>
</span><span class="line"><span class="p">[</span><span class="mf">7.38906</span><span class="p">,</span><span class="mf">2.0</span><span class="p">]</span> <span class="c">#both should have returned the same value f(2)!</span>
</span></code></pre></td></tr></table></div></figure>

<p>We see that redefining a function is okay if you just want to evaluate it, but redefining for the testing of another high-order function won’t work. Unless you also <strong>redefine that high-order function to update the dependence</strong>:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line">           <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line"><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">myFun2</span><span class="p">(</span><span class="kt">Any</span><span class="p">)</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span><span class="mi">2</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">11</span><span class="p">]:</span><span class="mf">2.</span>
</span><span class="line"><span class="n">myFun2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line"><span class="mf">7.38905609893065</span>
</span></code></pre></td></tr></table></div></figure>

<p>But redefining every high-order function is cumbersome, and even impractical if there is a chain of dependencies among multiple high-order functions.</p>

<h3 id="the-logic-behind-such-failure-how-the-jit-compiler-works">2.2 The logic behind such failure: how the JIT compiler works</h3>

<p>This issue received a long discussion (started a couple years ago and is still going on) on GitHub <a href="https://github.com/JuliaLang/julia/issues/265">issue #265</a>. This goes back to the fundamental question of how Julia’s JIT compiler works (under the hood) in real time.</p>

<ul>
  <li>The JIT compiler would compile a custom function (high-order or not) when it is executed for the first time. So you see behavior like this</li>
</ul>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> f1</span><span class="p">()</span>
</span><span class="line">           <span class="mi">2</span><span class="p">;</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line"><span class="n">f1</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> f2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line">           <span class="n">f</span><span class="p">()</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line"><span class="n">f2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> f1</span><span class="p">()</span>
</span><span class="line">           <span class="mi">3</span><span class="p">;</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line"><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f1</span><span class="p">()</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span><span class="mi">2</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="mf">2.</span>
</span><span class="line"><span class="n">f1</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f2</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span>
</span><span class="line"><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>
    <p>Because <code>f2</code> is compiled when <code>f2(f1)</code> is called; before the call, <code>f1</code> is most recently defined to return <code>3</code>, so <code>f2(f1)</code> returns <code>3</code>; the first definition of <code>f1</code> that returned <code>2</code> was overwritten.</p>
  </li>
  <li>
    <p>After the <code>f2(f1)</code> call, no matter how you overwrite the definition of <code>f1</code>, <code>f2(f1)</code> will always return <code>3</code> since that’s how it was when compiled at its first call.</p>
  </li>
</ul>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> f1</span><span class="p">()</span>
</span><span class="line">           <span class="mi">2</span><span class="p">;</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line"><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f1</span><span class="p">()</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="mi">2</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span><span class="mf">2.</span>
</span><span class="line"><span class="n">f1</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f2</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span>
</span><span class="line"><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>Unless you also redefine <code>f2</code>, then <code>f2</code> becomes an uncompiled function again. The next time <code>f2</code> is called, it will be compiled again and updates its behavior.</li>
</ul>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> f2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line">           <span class="n">f</span><span class="p">()</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line"><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f2</span><span class="p">(</span><span class="kt">Any</span><span class="p">)</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span><span class="mi">2</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">7</span><span class="p">]:</span><span class="mf">2.</span>
</span><span class="line"><span class="n">f2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f2</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span>
</span><span class="line"><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>This experiment shows that the compilation is down to the lowest-order function, so if a high-order function is called, the JIT will compile all the functions it calls, until it hits a simple function. (Compilation can also occur when you feed a custom function with variables of different types. This is the subject of <strong>multiple dispatch</strong>, another great advantage of Julia).</li>
</ul>

<h3 id="solution-using-anonymous-functions">2.3 Solution: using anonymous functions</h3>

<p>I have found a solution in <a href="https://github.com/JuliaPlots/Plots.jl/issues/508#issuecomment-250200614">a comment of issue #508</a>, which is to use the lambda function notation <code>-&gt;</code> in Julia to define an anonymous function, and assign the anonymous function to a variable <code>f</code>. Then feed this variable into the high-order function you want to test.</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line">           <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line"><span class="n">myFun2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line"><span class="mi">4</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line"><span class="mf">7.38905609893065</span>
</span></code></pre></td></tr></table></div></figure>

<p>All works well now! This is because the variable <code>f</code> is now pointing to an anonymous function. If it is later redefined to point to a different function, this pointer value is updated because every anonymous function receives a unique label. So there are no more confusions!</p>

<h3 id="ps-issue-fixed-in-v06">P.S. Issue fixed in <code>v0.6</code></h3>

<p>I have downloaded the pre-released version <code>julia v0.6.0-rc2</code> to check if the issue is well handled. Apparently, the issue is well fixed in this new version:</p>

<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="julia"><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="k">function</span><span class="nf"> myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line">           <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">       <span class="k">end</span>
</span><span class="line"><span class="n">myFun2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line"><span class="mi">2</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line"><span class="mi">4</span>
</span><span class="line">
</span><span class="line"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class="line"><span class="mf">7.38905609893065</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Holy Trinity]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/05/19/the-holy-trinity/"/>
    <updated>2017-05-19T22:03:22-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/05/19/the-holy-trinity</id>
    <content type="html"><![CDATA[<p>This isn’t about theology, but I will talk about the number three.</p>

<p>We love the number three. Many of our rules/doctrines consist of three parts. For example, in Christianity, there is the theory of the Holy Trinity, stating that God manifests Himself in three forms: the Father, the Son, and the Holy Spirit. I’d love to cast them into a shamrock diagram:</p>

<p><img class="center" src="http://bobbielf2.github.io/images/blog_figures/shamrock_holy.png" width="300" /></p>

<p>The key idea here is that, although there are three forms, there is really only one God.</p>

<!--more-->

<p>While I am not a Theologist, I appreciate the idea that an important concept is broken into three aspects, each of them stems from the same root, and connects with each other to promote deeper understanding of the subject. Let’s call them the “shamrock ideas”.</p>

<p>I happened to have encountered some of the interesting and beautiful shamrock ideas in the realm of science and mathematics. These ideas have given me incredible insights into subjects, helping me see the big pictures of a lot of seemingly scattered knowledge.</p>

<h2 id="science">Science</h2>

<p>Perhaps the most well-known example of a shamrock idea is the three components of science.</p>

<blockquote>
  <p>There are three great branches of modern science: theory, experiment, and computation.</p>
</blockquote>

<p><img class="center" src="http://bobbielf2.github.io/images/blog_figures/shamrock_science.png" width="300" /></p>

<p>The keyword in this shamrock is <em>computation</em>, it reminds us how computation has influenced science, and has evolved from a mere tool into a full-fledged scientific branch.</p>

<p>In the early days of science, machines were invented to help scientists with their calculations. Searching the internet you will find calculators like Arithmometer (1850s-1910s) and Comptometer (1880s-1970s). Those machines can add, subtract, multiply and divide numbers. They were once very useful to scientists, and are now all gone to museums. In the mid-1900s, electronic computers started to take over, and computing power skyrocketed in the past 60 years. Computer performance evolved from hectoscale computing (~200 operations per second) with the first IBM computer in 1946, to petascale computing in 2009 with modern supercomputers, which is thousands of trillions of operations per second.</p>

<p>Such leap in computing power has unleashed ideas that were sheer impossible just decades ago.</p>

<p>With experiment, science have gone a long way tracing back to the ancient Greeks. With computation, science has taken off and is moving ever faster. We can simulate thins that are too far (universe), too small (quantum), too expensive (medicine), or too complex (social network).</p>

<h2 id="mathematics">Mathematics</h2>

<p>I would like to mention more shamrock ideas I found reading math.</p>

<h3 id="functions-boyd">Functions <sup id="fnref:boyd"><a href="#fn:boyd" class="footnote">1</a></sup></h3>

<p>The function shamrock has three leaves respectively labeled formula, spectral coefficients, and grid point values. Together, these three concepts help us better understand and use functions. To see how these three concepts connect to each other, we realize that we go from the symbolic $f(x)$ to values ${f_j}$ by sampling, from $f(x)$ to spectral coefficients ${a_j}$ by integral transforms (e.g. Fourier transform), and from ${f_j}$ to ${a_j}$ by discrete algorithms (e.g. FFT).</p>

<p><img class="center" src="http://bobbielf2.github.io/images/blog_figures/shamrock_function.png" width="300" /></p>

<p>When solving a problem that involves a function $f(x)$, the symbolic formula is manipulated with analytical methods, its spectral coefficients are useful for Galerkin methods, and the grid point values are what the convenient pseudospectral methods operate on.</p>

<p>A mathematician would be crippled if failing to understand and to freely switch between any of them.</p>

<h3 id="analysis-trefethen">Analysis <sup id="fnref:trefethen"><a href="#fn:trefethen" class="footnote">2</a></sup></h3>

<p>This probably is my favorite shamrock. In analysis, the three types of series, Fourier, Laurent, and Chebyshev, are really the same series looking from different angles.</p>

<p><img class="center" src="http://bobbielf2.github.io/images/blog_figures/shamrock_analysis.png" width="300" /></p>

<p>Let’s consider the substitutions</p>

<script type="math/tex; mode=display">x = \frac{z+z^{-1}}{2} = \cos\theta</script>

<p>they give the equivalent relations</p>

<script type="math/tex; mode=display">T_n(x) = \frac{z^n+z^{-n}}{2} = \cos(n\theta)</script>

<p>where $T_n(x)$ is the Chebyshev polynomial of order $n$. Given a smooth function $f(x)$ on $x\in[-1,1]$, it can be expanded as a Chebyshev series</p>

<script type="math/tex; mode=display">f(x) = \sum^\infty_{n=0}a_nT_n(x)</script>

<p>which under the equivalent relations gives</p>

<script type="math/tex; mode=display">\sum^\infty_{n=0}a_nT_n(x) = \sum^\infty_{n=0} a_n \frac{z^n+z^{-n}}{2} = \sum^\infty_{n=0} a_n \cos(n\theta)</script>

<p>or</p>

<script type="math/tex; mode=display">\sum^\infty_{n=0}a_nT_n(x) = \frac{a_0}{2}+\frac{1}{2}\sum^\infty_{n=-\infty} a_{|n|} z^n = \frac{a_0}{2}+\frac{1}{2}\sum^\infty_{n=-\infty} a_{|n|} e^{in\theta}</script>

<p>The last equalities show the amazing relationships between the three branches of analysis, providing a picture about how viewing from different angles gives you different series expansions:</p>

<ul>
  <li>If you look at the unit circle in the complex plane (or a periodic interval) $\theta\in[0,2\pi]$, you see Fourier series, the fundamental tool for real analysis</li>
  <li>If you look at the annulus <span>$\frac{1}{\rho} &lt; |z| &lt; \rho$</span>, you see Laurent series, the fundamental tool for complex analysis</li>
  <li>If you look at the interval $x\in[-1,1]$, you see Chebyshev series, the fundamental tool for numerical analysis</li>
</ul>

<p>Such connections are always there, but you need to discover them. Even many math majors know little about the shamrock, and most of them have taken all three courses.</p>

<h2 id="a-final-note">A final note</h2>

<p>I love the shamrocks not because they teach me new concepts; in fact they don’t. I have understood the concepts in the three leaves of each shamrock before I saw them put together. The important thing of these shamrocks is that they provide a unified view, a new prospective that connects and sees things you knew differently. Like Kalid Azad (author of <a href="https://betterexplained.com">BetterExplained</a>) once <a href="https://betterexplained.com/articles/learn-math-like-mega-man/">mentioned in a post</a>, our understandings improve the most not when we’ve learned new concepts, but when mindset shifts happen.</p>

<h3 id="references">References:</h3>

<div class="footnotes">
  <ol>
    <li id="fn:boyd">
      <p>John P Boyd, <em>Chebyshev and Fourier Spectral Methods</em>, Section 9.3 <a href="#fnref:boyd" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:trefethen">
      <p>Nick Trefethen, <em>Approximation Theory and Approximation Practice</em>, Chapter 3 <a href="#fnref:trefethen" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preserve the Table of Contents When Converting a Book From Djvu to PDF]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/04/11/preserve-the-table-of-contents-when-converting-a-book-from-djvu-to-pdf/"/>
    <updated>2017-04-11T20:47:57-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/04/11/preserve-the-table-of-contents-when-converting-a-book-from-djvu-to-pdf</id>
    <content type="html"><![CDATA[<p>There are many readily available softwares (e.g. <a href="https://itunes.apple.com/us/app/djvu2pdf/id629039447?mt=12">DjVu2PDF</a>) for converting a book from <code>.djvu</code> to <code>.pdf</code> format, but none of those will preserve the table of contents in the output PDF.</p>

<!--more-->

<p>Having a table of contents is very handy. For example when viewing a book in Preview, the table of contents works like a multi-level bookmark, you can simply click on any link in the sidebar to jump to any chapter/section of the book.</p>

<p><img src="http://bobbielf2.github.io/images/blog_figures/toc_in_preview.png" width="600" /></p>

<p>So I Googled and found <a href="https://superuser.com/a/915399">this quetion</a> on StackExchange that asked exactly my question. Here is a summary of the accepted answer on how you can preserve (or more precisely, create) the table of contents in a PDF converted from Djvu.</p>

<h2 id="preliminary">1. Preliminary</h2>

<p>You will need to install <a href="https://www.pdflabs.com/tools/pdftk-server/">pdftk</a> (part of PDFtk Server) and <a href="https://sourceforge.net/projects/djvu/">djvused</a> (part of DjVuLibre)</p>

<p><strong>Note 1:</strong> pdftk for Mac OS X 10.11 and above. I found in <a href="http://stackoverflow.com/a/33248310/4608899">this answer</a> on Stack Overflow that the developer of PDFtk provides an installer for PDFtk Server on OS X 10.11 and above. It is kind of strange that the <a href="https://www.pdflabs.com/tools/pdftk-server/">official website</a> only provides the installer for OS X up to 10.8. (This older version can be installed, but won’t run. When you type pdftk commands in the Terminal, it will make you wait forever.)</p>

<p><strong>Note 2:</strong> About djvused command line setup on OS X. After installing DjVuLibre, in order to use djvused in command line, you need to run</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">eval</span> <span class="s1">&#39;/Applications/DjView.app/Contents/setpath.sh&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>If this doesn’t add the correct path, you can also manually add the following line into <code>~/.bash_profile</code></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line">PATH<span class="p">=</span><span class="s2">&quot;/Applications/DjView.app/Contents/bin:${PATH}&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<h2 id="convert-the-table-of-contents">2. Convert the Table of Contents</h2>

<p>(Note: all materials in this section follow closely the <a href="https://superuser.com/a/915399">original answer</a> on StackExchange, except I coded a very simple python program in Step 2.)</p>

<p>Suppose now you have converted <code>book.djvu</code> into <code>book.pdf</code>, the former has a table of contents but the latter doesn’t.</p>

<h3 id="step-1-extract-djvu-outline">Step 1. extract Djvu outline</h3>

<p>Use the following command to extract the table of contents from <code>book.djvu</code></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">djvused <span class="s2">&quot;book.djvu&quot;</span> -e <span class="s1">&#39;print-outline&#39;</span> &gt; bmarks.out
</span></code></pre></td></tr></table></div></figure>

<p>The output file <code>bmarks.out</code> lists the table of contents in a serialized tree format using <a href="https://en.wikipedia.org/wiki/S-expression">SEXPR</a>, which can be summarized as:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">file ::<span class="o">=</span> <span class="o">(</span>bookmarks
</span><span class="line">           &lt;bookmark&gt;*<span class="o">)</span>
</span><span class="line">bookmark ::<span class="o">=</span> <span class="o">(</span>name
</span><span class="line">               page
</span><span class="line">               &lt;bookmark&gt;*<span class="o">)</span>
</span><span class="line">name ::<span class="o">=</span> <span class="s2">&quot;&lt;character&gt;*&quot;</span>
</span><span class="line">page ::<span class="o">=</span> <span class="s2">&quot;#&lt;digit&gt;+&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Notice that under this format, you can append a “child bookmark” inside a “parent bookmark”. For example, a <code>bmarks.out</code> may look like this</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="o">(</span>bookmarks
</span><span class="line">  <span class="o">(</span><span class="s2">&quot;bmark1&quot;</span>
</span><span class="line">    <span class="s2">&quot;#1&quot;</span><span class="o">)</span>
</span><span class="line">  <span class="o">(</span><span class="s2">&quot;bmark2&quot;</span>
</span><span class="line">    <span class="s2">&quot;#5&quot;</span>
</span><span class="line">    <span class="o">(</span><span class="s2">&quot;bmark2subbmark1&quot;</span>
</span><span class="line">      <span class="s2">&quot;#6&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="o">(</span><span class="s2">&quot;bmark2subbmark2&quot;</span>
</span><span class="line">      <span class="s2">&quot;#7&quot;</span><span class="o">))</span>
</span><span class="line">  <span class="o">(</span><span class="s2">&quot;bmark3&quot;</span>
</span><span class="line">    <span class="s2">&quot;#9&quot;</span>
</span><span class="line">    ...<span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="step-2-translate-the-djvu-outline-to-pdf-metadata-format">Step 2. translate the Djvu outline to PDF metadata format</h3>

<p>Now, Djvu and PDF store the bookmark data in different formats. While Djvu uses SEXPR, PDF uses metadata, which looks like this:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">file ::<span class="o">=</span> &lt;entry&gt;*
</span><span class="line">entry ::<span class="o">=</span> BookmarkBegin
</span><span class="line">          BookmarkTitle: &lt;title&gt;
</span><span class="line">          BookmarkLevel: &lt;number&gt;
</span><span class="line">          BookmarkPageNumber: &lt;number&gt;
</span><span class="line">title ::<span class="o">=</span> &lt;character&gt;*
</span></code></pre></td></tr></table></div></figure>

<p>The example in Step 1 when translated into PDF metadata will look like</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">BookmarkBegin
</span><span class="line">BookmarkTitle: bmark1
</span><span class="line">BookmarkLevel: 1
</span><span class="line">BookmarkPageNumber: 1
</span><span class="line">BookmarkBegin
</span><span class="line">BookmarkTitle: bmark2
</span><span class="line">BookmarkLevel: 1
</span><span class="line">BookmarkPageNumber: 5
</span><span class="line">BookmarkBegin
</span><span class="line">BookmarkTitle: bmark2subbmark1
</span><span class="line">BookmarkLevel: 2
</span><span class="line">BookmarkPageNumber: 6
</span><span class="line">BookmarkBegin
</span><span class="line">BookmarkTitle: bmark2subbmark2
</span><span class="line">BookmarkLevel: 2
</span><span class="line">BookmarkPageNumber: 7
</span><span class="line">BookmarkBegin
</span><span class="line">BookmarkTitle: bmark3
</span><span class="line">BookmarkLevel: 1
</span><span class="line">BookmarkPageNumber: 9
</span><span class="line">...
</span></code></pre></td></tr></table></div></figure>

<p>It is a fun exercise to work out the correspondence of the two formats.</p>

<p><strong>Note:</strong> I have written a python program to automatically convert the Djvu SEXPR <code>bmarks.out</code> into the PDF metadata form and output as <code>bmarks2.txt</code></p>

<figure class="code"><figcaption><span>Convert Djvu outline into PDF metadata (bmarkDjvu2pdf.py)</span> <a href="http://bobbielf2.github.io/downloads/code/bmarkDjvu2pdf.py">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="c">#! /usr/bin/env python</span>
</span><span class="line"><span class="n">metadata</span> <span class="o">=</span> <span class="s">&#39;&#39;</span> <span class="c"># string to be written into PDF metadata</span>
</span><span class="line"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;bmarks.out&quot;</span><span class="p">)</span> <span class="c"># open input file: djvu outline</span>
</span><span class="line"><span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class="line"><span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;(bookmarks&#39;</span><span class="p">):</span>
</span><span class="line">    <span class="n">level</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class="line">
</span><span class="line"><span class="k">while</span> <span class="p">(</span><span class="n">level</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">):</span>
</span><span class="line">    <span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class="line">    <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;(&quot;&#39;</span><span class="p">):</span>
</span><span class="line">        <span class="n">level</span> <span class="o">=</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">metadata</span> <span class="o">=</span> <span class="n">metadata</span> <span class="o">+</span> <span class="s">&quot;BookmarkBegin</span><span class="se">\n</span><span class="s">BookmarkTitle: &quot;</span><span class="o">+</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;(&quot;&#39;</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">BookmarkLevel: &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">level</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class="line">        <span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class="line">        <span class="k">while</span> <span class="n">line</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&#39;)&#39;</span><span class="p">):</span>
</span><span class="line">            <span class="n">level</span> <span class="o">=</span> <span class="n">level</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class="line">        <span class="n">metadata</span> <span class="o">=</span> <span class="n">metadata</span> <span class="o">+</span> <span class="s">&quot;BookmarkPageNumber: &quot;</span><span class="o">+</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;&quot;#&#39;</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="k">while</span> <span class="n">line</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&#39;)&#39;</span><span class="p">):</span>
</span><span class="line">            <span class="n">level</span> <span class="o">=</span> <span class="n">level</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class="line"><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;bmarks2.txt&quot;</span><span class="p">,</span><span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="c"># output file: for PDF metadata</span>
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">metadata</span><span class="p">)</span>
</span><span class="line"><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

<h3 id="step-3-modify-pdf-metadata-to-include-the-bookmark-data">Step 3. modify PDF metadata to include the bookmark data</h3>

<p>Extract PDF metadata with this command:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">pdftk <span class="s2">&quot;book.pdf&quot;</span> dump_data &gt; pdfmetadata.out
</span></code></pre></td></tr></table></div></figure>

<p>Open the <code>pdfmetadata.out</code> file, and find the line that begins with <code>NumberOfPages:</code>, and insert your list of bookmarks after this line. Save the new file as <code>pdfmetadata.in</code>. Now run this command:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">pdftk <span class="s2">&quot;book.pdf&quot;</span> update_info <span class="s2">&quot;pdfmetadata.in&quot;</span> output newbook.pdf
</span></code></pre></td></tr></table></div></figure>

<p>The output <code>newbook.pdf</code> is your new <code>book.pdf</code> equiped with a convenient table of contents. Happy reading!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beamer Video Tutorial]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/01/12/beamer-video-tutorial/"/>
    <updated>2017-01-12T16:04:51-05:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/01/12/beamer-video-tutorial</id>
    <content type="html"><![CDATA[<p>As a researcher, I often need to make presentation slides, and want to embed movies in my slides for better illustrations. After doing a little research, I converged to the solution described in this article.</p>

<!--more-->

<p>If you want to benefit from this tutorial, here are two most important assumptions:</p>

<p><strong>1</strong>. Slides are made with the <a href="https://en.wikipedia.org/wiki/Beamer_(LaTeX)"><strong>LaTeX beamer</strong></a> package.<br />
<strong>2</strong>. Movie format is assumed to be <code>.flv</code> (because I can’t play <code>.mp4</code> movies on my Mac).</p>

<p>Accordingly, this tutorial has two parts:</p>

<p><strong>1</strong>. How to embed <code>.flv</code> in beamer.<br />
<strong>2</strong>. How to convert movie format to <code>.flv</code>.</p>

<h2 id="part-i-embed-flv-movies-in-latex">Part I: Embed <code>.flv</code> movies in LaTeX</h2>

<p><strong>(Update: I have found a better option, please ignore this part and jump to Part III)</strong></p>

<p><strong>Step 1</strong>: Download the <code>flashmovie.sty</code> package file from <a href="http://tug.ctan.org/tex-archive/macros/latex/contrib/flashmovie/">CTAN</a></p>

<blockquote>
  <p>Remark: The <code>flashmovie.sty</code> package is written by Professor Timo Hartmann from TU Berlin.</p>
</blockquote>

<p><strong>Step 2</strong>: Download the <a href="https://ia601703.us.archive.org/8/items/JwPlayerFiles/player.swf"><code>player.swf</code></a> file from <a href="https://archive.org/details/JwPlayerFiles">https://archive.org/details/JwPlayerFiles</a>. This file is needed by the JW Player engine in order to correctly compile the <code>.tex</code> file.</p>

<p><strong>Step 3</strong>: Embed the <code>.flv</code> movie in your beamer. Here is an example <code>.tex</code> file.</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="latex"><span class="line"><span class="k">\RequirePackage</span><span class="nb">{</span>flashmovie<span class="nb">}</span>
</span><span class="line"><span class="k">\documentclass</span><span class="nb">{</span>beamer<span class="nb">}</span>
</span><span class="line"><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span>
</span><span class="line"><span class="k">\begin</span><span class="nb">{</span>frame<span class="nb">}</span>
</span><span class="line"><span class="k">\frametitle</span><span class="nb">{</span>embed a movie<span class="nb">}</span>
</span><span class="line"><span class="k">\begin</span><span class="nb">{</span>center<span class="nb">}</span>
</span><span class="line"><span class="k">\flashmovie</span><span class="na">[width=0.7\textwidth,engine=jw-player,auto=0,image=POSTER.jpg,controlbar=1,loop=0]</span><span class="nb">{</span>YOUR<span class="nb">_</span>MOVIE.flv<span class="nb">}</span>
</span><span class="line"><span class="k">\end</span><span class="nb">{</span>center<span class="nb">}</span>
</span><span class="line"><span class="k">\end</span><span class="nb">{</span>frame<span class="nb">}</span>
</span><span class="line"><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Here <code>YOUR_MOVIE.flv</code> is the flv movie you want to embed, and <code>POSTER.jpg</code> is the image shown before the movie is played (note that the poster image is optional).</p>

<p><strong>Step 4</strong>: Compile the <code>.tex</code> file into PDF with all the neccessary files in the same directory (i.e. <code>flashmovie.sty</code>, <code>player.swf</code>, <code>YOUR_MOVIE.flv</code>, <code>POSTER.jpg</code>). Then open the PDF file using <strong>Adobe Reader 9 or above</strong></p>

<blockquote>
  <p>Remark:<br />
1. more options of the <code>\flashmovie</code> command can be found in the <code>flashmovie.sty</code> file.<br />
2. there are more different player options for <code>engine</code> other than the JW Player. For example, you may instead set <code>engine=flv-player</code> which uses an open-source player from <a href="http://flv-player.net">http://flv-player.net</a>. For this player another <code>.swf</code> file, <a href="http://flv-player.net/medias/player_flv_maxi.swf"><code>player_flv_maxi.swf</code></a>, is needed.</p>
</blockquote>

<h2 id="part-ii-convert-movie-formats-to-flv">Part II: Convert movie formats to <code>.flv</code></h2>

<p>The software used to convert movie formats is <a href="https://ffmpeg.org/"><strong>FFmpeg</strong></a>. This is a free and open-source software.</p>

<p>Assuming you are using Mac OSX like me, here are the steps:</p>

<p><strong>1</strong>. Make sure you installed <strong>Homebrew</strong> on your Mac, for details go to <a href="http://brew.sh/">http://brew.sh/</a>.<br />
<strong>2</strong>. Install <strong>ffmpeg</strong> by running <code>brew install ffmpeg</code> in command line.<br />
<strong>3</strong>. Convert movie formats using the <code>ffmpeg</code> command.</p>

<blockquote>
  <p>An explanation of the <code>ffmpeg</code> options can be found <a href="https://www.virag.si/2012/01/web-video-encoding-tutorial-with-ffmpeg-0-9/">here</a>. (Also a helpful article if your are using Windows or Linux.)</p>
</blockquote>

<p>An example command that I used to convert an <code>.mp4</code> file to <code>.flv</code>:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ffmpeg -i input_file.mp4 -c:v libx264 -vf <span class="nv">scale</span><span class="o">=</span>-1:270 -ar <span class="m">22050</span> output_file.flv
</span></code></pre></td></tr></table></div></figure>

<p>Some explanation of the command</p>

<ul>
  <li><strong><code>-i input_file.mp4</code></strong>: specify the input file</li>
  <li><strong><code>-c:v libx264</code></strong>: set video codec to be libx264</li>
  <li><strong><code>-vf scale=-1:270</code></strong>: set resolution of output file, <code>-1</code> means to maintain aspect ratio, <code>270</code> indicates the vertical resolution is 270p. (1080p is Full HD.) If not specified, resolution remains unchanged.</li>
  <li><strong><code>-ar 22050</code></strong>: set the audio sampling frequency. If don’t want any sound, use <code>-an</code> flag instead.</li>
  <li><strong><code>output_file.flv</code></strong>: specify output file and format</li>
</ul>

<h2 id="part-iii-embed-flv-movies-in-latex-to-replace-part-i">Part III: Embed <code>.flv</code> movies in LaTeX (To replace Part I)</h2>

<p><strong>(Updated 1/19/17)</strong></p>

<p>I have used the following movie embedding option a couple times before I posted this article, but I didn’t summarize it back then and forgot about it. Now memory strikes back.</p>

<p>The <a href="https://www.ctan.org/pkg/media9?lang=en"><code>media9</code> package</a> is the best option so far for embedding movies in beamer. Here is an example <code>.tex</code> file to do it:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="latex"><span class="line"><span class="k">\documentclass</span><span class="nb">{</span>beamer<span class="nb">}</span>
</span><span class="line"><span class="k">\usepackage</span><span class="nb">{</span>media9<span class="nb">}</span>
</span><span class="line"><span class="k">\usepackage</span><span class="nb">{</span>graphicx<span class="nb">}</span>
</span><span class="line"><span class="k">\begin</span><span class="nb">{</span>document<span class="nb">}</span>
</span><span class="line"><span class="k">\begin</span><span class="nb">{</span>frame<span class="nb">}{</span>embed a movie<span class="nb">}</span>
</span><span class="line"><span class="k">\begin</span><span class="nb">{</span>center<span class="nb">}</span>
</span><span class="line"><span class="k">\includemedia</span>[
</span><span class="line">	width=0.4<span class="k">\linewidth</span>,height=0.3<span class="k">\linewidth</span>,
</span><span class="line">	activate=pageopen,
</span><span class="line">	addresource=YOUR<span class="nb">_</span>MOVIE.flv,
</span><span class="line">	flashvars=<span class="nb">{</span>
</span><span class="line">	   source=YOUR<span class="nb">_</span>MOVIE.flv
</span><span class="line">	<span class="nb">}</span>
</span><span class="line">]<span class="nb">{</span><span class="k">\includegraphics</span><span class="na">[height=0.3\linewidth]</span><span class="nb">{</span>POSTER.jpg<span class="nb">}{</span>VPlayer9.swf<span class="nb">}</span>
</span><span class="line"><span class="k">\end</span><span class="nb">{</span>center<span class="nb">}</span>
</span><span class="line"><span class="k">\end</span><span class="nb">{</span>frame<span class="nb">}</span>
</span><span class="line"><span class="k">\end</span><span class="nb">{</span>document<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>A couple remarks about this example:</p>

<p><strong>1.</strong> Compile the <code>.tex</code> file into <code>.pdf</code> with all neccesary files (<code>YOUR_MOVIE.flv</code>, <code>POSTER.jpg</code>) in the same folder<br />
<strong>2.</strong> <code>POSTER.jpg</code> is the image displayed before <code>YOUR_MOVIE.flv</code> is played, and is included using the <code>\includegraphics</code> command from the <code>graphicx</code> package. The poster image is optional, you may intead use a <code>{}</code> (before the <code>{VPlayer9.swf}</code>) to leave it blank.<br />
<strong>3.</strong> <code>VPlayer9.swf</code> is the video player. You may use a fancier player <code>StrobeMediaPlayback.swf</code> and correspondingly in the <code>flashvars</code> options change <code>source=...</code> into <code>src=...</code>. Or if you are embedding audio, use <code>APlayer9.swf</code>.<br />
<strong>4.</strong> Embedding YouTube video would be a piece of cake with this package, here is an example given in the official documentation:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="latex"><span class="line"><span class="k">\includemedia</span>[
</span><span class="line">  width=0.6<span class="k">\linewidth</span>,height=0.3375<span class="k">\linewidth</span>, <span class="c">% 16:9</span>
</span><span class="line">  activate=pageopen,
</span><span class="line">  flashvars=<span class="nb">{</span>
</span><span class="line">    modestbranding=1 <span class="c">% no YT logo in control bar</span>
</span><span class="line">    <span class="nb">&amp;</span>autohide=1 <span class="c">% controlbar autohide</span>
</span><span class="line">    <span class="nb">&amp;</span>showinfo=0 <span class="c">% no title and other info before start</span>
</span><span class="line">    <span class="nb">&amp;</span>rel=0      <span class="c">% no related videos after end</span>
</span><span class="line">  <span class="nb">}</span>
</span><span class="line">]<span class="nb">{}{</span>http://www.youtube.com/v/r382kfkqAF4?rel=0<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>5.</strong> Go to the <a href="https://www.ctan.org/pkg/media9?lang=en">CTAN</a> page to find the complete <a href="http://mirrors.ctan.org/macros/latex/contrib/media9/doc/media9.pdf">documentation</a> for <code>media9</code>.</p>

<p>Hope this is helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客更新]]></title>
    <link href="http://bobbielf2.github.io/blog/2016/11/26/bo-ke-geng-xin/"/>
    <updated>2016-11-26T15:24:57-05:00</updated>
    <id>http://bobbielf2.github.io/blog/2016/11/26/bo-ke-geng-xin</id>
    <content type="html"><![CDATA[<p>我对最开始的两编博客内容进行了更新。因为经过这段时间的学习，我的电脑水平有所增长，回头看当时写的东西不禁发现了各种不严谨和各种 bug，忍不修补了一下。</p>

<p>好了，本篇的主要内容完毕，以下完全是跑题的内容，是我对这个学期所学的一门课的吐嘈，可以随意忽略。。</p>

<!--more-->

<p>最近在忙学业。这个学期选修了一门 Scientific Computing 的课（简称 SC 课），是 <a href="http://micde.umich.edu/">MICDE</a> 开的第一门课。对于一个编程一直只用 Matlab，没有开发经验，不怎么 geek 的伪码农，我表示这门课又让我体验了一次被虐的快感。所以我决定小小吐嘈一下，就以“中途出家的码农之挣扎系列”为副标题，以后说不定这个系列还会更新。</p>

<p>吐嘈开始，首先看看这门课的大纲：</p>

<table>
  <thead>
    <tr>
      <th>Week</th>
      <th>Topic</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Introduction to Linux</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Programming Langues: C, C++, Fortran</td>
    </tr>
    <tr>
      <td> </td>
      <td>Linux Bash Scripting &amp; Introduction to Python</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Elements of Development: Configuring, Compiling, Linking</td>
    </tr>
    <tr>
      <td> </td>
      <td>Tools of the Trade: Version Control, Text Editors, Dev. Env</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Algorithms for Numerical Linear Algebra</td>
    </tr>
    <tr>
      <td> </td>
      <td>Sci. Computing Libs: BLAS, LAPACK, PETSc, Trilinos</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Software Engineering Practices &amp; Development Workflows</td>
    </tr>
    <tr>
      <td> </td>
      <td>Object-Oriented Programming, Design Patterns, UML</td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
    </tr>
    <tr>
      <td>8</td>
      <td>Serial Optimization Techniques</td>
    </tr>
    <tr>
      <td> </td>
      <td>Parallel Programming Models</td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
    </tr>
    <tr>
      <td>11</td>
      <td>Data Format Libraries: HDF5, NetCDF, SILO</td>
    </tr>
    <tr>
      <td> </td>
      <td>Mesh Libraries: Libmesh, Exodus, others</td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
    </tr>
  </tbody>
</table>

<p>可以看出主题非常广泛，包括操作系统，各种语言编程，开发过程，版本控制，文本处理，数值算法，计算机工程，并行运算，数据存贮和可视化，等等。基本上每周的 topic 都足以开一门一整个学期的课，我们的任务就是尽力掌握那一周的内容，达到基础程度的理解，并且能够在上机实验环节实行简单应用。</p>

<p>于是每个星期对于我们来说都像一场生死循环：在课堂上尽全力去理解，然后在上机实验的时候费尽九牛二虎之力完成任务，刚觉得这周的 topic 总算是入门了，又尼玛进入下一周的主题，重新开始轮回。</p>

<p>但是当你尽力从这门课里活下来了，你所看到的世界都不一样了，在科学计算的方方面面都已经有所涉足，对于这个信息时代的齿轮如何运作有了全新的深度和广度的理解。当然我还远远不是任何一方面的 expert，精确的说，现在的我对科学计算这门学问有了一个比以前更清晰的整体图像（big picture），就像下面这张图所展示的第二种（progressive）进程，对整个学科有了从低像素到高像素的改善。</p>

<p><img src="http://bobbielf2.github.io/images/blog_figures/baseline_vs_progressive.jpg" width="500" /></p>

<h3 id="section">万金油技能总结</h3>

<p>Scientific Computing 的根本目标就是通过科学方法论、高效的协作来促进科学计算的理论和技术的发展。在接触这些方法论的过程中，我觉得有一些技能是在任何地方都十分宝贵的，不局限于 SC。</p>

<ol>
  <li><strong><a href="https://en.wikipedia.org/wiki/RTFM">RTFM</a> 的能力</strong>。在任何时候，懂得读 manual 和 documentation，都让你有了解决所有问题的利器。</li>
  <li><strong>运用 feedback 的能力</strong>。无论是编程 debug，还是学习别的技能，本质都是针对薄弱环节的刻意练习（deliberate practice）。刻意练习需要不断的接受 feedback 再次练习，feedback 的来源可以是程序的 compiler，老师，同学，网上练习系统等等。有效运用 feedback 本质上也是一种理解能力（动态的 RTFM）。</li>
  <li><strong>搜索（STFW）的能力</strong>。这个能力一说起来好像很简单，搜索谁不会嘛！但其实搜索能力是有不同级别，人人都能搜索，但是有的人是专家，有的人搜一下搜不到就放弃了。搜索能力本质上是<em>把碎片信息整理成系统信息的能力</em>。“搜”只是第一步，后续的整理信息，再搜索，再整理，再搜索……就是搜索能力的差别所在。</li>
  <li><strong>从“术”到“道”的能力</strong>。换个说法，就是从技术到理论，从 how 到 why，从方法到哲学，从科学到艺术的升华能力。说到底，知识是人的知识，人有强大的逻辑思维能力，但还有感情的影响和追求目标的动力。把知识学会，只需要有思维能力理解能力；把知识推向极致，运用到造福社会的程度，则需要理论和哲学的支持，需要做一件事情的意义和审美，需要影响其他人和接受他人的帮助，这些都是经过耐心的思考、实践、积累才能得到的。</li>
</ol>

<p>回想起来，我对付 SC 课和完成一切其他任务所用到的不外乎就是这几种技能了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fluid or Solid?]]></title>
    <link href="http://bobbielf2.github.io/blog/2016/09/13/fluid-or-solid/"/>
    <updated>2016-09-13T20:26:57-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2016/09/13/fluid-or-solid</id>
    <content type="html"><![CDATA[<p>This is something I learned today from the Fluid Mechanics class in the Chemical Engineering department, class number CHE 527.</p>

<p>We have had the intuitive ideas about what a fluid is versus what a solid is. A solid is something that can resist shear stress, and will maintain its shape, while a fluid is something that will deform continuously when a shear is applied to it, without changing back to the original shape.</p>

<p>But there are many substances in the world that cannot be classified into solid or fluid with the above simple and intuitive definitions. Here are some examples:</p>

<h4 id="silly-putty">Silly putty:</h4>

<!--more-->

<p><img src="http://bobbielf2.github.io/images/blog_figures/Silly_Putty.jpg" width="200" /></p>

<p>The silly putty is a moldable toy that you can stretch and shape it into any shapes. With a glance it looks like a solid, does not seem to flow like a fluid, and you may even bounce it like a ball. But this is only true in short term, if you put in a container and give it a rest, in long term it will start to look like a fluid; the piece of silly putty will flow (slowly) and eventually take the shape of the container.</p>

<h4 id="mayonnaise">Mayonnaise:</h4>

<p><img src="http://bobbielf2.github.io/images/blog_figures/mayonnaise.jpg" width="200" /></p>

<p>Mayonnaise is a comment condiment. If a lump of mayo sits there, it won’t flow and will stay as it is, like solid would do. But if the same lump of mayo is sheared by a small (but big enough) stress, it will start to deform continuously like a fluid and never come back to the initial shape. (Toothpaste has the similar property.)</p>

<h4 id="orbitz-a-drink">Orbitz (a drink)</h4>

<p><img src="http://bobbielf2.github.io/images/blog_figures/orbitz.jpg" width="200" /></p>

<p>The Orbitz was once a popular beverage. Inside the transparent drink you can see some little solid “beads” suspended in the fluid. A remarkable fact is that although the “beads” have different density than the fluid, will neither sink nor rise and will just stay in the same position provided the bottle of drink is put stationary. On the other hand, if you simply give the bottle a shake, the beads will start flowing (swimming) around right away, making it obvious that the drink is a fluid. The reason behind this is that, the fluid in the bottle is somehow like the mayonnaise, it requires a certain (small but big enough) shear stress to flow like a fluid, otherwise it just stay put like a solid; the bare gravitational force is not enough to move the fluid.</p>

<p>Glass, on the other hand, is not strictly a solid. The glass has relatively small viscosity in high temperature and can flow like honey, in low temperature the glass will become (much) harder to deform, but nevertheless can be essentially treated as a “fluid” with super high viscosity.</p>

<p>In summary, we have come to the funny conclusion that <strong>the Orbitz beverage technically consists of a fluid container (the glass bottle) holding a solid (the drink) inside.</strong></p>

<h4 id="corn-starch">Corn starch:</h4>

<p><img src="http://bobbielf2.github.io/images/blog_figures/Tara-Corn-Starch.jpg" width="400" /></p>

<p>Like silly putty, the corn starch when subject to sudden and huge impact will behave like a solid; you can even walk on a pool of corn starch (shown in the picture) as long as you move fast enough. But if you move slowly in this pool (i.e. shearing the corn starch slowly), it starts to behave like a fluid and sinks you inside.</p>

<p>All these examples remind us that we need to re-think our (intuitive) definitions for fluid and solid. Strictly speaking, nothing in this world is completely a solid or fluid, but there exists a spectrum between the two extreme states, some substances are more fluidlike while some others are more solidlike.</p>

<p>Let’s summarize with a verse in the Bible: “The mountains flowed before the Lord” - prophet Deborah (Judges 5:5).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Human Brain Works Logarithmically]]></title>
    <link href="http://bobbielf2.github.io/blog/2016/09/12/human-brain-works-logarithmically/"/>
    <updated>2016-09-12T11:20:24-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2016/09/12/human-brain-works-logarithmically</id>
    <content type="html"><![CDATA[<p><em>Do you know that our brain works logarithmically?</em></p>

<ol>
  <li>Do this exercise:
    <ul>
      <li>Draw a number line</li>
      <li>Mark $0$ and $1,000,000,000$ on the line.</li>
      <li>Ask yourself a question: where is $1,000$?</li>
    </ul>
  </li>
  <li>Many people put $1,000$ at the $1/3$ position. Note that $1,000=10^3$, $1,000,000,000=10^9$, where $9$ is triple of $3$. This implies that we perceive number logarithmically!</li>
  <li>Not only <strong>size</strong> of a number, but also <strong>weight</strong> of an object, <strong>loudness</strong> of a sound, <strong>brightness</strong> of a star, <strong>spiciness</strong> of a chili, all of these are perceived logarithmically by the human brain.</li>
  <li>Such logarithmic law is known more than 100 years ago, under the name “<a href="https://en.wikipedia.org/wiki/Weber%E2%80%93Fechner_law"><strong>Weber-Fechner law</strong></a>” in psychophysics.</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谁说英文歌词都没有深度？]]></title>
    <link href="http://bobbielf2.github.io/blog/2016/08/29/ying-wen-ge-ci/"/>
    <updated>2016-08-29T10:24:36-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2016/08/29/ying-wen-ge-ci</id>
    <content type="html"><![CDATA[<p>上周和朋友吃饭，听着餐厅用流行歌做BGM，聊起歌词的意思。朋友表示英文歌词都没什么深度，都是很肤浅直白的句子，比如艾薇儿、霉霉、Maroon 5 的歌大多都这样。我表示不同意，只是我们不知道哪些有深度的歌词而已，就像周杰伦的青花瓷老外大多没听过，歌词写得好的英文歌咱也很多都没听过。当时我一时没想出实例支持我的论点，后来想想，不少耳熟能详的英文老歌歌词都不错，比如 Scarborough Fair, The Sound of Silence, 歌词都很棒值得细细品味。</p>

<p>昨天看一本<a href="http://press.princeton.edu/titles/8007.html">并行运算的书</a>，书的每章开头都会有一段引用文字作为引子，用来科普小历史或者纯粹增加趣味。其中关于数据依赖关系（Dependences）那一章的开头就引用了一句歌词 “I wish I didn’t know now what I didn’t know then”，来自 Bob Seger 的 “Against the Wind”。原歌词讲述了故事主角经历了很多世事之后怀念当初年轻时懵懂但拥有的那种兴奋感，现在放在“数据依赖”的语境下又多了一层玩味，看得出写这本书的几位科学家也是有感情有趣的有血有肉的人呢。</p>

<!--more-->

<p>在网上搜这句歌词，找到了一位 blogger 叫做 <a href="https://musingsofanoldfart.wordpress.com">musingsofanoldfart</a> (musings of an old fart)，写了一篇以这句歌词为题目的 blog，里面收集了一些值得品味的歌词，读着觉得很有感觉，特此分享一下。原 po 在这里 <a href="https://musingsofanoldfart.wordpress.com/2014/08/30/i-wish-i-didnt-know-now-what-i-didnt-know-then/">original post</a>，以下是原文：</p>

<blockquote>
  <h2 id="i-wish-i-didnt-know-now-what-i-didnt-know-then">I wish I didn’t know now what I didn’t know then</h2>
  <p>by musingsofanoldfart
<br />
<br />
I have always been a big fan of interesting song lyrics. The coining of a phrase that says more than the few words used in the song make it memorable.The above title comes from a Bob Seger song “Against the Wind” as he laments it was more exciting not knowing some things when you were younger about love and life. The following sample lyrics are not necessarily my favorites, but they are a few that represent my fascination with good wordsmithing.
<br />
<br />
<strong>“See, the number on the matchbook is old and faded,”</strong> is a line from Jim Croce’s song “Operator.” He is struggling to find the number of an old girlfriend who ran off with his <strong>“best old ex-friend Ray.”</strong> Since it was written on a matchbook, it means it was probably written down in a bar, maybe when  she let him know she was leaving.
<br />
<br />
<strong>“Just like a paperback novel, the kind the drugstore sells,”</strong> comes from Gordon Lightfoot’s “If you could read my mind.” He has several like this in the song, but to me he describes the cheesy romance novels you can buy in a drugstore where the hero saves the day. This is a melancholy song about people who can’t reclaim the love they once had, so the hero references are fantasy and not reality.
<br />
<br />
<strong>“Clowns to the left of me, joker’s to the right, here I am stuck in the middle with you,”</strong> is a Stealers Wheel song whose title is the last phrase of the song lyric. The song can mean so many things, but it shows that we are in this together and we need to ignore the fools on either side telling us what to do. It is also a good metaphor for our political stalemate.
<br />
<br />
Bob Dylan wrote and sang <strong>“How many ears must one man have, before he can hear people cry.”</strong> The song made famous by Peter, Paul and Mary’s rendition sung on the steps of the Lincoln Memorial beside Martin Luther King is called “Blowing in the Wind.”  There are great references throughout this song, but I like this one the most as African-Americans have been maltreated for so long and it seemed to resonate more.
<br />
<br />
When people think of Rush, they do not first think of lyrics, but their many songs are replete with excellent wordsmithing. In the song “Free will” the words that resonate with me are <strong>“if you choose not to decide, you still have made a choice.”</strong> I found this very poignant as many do not realize that by not doing something, they are making a choice. A good example is choosing not to vote believing it makes no difference. Yet, by not voting, the lesser of two candidates can be elected making a problem worse.
<br />
<br />
Of course, no list would be complete without some reference to a Beatles song. In “Lady Madonna,” Paul McCartney sings <strong>“Lady Madonna, children at your breast, it’s a wonder how you manage to feed the rest.”</strong>  This line speaks volumes of the difficulties in raising children, but especially in poverty or near poverty when you are a single parent.
<br />
<br />
Let me close with romantic song from David Gates of “Bread.” The lyric goes <strong>“When my love for life has all run dry, you’ll come and pour yourself on me.”</strong>  This lyric from the song “If” resonates with me as we pick each other up. He has done all he can and needs help, so his lover comes and pour herself on him to bring his spirits back to life.
<br />
<br />
I would love to hear your reaction to these and for you to share some of your favorites. These were top of mind, so I have overlooked many great lyrics.
<br />
<br />
(The End)</p>
</blockquote>

<p>原 po 的评论里面还有提到别的歌词，也值得去看看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[管理引用文献]]></title>
    <link href="http://bobbielf2.github.io/blog/2016/08/28/guan-li-yin-yong-wen-xian/"/>
    <updated>2016-08-28T00:31:02-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2016/08/28/guan-li-yin-yong-wen-xian</id>
    <content type="html"><![CDATA[<p>管理文献对于做研究或者各种技术工程师都是很重要的事情。需要资料时要快速查得到，运用资料时要给出出处，这就要平时把文献资料整理得井井有条；尤其当文献数量达到上百甚至上千条，没有有效的管理方法简直寸步难行。</p>

<p>于是专业人员都会用到软件来管理文献。比如文章 <a href="http://pne.people.si.umich.edu/PDF/howtoread.pdf">How to read a book</a> 就提到一些常用的文献管理软件(Reference Management Software)。</p>

<h4 id="section">市面上的文献管理软件</h4>

<p>个人测试过以下这几个最流行的软件</p>

<ul>
  <li>EndNote：据说挺好用，但是（1）需要花稍多一点的时间学习使用，（2）收费，差不多 80 大洋。网络 basic 版免费，但是试用了一下并不方便，也有导入数量限制。</li>
  <li>Papers：据说很好用，但是收费，学生版差不多 50 大洋。iPad 版免费，但是只用 iPad 版而没有桌面版也是很不方便。</li>
  <li>Bookends：优势是可以找 Amazon 上的书，不用费神想到底要连哪个出版商的数据库。</li>
  <li>Mendeley：暂时觉得最好用的一个。免费。可以把 PDF 文献原文拖入软件窗口，就会帮你自动识别 citation 信息，虽然并不总是准确，但如果知道 DOI 的话可以自动更正。在 mendeley 中可以连接到本地 PDF，并且直接打开做笔记挺方便。</li>
  <li>BibDesk：神器，免费，原生支持 <a href="http://www.bibtex.org/">BibTeX</a> (BibTeX 是基于 <a href="https://en.wikipedia.org/wiki/LaTeX">LaTeX</a> 的文献管理软件)。适合习惯用 LaTeX 写论文的人 (理工科写论文基本标配用 LaTeX )。就用它了！</li>
</ul>

<blockquote>
  <p>Remark: 如果不怎么用 LaTeX 写论文的话，Mendeley 就很好用。以前大部分人都用 Mendeley，现在很多科研人员不用的原因是因为“洁癖”： Mendeley 被 Elsevier (爱思唯尔出版社) 收购了，Elsevier 在学术界变得“臭名昭著”可以参考 <a href="https://en.wikipedia.org/wiki/The_Cost_of_Knowledge">Wikipedia: The Cost of Knowledge</a>，中文参考 <a href="http://news.sciencenet.cn/htmlnews/2012/7/266578.shtm">科学网：逾万科学家联名抵制爱思唯尔</a>。</p>
</blockquote>

<!--more-->

<h4 id="bibdesk">BibDesk</h4>

<p>这里有一篇介绍 <a href="http://www.mit.edu/people/lucylim/BibDesk.html">为什么要用 BibDesk</a> 的文章，作者是 NASA 的物理科学家 Lucy F. G. Lim。主要就是上面提到的三个优点：</p>

<ul>
  <li>可以做你想做的一切</li>
  <li>原生支持 BibTeX</li>
  <li>免费</li>
</ul>

<p>在 BibDesk 新增文献引用信息的条目很简单：只要找到文章的 BibTeX 形式的引用信息，command-C 复制到剪贴版，然后在 BibDesk 窗口按 alt-command-L 就自动把剪贴版的信息生成新的条目了。</p>

<h4 id="ads--arxiv">两个很有用的在线数据库：ADS 和 arXiv</h4>

<p>录入文献的引用信息，是整理文献的第一步，也是最机械最烦人的一步。如果有现成整理好的信息直接导入成 BibTeX 那该多好！幸好大家都是这么想的，you are not alone。早有牛人意识好这个需求，建立了收集文献信息的在线数据库，最著名的有 ADS 和 arXiv。配合 Google Scholar 的强大搜索功能，几乎所向披靡。</p>

<ul>
  <li><a href="http://adswww.harvard.edu/">ADS (Astrophysics Data System)</a> 是由美国宇航局（NASA）开发、哈佛大学（Harvard）天体物理中心运营的在线数据库，上面保存了大量的 astronomy 和 physics 的科研论文。论文不一定是同行评审过的。论文的 abstract 和 citation 信息都完整可查，而且几乎所有文章原文都可以 GIF 或者 PDF 的形式获取。</li>
  <li><a href="http://arxiv.org/">arXiv.org</a> 是由物理学家 Paul Ginsparg 开发、现由康奈尔大学（Cornell）运营的在线数据库，保存科研论文的预印本（preprint），涉及的学科包括 mathematics, physics, astronomy, computer science, quantitative biology, statistics, quantitative finance。所有文章的原文都可以 PDF 形式获取，论文的 abstract 和 citation 信息都完整可查。</li>
  <li><a href="https://scholar.google.com/">Google Scholar</a> 可以搜索到包括上面提到的数据库在内的文献，而且自带把 Citation 输出成包括 BibTeX 在内的多种格式的功能。</li>
</ul>

<blockquote>
  <p>Remark: 另外也要善用学校图书馆。各个大学的图书馆都有统一订阅了主流出版社的在线数据库，学生可以免费获得大量文章和书籍。</p>
</blockquote>

<h4 id="adsbibdesk">再安利一个软件：adsbibdesk</h4>

<p>这里再介绍多一种方式：用 <a href="https://pypi.python.org/pypi/adsbibdesk">adsbibdesk</a> 软件导入 citation 到 BibDesk。顾名思义 adsbibdesk 可以把 ADS 或者 arXiv 上的数据自动整理导入到 BibDesk 中。</p>

<p>使用方法很简单，按照 <a href="https://pypi.python.org/pypi/adsbibdesk">adsbibdesk</a> 主页指示安装好软件之后，就可以用 <code>adsbibdesk</code> 命令导入信息了。</p>

<p>导入时，在 BibDesk 打开想要修改的 .bib 文档，然后用 <code>adsbibdesk</code> 命令导入信息。用这个命令需要找到文章的 <strong>ADS 识别码</strong> (ADS bibcode)，在命令行运行</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="batch"><span class="line">adsbibdesk <span class="m">1998</span>ApJ...<span class="m">500</span>..<span class="m">525</span>S
</span></code></pre></td></tr></table></div></figure>

<p>或者找到 <strong>arXiv 识别码</strong> （arXiv identifier），在命令行运行</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="batch"><span class="line">adsbibdesk <span class="m">1401</span>.<span class="m">3068</span>
</span></code></pre></td></tr></table></div></figure>

<p>或者找到 <strong>DOI 码</strong>（Digital Object Identifier），在命令行运行</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="batch"><span class="line">adsbibdesk <span class="m">10</span>.<span class="m">1137</span><span class="n">/S0036144502417715</span>
</span></code></pre></td></tr></table></div></figure>

<p>都可以把 citation 信息添加到 .bib 文档。</p>

<h4 id="section-1">后记</h4>

<p>网上还有很多比较不同管理软件的文章，比如</p>

<ul>
  <li>Wikipedia: <a href="https://en.wikipedia.org/wiki/Comparison_of_reference_management_software">Comparison of reference management software</a></li>
  <li>密大图书馆 Research Guides: <a href="http://guides.lib.umich.edu/citationmanagementoptions">Citation management software</a></li>
  <li>数据科学家 Max Masnick 的博客：
<a href="https://www.maxmasnick.com/2015/02/28/reference-managers/">Thoughts on Reference Management Software</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数学是发明还是发现]]></title>
    <link href="http://bobbielf2.github.io/blog/2016/08/25/shu-xue-shi-fa-ming-huan-shi-fa-xian/"/>
    <updated>2016-08-25T10:21:23-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2016/08/25/shu-xue-shi-fa-ming-huan-shi-fa-xian</id>
    <content type="html"><![CDATA[<p>“<strong>亚里士多德阵营</strong>”支持数学来源于实践，是发明：</p>

<blockquote>
  <p>数学学是人类探索自然的经验抽象，是人类的发明；数学思想必须与现实经验结合才有其存在的价值。</p>
</blockquote>

<p>“<strong>柏拉图阵营</strong>”认为数学存在于理想世界，人只是发现它：</p>

<blockquote>
  <p>人类的数学思想是理念世界在人类意识中的投射，是人类的发现；理念世界有其自身的特质和变化，并非现实经验的简单抽象。</p>
</blockquote>

<p>其实，数学既是发现，也是发明。关键在于人类的智力发展出抽象能力，在发现的基础上进行发明。我属于“<strong>克罗内克阵营</strong>”：</p>

<blockquote>
  <p>上帝创造了整数，其余都是人的工作。</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要计算]]></title>
    <link href="http://bobbielf2.github.io/blog/2016/08/17/bu-yao-ji-suan/"/>
    <updated>2016-08-17T13:01:14-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2016/08/17/bu-yao-ji-suan</id>
    <content type="html"><![CDATA[<p>计算是一种需要被抵制的诱惑。有经验的人对于计算这个工具，都持谨慎的态度：</p>

<blockquote>
  <p>A computation is a temptation that should be resisted as long as possible.<br />
- John P. Boyd (Michigan)</p>
</blockquote>

<blockquote>
  <p>Never do a calculation until you already know the answer.<br />
- John Wheeler</p>
</blockquote>

<p>更有甚者，以反讽态度强调理论之于计算的重要性。</p>

<blockquote>
  <p>Six months in the lab can save you a day in the library.<br />
- Albert Migliori</p>
</blockquote>

<!--more-->

<p>后人补充</p>

<blockquote>
  <p>Six months in the lab will save you: Half a day in the library or 30 minutes searching online.<br />
- Paul G. Kotula</p>
</blockquote>

<p>好像大家都在贬低计算的作用，尽管我的爱豆 Trefethen 说过计算是一门伟大的科学：</p>

<blockquote>
  <p>There are three great branches of science: theory, experiment, and computation.</p>
</blockquote>

<p>传说中的 Knuth 也以计算作为验证科学的标准：</p>

<blockquote>
  <p>Science is what we understand well enough to explain to a computer. Art is everything else we do.</p>
</blockquote>

<p>正如所有科学家一样，大家都明白计算机是现代科学一个最最重要的发明。因为计算机导致计算能力的提升，我们可以用前所未有的方法去进行科学研究：计算卫星轨道，模拟湍流，模拟黑洞，挑战人类顶尖棋手。不敢想像没有发明计算机的世界会是怎么样的。如果说中世纪宗教统治的欧洲是“黑暗中世纪”，那以前没有计算机的所有时代就是“黑暗蜗牛时代”。</p>

<p><em>既然计算这么好，为什么前辈们都在“贬低”计算呢？</em></p>

<p>所有认真写过代码的人，无论是在学校学习的学生还是在业界工作的程序猿，都尝过 debug 的痛苦，著名的“九十-九十法则”说过：</p>

<blockquote>
  <p><strong>Ninety-ninety rule</strong>:
The first 90% of the code takes 90% of the time. The remaining 10% takes the other 90% of the time.</p>
</blockquote>

<p>代码纠错是任何项目中最最烦人的过程。而“贬低”计算的前辈们就是那些成功打败各种 bug 生存下来的佼佼者。说到底，他们强调了一件事：<strong>理解</strong>与<strong>计算</strong>的关系。</p>

<h3 id="section">理解 — 计算</h3>

<ul>
  <li>计算是用来验证你是不是理解一个概念或者方法的。如果你已经理解，计算的成功验证可以给你更多的信心；如果计算没有验证成功，你也找不出 bug 在哪里，那只说明一件事，你还没有完全理解。所以<strong>理解是计算的前提</strong>。</li>
  <li>计算是运用理解力去实践创造的过程。理解一个理论之后，你就可以通过计算让理论在现实中派上用场。比如理解了建筑学和材料科学，就可以用模拟地震来研究建筑结构的薄弱部分；但是模拟出残垣断壁，并不能反过来让你自动学会材料科学。又比如理解了椭圆积分，就可以运用 AGM 算法来轻易算出 $\pi$ 到数亿位的精度；但是通过读 AGM 算法那几行简单的代码，并不能反过来告诉你它为什么这么有效，也不能教会你椭圆积分。<strong>理解是计算的前提</strong>。</li>
</ul>

<blockquote>
  <p>附上计算 $\pi$ 的 AGM 算法，看看代码简单到什么程度，看看光看代码你能学会什么。</p>
</blockquote>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="matlab"><span class="line"><span class="c">% MATLAB code: compute Pi via AGM</span>
</span><span class="line"><span class="n">y</span> <span class="p">=</span> <span class="nb">sqrt</span><span class="p">(</span><span class="nb">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
</span><span class="line"><span class="n">x</span> <span class="p">=</span> <span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="o">/</span><span class="n">y</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class="line"><span class="n">p</span> <span class="p">=</span> <span class="mi">2</span><span class="o">+</span><span class="nb">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class="line"><span class="k">for</span> <span class="nb">i</span> <span class="p">=</span> <span class="mi">1</span><span class="p">:</span><span class="mi">6</span>
</span><span class="line">    <span class="n">fprintf</span><span class="p">(</span><span class="s">&#39;%21.16g\n&#39;</span><span class="p">,</span><span class="n">p</span><span class="p">)</span>
</span><span class="line">    <span class="n">p</span> <span class="p">=</span> <span class="n">p</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">x</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">y</span><span class="p">);</span>
</span><span class="line">    <span class="n">s</span> <span class="p">=</span> <span class="nb">sqrt</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class="line">    <span class="n">y</span> <span class="p">=</span> <span class="p">(</span><span class="n">y</span><span class="o">*</span><span class="n">s</span><span class="o">+</span><span class="mi">1</span><span class="o">/</span><span class="n">s</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">y</span><span class="p">);</span>
</span><span class="line">    <span class="n">x</span> <span class="p">=</span> <span class="p">(</span><span class="n">s</span><span class="o">+</span><span class="mi">1</span><span class="o">/</span><span class="n">s</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>所以，当你的程序有 bug 时，你应该做的不是死抠每一行代码，而是停止 debug，回去审视这些代码所基于的理论，让理论告诉你问题在哪里。这里再次引用那句话：</p>

<blockquote>
  <p>Never do a calculation until you already know the answer.</p>
</blockquote>

<p>真正的理解会告诉你答案，计算能做的只是验证和运用你的理解。</p>

<blockquote>
  <p>Things may seem magical, but to the people who understand math there is no magic. - Bobbie</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dimensional Analysis]]></title>
    <link href="http://bobbielf2.github.io/blog/2016/08/11/dimensional-analysis/"/>
    <updated>2016-08-11T16:00:40-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2016/08/11/dimensional-analysis</id>
    <content type="html"><![CDATA[<p>Once one of my engineering friends asked me: “Why would you need all these dimensionless numbers? There are so many of them and they just complicate stuff!”</p>

<p>If something is not useful, it wouldn’t have been invented in science; this is particularly true for dimensional analysis which has made great success across all fields of science.</p>

<p>To put things simple, dimensional analysis has two major fundamental applications:</p>

<ul>
  <li>Simplify equations and lead to new scientific branches/specialties.</li>
  <li>Guide scientific experiments with dynamic similitude.</li>
</ul>

<!--more-->

<h4 id="simplification-of-the-navier-stokes-equation">Simplification of the Navier-Stokes equation</h4>

<p>Look at the Navier-Stokes equation</p>

<script type="math/tex; mode=display">\rho \left(\frac{\partial \mathbf{u}}{\partial t} + \mathbf{u}\cdot\nabla\mathbf{u}\right) = -\nabla p + \mu\Delta \mathbf{u} + \rho\mathbf{g}</script>

<p>At a particular point in a flow, We may find that some term in this equation is <em>orders of magnitude</em> bigger than others. We could simplify the N-S equation by retaining those terms that matter, and eliminating those that don’t.</p>

<p>How do we go about to eliminate the negligible terms? To put the conclusion first, the magnitudes of each term in the N-S equation depend on both the <strong>sturcture</strong> of the flow and <strong>location</strong> in the flow – with appropriate flow structure and at appropriate location, one can safely delete certain terms in the N-S equation. This whole process of simplfying the equations, is called <strong>dimensional analysis</strong>.</p>

<h4 id="dimensional-analysis">Dimensional analysis</h4>

<p>There are three steps in performing dimensional analysis.</p>

<ol>
  <li>Identify <strong>characteristic scales</strong> of a flow.
    <ul>
      <li>characteristic length $L$ is related to the size of the boundaries</li>
      <li>characteristic velocity $U$ is determined by the particular mechanism driving the flow</li>
      <li>characteristic time $T$ is either imposed by external means or simply defined as $T=L/U$.</li>
    </ul>

    <blockquote>
      <p>For example:</p>

      <ol>
        <li>In the case of unidirectional flow through channel: $U = $ max velocity across channel.</li>
        <li>In the case of uniform flow past stationary body: $U = $ velocity of the incident flow, $L =$ diameter of the body.</li>
        <li>In the case of forced oscillatory flow: $T = $ period of oscillation.</li>
      </ol>
    </blockquote>
  </li>
  <li><em>Nondimensionalization</em>:
    <ul>
      <li>Rescale each variable in the equation into a dimensionless variable. 
 <script type="math/tex">\hat{\mathbf{u}}:=\frac{\mathbf{u}}{U},\qquad \hat{\mathbf{x}}:=\frac{\mathbf{x}}{L},\qquad \hat{t}:=\frac{t}{T},\qquad \hat{p}:=\frac{pL}{\mu U}.</script></li>
      <li>Rewrite the equation into a dimensionless form.
 <script type="math/tex">\beta \frac{\partial \hat{\mathbf{u}}}{\partial \hat{t}} + \mbox{Re}\,\hat{\mathbf{u}}\cdot\hat{\nabla}\hat{\mathbf{u}} = -\hat{\nabla} \hat{p} + \hat{\nabla}^2 \hat{\mathbf{u}} + \frac{\mbox{Re}}{\mbox{Fr}^2}\frac{\mathbf{g}}{g}</script></li>
      <li>The multiplication factors of each term are nondimensional groups, called <em>dimensionless numbers</em>
        <ul>
          <li>Frequency parameter: $\beta:=\frac{L^2}{\nu T}$, expresses the relative magnitudes of the inertial acceleration force and the viscous force</li>
          <li>Reynolds number: $\mbox{Re}:=\frac{UL}{\nu}$, expresses the relative magnitudes of the inertia convective force and the viscous force</li>
          <li>Froude number: $\mbox{Fr}:=\frac{U}{\sqrt{gL}}$ expresses the relative magnitudes of the inertial convective force and the body force</li>
          <li>The group $\frac{\mbox{Re}}{\mbox{Fr}^2}=\frac{gL^2}{\nu U}$, expresses the relative magnitudes of the body force and the viscous force</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Eliminate the dominated terms.
    <ul>
      <li>If $\mbox{Re}\ll 1$ and $\beta\ll1$, the dominant terms give <strong>Stokes equation</strong>
 <script type="math/tex">-\nabla p + \mu \nabla^2\mathbf{u}+ \rho\mathbf{g}=\mathbf{0}</script>
 where the inertia terms go away, resulting in a quasi-steady fluid.</li>
      <li>If $\mbox{Re}\gg 1$ and $\beta\gg1$, and rescale the pressure by $\hat{p}=\frac{p}{\rho U^2}$ instead, the dominant terms give <strong>Euler’s equation</strong>
 <script type="math/tex">\rho \left(\frac{\partial \mathbf{u}}{\partial t} + \mathbf{u}\cdot\nabla\mathbf{u}\right) = -\nabla p + \rho\mathbf{g}</script>
 where the viscous term goes away, making it behave like an inviscid fluid.</li>
    </ul>
  </li>
</ol>

<h4 id="dynamic-similitude">Dynamic similitude</h4>

<p>TBA.</p>

<h5 id="reference">Reference:</h5>

<p><a href="https://www.amazon.com/Introduction-Theoretical-Computational-Fluid-Dynamics/dp/0199752079">Pozrikidis C. (2011). Introduction to Theoretical and Computational Fluid Dynamics (2nd ed.). Oxford University Press.</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写数学 Blog]]></title>
    <link href="http://bobbielf2.github.io/blog/2016/08/06/shu-xue-blog/"/>
    <updated>2016-08-06T19:11:58-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2016/08/06/shu-xue-blog</id>
    <content type="html"><![CDATA[<p><a href="http://bobbielf2.github.io/blog/2016/08/06/yong-you-ni-de-ge-ren-bo-ke/index.html">上一篇文章</a>讲了如何用 Octopress 在 GitHub 上搭建个人主页，今天这篇写给可爱的科研狗们，介绍怎么样让网页兼容 LaTeX！首先看看效果：</p>

<ul>
  <li>LaTeX 行间模式（displayed math）</li>
</ul>

<figure class="code"><figcaption><span>latex</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="latex"><span class="line"><span class="sb">$$</span><span class="nb"></span>
</span><span class="line"><span class="nv">\begin</span><span class="nb">{align}</span>
</span><span class="line"><span class="nv">\mbox</span><span class="nb">{欧拉公式：} &amp; e^{i</span><span class="nv">\pi</span><span class="nb">} </span><span class="o">+</span><span class="nb"> </span><span class="m">1</span><span class="nb"> </span><span class="o">=</span><span class="nb"> </span><span class="m">0</span><span class="nv">\\</span><span class="nb"></span>
</span><span class="line"><span class="nv">\mbox</span><span class="nb">{牛顿公式：} &amp; x_{i</span><span class="o">+</span><span class="m">1</span><span class="nb">} </span><span class="o">=</span><span class="nb"> </span><span class="nv">\frac</span><span class="nb">{</span><span class="m">1</span><span class="nb">}{</span><span class="m">2</span><span class="nb">}</span><span class="nv">\left</span><span class="o">(</span><span class="nb">x_i</span><span class="o">+</span><span class="nv">\frac</span><span class="nb">{</span><span class="m">2</span><span class="nb">}{x_i}</span><span class="nv">\right</span><span class="o">)</span><span class="nb"></span>
</span><span class="line"><span class="nv">\end</span><span class="nb">{align}</span>
</span><span class="line"><span class="s">$$</span>
</span></code></pre></td></tr></table></div></figure>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\mbox{欧拉公式：} & e^{i\pi} + 1 = 0\\
\mbox{牛顿公式：} & x_{i+1} = \frac{1}{2}\left(x_i+\frac{2}{x_i}\right)
\end{align} %]]&gt;</script>

<!--more-->

<ul>
  <li>LaTeX 内嵌模式（inline math）</li>
</ul>

<figure class="code"><figcaption><span>latex</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="latex"><span class="line">爱因斯坦说过：<span class="s">$</span><span class="nb">E </span><span class="o">=</span><span class="nb"> mc^</span><span class="m">2</span><span class="s">$</span>
</span></code></pre></td></tr></table></div></figure>

<p>爱因斯坦说过：$E = mc^2$</p>

<h4 id="markdown-kramdown--mathjax">让 Markdown 显示数学公式：kramdown 和 MathJax</h4>

<h5 id="kramdown--rdiscount">1, 用 kramdown 代替 rdiscount</h5>

<p>Octopress 中默认的 rdiscount 不支持把 Markdown 中的 LaTeX 公式呈现出来，所以要换成 <a href="http://kramdown.gettalong.org/">kramdown</a>（这个 Markdown 转换器也是开源的，他家号称全球最快）。</p>

<ul>
  <li>安装 kramdown（假设你已经有 rbenv，参考<a href="http://bobbielf2.github.io/blog/2016/08/06/yong-you-ni-de-ge-ren-bo-ke/index.html">上一篇文章</a> ），运行命令</li>
</ul>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">gem install kramdown
</span></code></pre></td></tr></table></div></figure>

<ul>
  <li>修改 Octopress 的<code>_config.yml</code>配置文件，把全部<code>rdiscount</code>都改成<code>kramdown</code></li>
  <li>修改 Octopress 的<code>Gemfile</code>，把里面的<code>gem 'rdiscount', '~&gt; 2.0'</code>改成<code>gem 'kramdown'</code></li>
</ul>

<h4 id="mathjax">2, 配置 MathJax</h4>

<p>在<code>/source/_includes/custom/head.html</code>文件里添加</p>

<figure class="code"><figcaption><span>head.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="c">&lt;!-- mathjax config similar to math.stackexchange --&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-mathjax-config&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
</span><span class="line">  <span class="nx">jax</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;input/TeX&quot;</span><span class="p">,</span> <span class="s2">&quot;output/HTML-CSS&quot;</span><span class="p">],</span>
</span><span class="line">  <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">inlineMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$&#39;</span><span class="p">,</span> <span class="s1">&#39;$&#39;</span><span class="p">]</span> <span class="p">],</span>
</span><span class="line">    <span class="nx">displayMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$$&#39;</span><span class="p">,</span> <span class="s1">&#39;$$&#39;</span><span class="p">]],</span>
</span><span class="line">    <span class="nx">processEscapes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">    <span class="nx">skipTags</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="s1">&#39;noscript&#39;</span><span class="p">,</span> <span class="s1">&#39;style&#39;</span><span class="p">,</span> <span class="s1">&#39;textarea&#39;</span><span class="p">,</span> <span class="s1">&#39;pre&#39;</span><span class="p">,</span> <span class="s1">&#39;code&#39;</span><span class="p">]</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">messageStyle</span><span class="o">:</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTML-CSS&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">preferredFont</span><span class="o">:</span> <span class="s2">&quot;TeX&quot;</span><span class="p">,</span> <span class="nx">availableFonts</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;STIX&quot;</span><span class="p">,</span><span class="s2">&quot;TeX&quot;</span><span class="p">]</span> <span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p><strong>2017/5/19 update:</strong> MathJax 最近<a href="https://www.mathjax.org/cdn-shutting-down/">更改了他们 CDN 的提供商</a>,所以上面这个 script 里最后一行的 cdn 地址很快就会不适用了，新的地址变成下面这个（注：我还把<code>http</code>改为<code>https</code>，保证在安全模式下看到数学公式）：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS_HTML&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<h4 id="mathjax--bug">3, 修复 MathJax 在页面中右键变白屏的 bug</h4>

<p>修改 Octopress 的<code>/sass/base/_theme.scss</code>文件，把代码中的</p>

<figure class="code"><figcaption><span>_theme.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sass"><span class="line"><span class="c1">//...</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nt">div</span> <span class="err">{</span>
</span><span class="line">     <span class="na">background</span><span class="o">:</span> <span class="nv">$sidebar-bg</span> <span class="nv">$noise-bg</span><span class="err">;</span>
</span><span class="line">     <span class="na">border-bottom</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="nv">$page-border-bottom</span><span class="err">;</span>
</span><span class="line">     <span class="o">&gt;</span> <span class="nt">div</span> <span class="err">{</span>
</span><span class="line"><span class="c1">//...</span>
</span></code></pre></td></tr></table></div></figure>

<p>加入<code>#main</code>，变成</p>

<figure class="code"><figcaption><span>sass</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sass"><span class="line"><span class="c1">//...</span>
</span><span class="line"><span class="o">&gt;</span> <span class="nt">div</span><span class="nn">#main</span> <span class="err">{</span>
</span><span class="line">     <span class="na">background</span><span class="o">:</span> <span class="nv">$sidebar-bg</span> <span class="nv">$noise-bg</span><span class="err">;</span>
</span><span class="line">     <span class="na">border-bottom</span><span class="o">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="no">solid</span> <span class="nv">$page-border-bottom</span><span class="err">;</span>
</span><span class="line">     <span class="o">&gt;</span> <span class="nt">div</span> <span class="err">{</span>
</span><span class="line"><span class="c1">//...</span>
</span></code></pre></td></tr></table></div></figure>

<h4 id="pygments-">4, 修复 Pygments 的问题</h4>

<p>这个是新版本出现的问题。使用 kramdown 之后，以前写的博客突然编译不出来了；当你运行 rake generate 时候，会报错：</p>

<figure class="code"><figcaption><span>sass</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sass"><span class="line"><span class="na">Error</span><span class="o">:</span> <span class="n">Pygments</span> <span class="n">can</span><span class="s1">&#39;</span><span class="s2">t parse unknown language: &lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>原因是最新版的 Pygments 这个插件对于 Markdown 的书写要求更严格了。</p>

<p>为了找出原来，可以修改 Pygments 的报错代码，在<code>/plugins/pygments_code.rb</code>文件中:</p>

<figure class="code"><figcaption><span>pygments_code.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">pygments</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">lang</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">PYGMENTS_CACHE_DIR</span><span class="p">)</span>
</span><span class="line">      <span class="n">path</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">PYGMENTS_CACHE_DIR</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">lang</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="no">Digest</span><span class="o">::</span><span class="no">MD5</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="n">code</span><span class="p">)</span><span class="si">}</span><span class="s2">.html&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class="line">        <span class="n">highlighted_code</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class="line">      <span class="k">else</span>
</span><span class="line">        <span class="k">begin</span>
</span><span class="line">          <span class="n">highlighted_code</span> <span class="o">=</span> <span class="no">Pygments</span><span class="o">.</span><span class="n">highlight</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="ss">:lexer</span> <span class="o">=&gt;</span> <span class="n">lang</span><span class="p">,</span> <span class="ss">:formatter</span> <span class="o">=&gt;</span> <span class="s1">&#39;html&#39;</span><span class="p">,</span> <span class="ss">:options</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:encoding</span> <span class="o">=&gt;</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">,</span> <span class="ss">:startinline</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">})</span>
</span><span class="line">        <span class="k">rescue</span> <span class="no">MentosError</span>
</span><span class="line">          <span class="k">raise</span> <span class="s2">&quot;Pygments can&#39;t parse unknown language: </span><span class="si">#{</span><span class="n">lang</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class="line">        <span class="k">end</span>
</span><span class="line">        <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="n">highlighted_code</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">      <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>把这里的</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">raise</span> <span class="s2">&quot;Pygments can&#39;t parse unknown language: </span><span class="si">#{</span><span class="n">lang</span><span class="si">}</span><span class="s2">.&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>修改成</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">raise</span> <span class="s2">&quot;Pygments can&#39;t parse unknown language: </span><span class="si">#{</span><span class="n">lang</span><span class="si">}#{</span><span class="n">code</span><span class="si">}</span><span class="s2">.&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>可以使得<code>rake generate</code>编译时，把有问题的部分抛出来。</p>

<p>通过这个方法，我最终确定了我这里的情况是，用来标记 code block 的<code>```</code>符号和段落符号<code>&lt;/p&gt;</code>放在一起时产生某种错误（反正我是试不出怎么回事）。最后我用<code>~~~</code>代替了<code>```</code>（同样是 Markdown 标记代码的符号），终于没有编译错误了。</p>

<p><strong>2017/1/12 update:</strong> 更新到 python 3 之后，pygments 又出错了，不能 parse language。原因就是因为 pygments 只支持 python 2。<strong>解决方法：</strong> 用 anaconda 建立一个 python 2 的 environment:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">conda create -n py27 <span class="nv">python</span><span class="o">=</span>2.7 anaconda
</span></code></pre></td></tr></table></div></figure>

<p>安装好 python 2.7 后，激活这个 environment:</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">source </span>activate py27
</span></code></pre></td></tr></table></div></figure>

<p>这样就能正常编译了。</p>

<h4 id="section">后记</h4>

<p>写这篇文章的时候，遇到一个问题，就是不知道怎么让 Markdown 显示 <code>`</code>这个符号，后来发现了解决方法：</p>

<p>显示一个撇<code>`</code>，可以用两个撇来包裹</p>

<pre><code>`` ` ``(两撇，空格，一撇，空格，两撇)  
</code></pre>

<p>显示两个撇<code>``</code>，可以用三个撇来包裹</p>

<pre><code>``` `` ```(三撇，空格，两撇，空格，三撇)
</code></pre>

<p>以此类推。</p>

<h4 id="section-1">参考：</h4>

<p>构建：<a href="http://dreamrunner.org/blog/2014/03/09/octopresszhong-shi-yong-latexxie-shu-xue-gong-shi/">Octopress中使用Latex写数学公式</a><br />
修复：<a href="http://lvraikkonen.github.io/blog/2015/08/08/adding-support-for-math-formula/">配置Octopress支持LaTex数学公式</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[拥有你的个人博客]]></title>
    <link href="http://bobbielf2.github.io/blog/2016/08/06/yong-you-ni-de-ge-ren-bo-ke/"/>
    <updated>2016-08-06T15:57:31-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2016/08/06/yong-you-ni-de-ge-ren-bo-ke</id>
    <content type="html"><![CDATA[<p>每个人或多或少，某时某地，都想表达自己，最有收益的表达方法莫过于写 Blog！</p>

<p>搭建个人博客一直是我想做的事。之前试过在不同的地方栖息，包括 QQ 空间和 <a href="bobbielf2.weebly.com/index.html">weebly</a>，写的都是纯文字。后来想写带数学公式的文章，发觉只能把公式制作成图片插入文章，极其麻烦。然后我的好基友 Kuphrer 对我说：“没有原生latex不博客啊！”于是在他的指导下搭了一个 WordPress，又要另外弄存储空间又要备份什么的，弄得我这个网络小白晕头转向，终于还是没有坚持下去。</p>

<p>斗转星移，technology 一日千里，最近学习和编程的需要让我开始了解GitHub，发现这是一个大牛云集的宝地，而且只要项目是开源的就可以免费任意上传文件，而且没有广告，没有任何限制，简直就是搭建个人 Blog 的理想国。在网上搜了一下教程之后，我的博客搭建之旅开始了！</p>

<!--more-->

<h3 id="section">一、 预备知识</h3>

<h4 id="github">什么是 GitHub？</h4>

<p>Git 和 GitHub 并不是同一个东西。Git 是一个版本控制软件，而 GitHub 是一个公司，他家提供基于 git 的版本托管服务。因为 GitHub 上的开源项目的托管是<strong>免费的</strong>，全球最著名的开源社区和大公司的程序猿都聚集在这里。比如大公司都包括：</p>

<ul>
  <li><a href="https://github.com/google">Google</a></li>
  <li><a href="https://github.com/apple">Apple</a></li>
  <li><a href="https://github.com/facebook">Facebook</a></li>
  <li><a href="https://github.com/twitter">Twitter</a></li>
  <li><a href="https://github.com/microsoft">Microsoft</a></li>
  <li><a href="https://github.com/alibaba">阿里巴巴</a></li>
  <li>…</li>
</ul>

<p>开源项目包括</p>

<ul>
  <li><a href="https://github.com/torvalds/linux">Linux</a></li>
  <li><a href="https://github.com/apple/swift">Swift</a></li>
  <li><a href="https://github.com/ruby/ruby">Ruby</a></li>
  <li>…</li>
</ul>

<h4 id="octopress">什么是 Octopress</h4>

<p>Octopress 是一个基于 <strong>Jekyll</strong> 的<em>静态博客架构</em>（static blogging framework）。换句话说就是有个人使用 Jekyll 这个东西建了一个叫做 Octopress 的博客模版，我们可以修改它来建自己的博客，免去很多从头建设的技术上的麻烦。那 Jekyll 又是什么东东？</p>

<p>Jekyll 是一个对写作者友好的<em>网页模版系统</em>（web template system），能够处理文本文档生成<em>静态网站</em>（static site, 访问速度远远快于动态网站，因为动态网站是每次访问都重新生成的）。按它开发者的话来说，Jekyll 具有 “blog-aware（博客意识）” 的特点，意思是说它是为博客而生的，写作者用它来发布文章时，只需要处理好文字，而不用费神去处理数据库和网页内容管理之类的技术问题。当然，“好用”是基于不同人的体验的，对于我这种技术小白来说，学会 Jekyll 还是有点麻烦的，所以才要用 Octopress 这个现成模版。</p>

<blockquote>
  <p>Remark: Jekyll 是用 <a href="https://en.wikipedia.org/wiki/Ruby_(programming_language)">Ruby 编程语言</a>写出来的软件。
<br />
所有用 Ruby 写出来的软件都是用 <a href="https://en.wikipedia.org/wiki/RubyGems">RubyGems</a> 这个<em>软件包管理系统</em>（package manager）分发安装的。在 RubyGems 中，一个封装好的软件叫 Gem。RubyGems 的命令一般是用 <code>gem</code> 开头的。当需要安装不止一个软件甚至一些第三方软件包的时候，可以用 Bundler（另一个 Ruby 软件）来批量处理，命令以 <code>bundle</code> 开头，被执行的命令写在一个 Gemfile 里面。
<br />
Ruby 和其他编程语言一样可以执行脚本，叫做 Rakefile（类似 C 语言里面的 Makefile），方便编译运行 Ruby 程序。Rakefile 用 <code>rake</code> 执行（类似 Makefile 用 <code>make</code> 执行）。
<br />
综上所述，等下安装 Jekyll 和 Octopress 时首先要安装 Ruby， RubyGems 和 Bundler。</p>
</blockquote>

<h3 id="section-1">二、 安装博客的流程</h3>

<h4 id="git--ruby--rubygems">1. 安装 Git 和 Ruby (以及 RubyGems)</h4>

<p>如果用 Mac 的话有自带的 Git 和 Ruby 2.0，不需要安装。需要的话 git 可以从<a href="http://git-scm.com/downloads">这里</a>下载和安装。用 <code>ruby -v</code> 可以查询当前 Ruby 版本。新版的 Ruby 自带 RubyGems，所以也不用特别安装，如果没有的话可以在<a href="https://rubygems.org/">这里</a>安装。</p>

<h4 id="rbenv">1.1 安装 rbenv</h4>

<p>如果你的系统用 Mac OS，系统自带 Ruby，然而这个 Ruby 的目录（<code>/Library/Ruby/Gems/</code>）你是没有权限直接修改的，用<code>sudo</code>也不行。所以需要一个“虚拟机”：安装另一个版本的 Ruby 在虚拟机上就可以自由修改了。主流的 Ruby 虚拟机（又叫版本管理器，Ruby Version Manager）有 rbenv 和 RVM。</p>

<p>我用的是 rbenv。安装方法极其简单，用 Mac 自带的软件管理器 Homebrew 来安装，命令是 <code>brew</code></p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">brew update
</span><span class="line">brew install rbenv
</span></code></pre></td></tr></table></div></figure>

<p>安装好了之后运行</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rbenv init
</span></code></pre></td></tr></table></div></figure>

<p>系统会返回指令，教你怎么配置 rbenv。具体来说就是打开 <code>~/.bash_profile</code> 文件，在里面加入一行</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">eval</span> <span class="s2">&quot;$(rbenv init -)&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>重启 terminal 或者执行 <code>source ~/.bash_profile</code> 马上生效。</p>

<h4 id="octopress-1">2. 安装 Octopress</h4>

<p>现在开始建立 Octopress！ 首先为你的网站文档新建一个文件夹，假设是 <code>/Users/YOURNAME/Sites</code>，然后把 Octopress 的文档用 git 下载到里面：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> ~/Sites
</span><span class="line">git clone git://github.com/imathis/octopress.git octopress
</span><span class="line"><span class="nb">cd </span>octopress
</span></code></pre></td></tr></table></div></figure>

<p>有了 rbenv 一切都简单了，首先用 Bundler 安装 octopress 所依赖的其他软件：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">gem install bundler
</span><span class="line">rbenv rehash <span class="c"># 更新 rbenv 以便之后使用 bundle 命令</span>
</span><span class="line">bundle install
</span></code></pre></td></tr></table></div></figure>

<blockquote>
  <p>如果你想知道最后一步<code>bundle install</code>做了什么，可以看看<code>Gemfile</code>文件，都安装了什么软件</p>
</blockquote>

<p>然后用 Rake（也就是 Ruby 的 Make）来安装 Octopress 的默认主题：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake install
</span></code></pre></td></tr></table></div></figure>

<h4 id="github-">3. 关联 GitHub， 部署博客</h4>

<p>接着去 <a href="https://github.com/new">GitHub</a> 建一个新的 repository，名字要起成这样 <code>USERNAME.github.io</code>，比如我的就是 <code>bobbielf2.github.io</code>。然后用以下命令来建立 Octopress 和 GitHub 的连接：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>

<p>执行这个命令，会让你输入 Repository url，把刚在 GitHub 建的 repository 地址输进去就好了，以下两种格式任选一个都可以</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">https://github.com/USERNAME/USERNAME.github.io <span class="c">#格式1  </span>
</span><span class="line">git@github.com:USERNAME/USERNAME.github.io.git <span class="c">#格式2  </span>
</span></code></pre></td></tr></table></div></figure>

<p>例如我就输入</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">https://github.com/bobbielf2/bobbielf2.github.io
</span></code></pre></td></tr></table></div></figure>

<p>接着按照提示输入密码之类的，就完成和 GitHub 的关联了，接着可以生成和部署网站：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake generate
</span><span class="line">rake deploy
</span></code></pre></td></tr></table></div></figure>

<p>当然不要忘记备份博客，把文件同步 push 到 GitHub 上</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git add .
</span><span class="line">git commit -m <span class="s1">&#39;create blog&#39;</span>
</span><span class="line">git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>

<p>现在可以去你的 GitHub 网址看自己的网页了，比如我的就是 <a href="https://bobbielf2.github.io/">https://bobbielf2.github.io/</a>。</p>

<h4 id="section-2">4. 配置博客</h4>

<p>接着可以修改网页配置，位置在 <code>octopress/_config.yml</code>。</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span>                <span class="c1"># For rewriting urls for RSS, etc</span>
</span><span class="line"><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span>              <span class="c1"># Used in the header and title tags</span>
</span><span class="line"><span class="l-Scalar-Plain">subtitle</span><span class="p-Indicator">:</span>           <span class="c1"># A description used in the header</span>
</span><span class="line"><span class="l-Scalar-Plain">author</span><span class="p-Indicator">:</span>             <span class="c1"># Your name, for RSS, Copyright, Metadata</span>
</span><span class="line"><span class="l-Scalar-Plain">simple_search</span><span class="p-Indicator">:</span>      <span class="c1"># Search engine for simple site search</span>
</span><span class="line"><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span>        <span class="c1"># A default meta description for your site</span>
</span><span class="line"><span class="l-Scalar-Plain">date_format</span><span class="p-Indicator">:</span>        <span class="c1"># Format dates using Ruby&#39;s date strftime syntax</span>
</span><span class="line"><span class="l-Scalar-Plain">subscribe_rss</span><span class="p-Indicator">:</span>      <span class="c1"># Url for your blog&#39;s feed, defauts to /atom.xml</span>
</span><span class="line"><span class="l-Scalar-Plain">subscribe_email</span><span class="p-Indicator">:</span>    <span class="c1"># Url to subscribe by email (service required)</span>
</span><span class="line"><span class="l-Scalar-Plain">category_feeds</span><span class="p-Indicator">:</span>     <span class="c1"># Enable per category RSS feeds (defaults to false in 2.1)</span>
</span><span class="line"><span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span>              <span class="c1"># Email address for the RSS feed if you want it.</span>
</span></code></pre></td></tr></table></div></figure>

<p>编辑完成后再重新 generate 和 deploy 一次</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake generate
</span><span class="line">rake deploy
</span><span class="line"><span class="c"># 别忘了用 git 备份</span>
</span><span class="line">git add .
</span><span class="line">git commit -m <span class="s2">&quot;settings&quot;</span>
</span><span class="line">git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>

<blockquote>
  <p>Remark: 每次 commit 来确认改变之前，都要 add 来更新索引。最终 push 来把 source 里的文件都备份到 GitHub 上。所以 commit 之前可以 add 很多次，push 之前也可以 commit 很多次。</p>
</blockquote>

<h3 id="section-3">三、 写博客</h3>

<p>终于！搭建好博客，就可以开始写文章了！GitHub 上的文章严重推荐用 <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a> 写。</p>

<blockquote>
  <p>题外话：Markdown 是当今很多网络写作者和程序员最爱用的格式。这种语言就一个字：简单！纯文本编辑，用简单的额外符号设置文字格式，没有像 MS Word 或者 Apple Pages 那样，不同版本不同平台就打不开文档的问题；然而又基本没什么学习成本，就能写出漂亮的排版。推荐看这个速成：
<br />
<a href="http://www.jianshu.com/p/q81RER">献给写作者的 Markdown 新手指南</a>。</p>
</blockquote>

<h4 id="section-4">1. 创建新的文章</h4>

<p>用这个命令生成新的 blog article</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake new_post<span class="o">[</span><span class="s1">&#39;title&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>生成的 Markdown 文件在 <code>octopress/source/_posts</code> 目录下</p>

<h4 id="section-5">2. 编辑和发布文章</h4>

<p>用 Markdown 语言写好文章，保存后可以预览： 运行 <code>rake preview </code>，然后在浏览器访问 <a href="http://localhost:4000/">http://localhost:4000/</a></p>

<p>然后发布：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake generate
</span><span class="line">git add .
</span><span class="line">git commit -m <span class="s2">&quot;new post&quot;</span>
</span><span class="line">git push origin <span class="nb">source</span>
</span><span class="line">rake deploy
</span></code></pre></td></tr></table></div></figure>

<h3 id="section-6">四、 使用不同的主题。</h3>

<p>网上有很多人制作不同的网页主题（theme）。举例安装第三方主题：</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#这里以安装allenhsu定制的greyshade主题为例，原作者是shashankmehta</span>
</span><span class="line">git clone git@github.com:allenhsu/greyshade.git .themes/greyshade
</span><span class="line"><span class="c">#Substitue &#39;color&#39; with your highlight color</span>
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;\$greyshade: color;&quot;</span> &gt;&gt; sass/custom/_colors.scss
</span><span class="line">rake <span class="s2">&quot;install[greyshade]&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>安装完再次更新</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake generate
</span><span class="line">git add .
</span><span class="line">git commit -m <span class="s2">&quot;theme&quot;</span>
</span><span class="line">git push origin <span class="nb">source</span>
</span><span class="line">rake deploy
</span></code></pre></td></tr></table></div></figure>

<p>安装完 greyshade，你会发现左方导航栏上的 About me 是指向原作者的主页的，可以这样改回来：在 <code>/source/_includes/custom/navigation.html</code> 中记录了导航栏的内容</p>

<figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Blog<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class="line"><span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://about.me/shashankmehta&quot;</span><span class="nt">&gt;</span>About<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class="line"><span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>Archives<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>把里面的网址 <code>http://about.me/shashankmehta</code> 改成别的东西就好了。</p>

<h4 id="section-7">后续参考：</h4>

<p><a href="http://zwgithub.github.io/2016/06/14/%E7%94%A8Octopress%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84github%E5%8D%9A%E5%AE%A2/">设置头像，文章以摘要形式显示，评论功能</a></p>

<p><a href="https://shengmingzhiqing.com/blog/octopress-tutorials-toc.html/">生命之氢 - Octopress 教程目录</a></p>

<p><a href="http://blog.pnkfx.org/blog/2015/12/18/fixing-octopress-table-rendering/">修复 Octopress 不能显示漂亮的 markdown 表格的问题</a></p>
]]></content>
  </entry>
  
</feed>
