<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technology | Bobbie's Blog]]></title>
  <link href="http://bobbielf2.github.io/blog/categories/technology/atom.xml" rel="self"/>
  <link href="http://bobbielf2.github.io/"/>
  <updated>2017-05-19T15:21:46-04:00</updated>
  <id>http://bobbielf2.github.io/</id>
  <author>
    <name><![CDATA[Bowei "Bobbie" Wu .]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Preserve the Table of Contents When Converting a Book From Djvu to PDF]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/04/11/preserve-the-table-of-contents-when-converting-a-book-from-djvu-to-pdf/"/>
    <updated>2017-04-11T20:47:57-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/04/11/preserve-the-table-of-contents-when-converting-a-book-from-djvu-to-pdf</id>
    <content type="html"><![CDATA[<p>There are many readily available softwares (e.g. <a href="https://itunes.apple.com/us/app/djvu2pdf/id629039447?mt=12">DjVu2PDF</a>) for converting a book from <code>.djvu</code> to <code>.pdf</code> format, but none of those will preserve the table of contents in the output PDF.</p>

<!--more-->

<p>Having a table of contents is very handy. For example when viewing a book in Preview, the table of contents works like a multi-level bookmark, you can simply click on any link in the sidebar to jump to any chapter/section of the book.</p>

<p><img src="/images/blog_figures/toc_in_preview.png" width="600"></p>

<p>So I Googled and found <a href="https://superuser.com/a/915399">this quetion</a> on StackExchange that asked exactly my question. Here is a summary of the accepted answer on how you can preserve (or more precisely, create) the table of contents in a PDF converted from Djvu.</p>

<h2 id="preliminary">1. Preliminary</h2>

<p>You will need to install <a href="https://www.pdflabs.com/tools/pdftk-server/">pdftk</a> (part of PDFtk Server) and <a href="https://sourceforge.net/projects/djvu/">djvused</a> (part of DjVuLibre)</p>

<p><strong>Note 1:</strong> pdftk for Mac OS X 10.11 and above. I found in <a href="http://stackoverflow.com/a/33248310/4608899">this answer</a> on Stack Overflow that the developer of PDFtk provides an installer for PDFtk Server on OS X 10.11 and above. It is kind of strange that the <a href="https://www.pdflabs.com/tools/pdftk-server/">official website</a> only provides the installer for OS X up to 10.8. (This older version can be installed, but won’t run. When you type pdftk commands in the Terminal, it will make you wait forever.)</p>

<p><strong>Note 2:</strong> About djvused command line setup on OS X. After installing DjVuLibre, in order to use djvused in command line, you need to run</p>

<p><code>bash
eval '/Applications/DjView.app/Contents/setpath.sh'
</code></p>

<p>If this doesn’t add the correct path, you can also manually add the following line into <code>~/.bash_profile</code></p>

<p><code>vim
PATH="/Applications/DjView.app/Contents/bin:${PATH}"
</code></p>

<h2 id="convert-the-table-of-contents">2. Convert the Table of Contents</h2>

<p>(Note: all materials in this section follow closely the <a href="https://superuser.com/a/915399">original answer</a> on StackExchange, except I coded a very simple python program in Step 2.)</p>

<p>Suppose now you have converted <code>book.djvu</code> into <code>book.pdf</code>, the former has a table of contents but the latter doesn’t.</p>

<h3 id="step-1-extract-djvu-outline">Step 1. extract Djvu outline</h3>

<p>Use the following command to extract the table of contents from <code>book.djvu</code></p>

<p><code>bash
djvused "book.djvu" -e 'print-outline' &gt; bmarks.out
</code></p>

<p>The output file <code>bmarks.out</code> lists the table of contents in a serialized tree format using <a href="https://en.wikipedia.org/wiki/S-expression">SEXPR</a>, which can be summarized as:</p>

<p><code>
file ::= (bookmarks
           &lt;bookmark&gt;*)
bookmark ::= (name
               page
               &lt;bookmark&gt;*)
name ::= "&lt;character&gt;*"
page ::= "#&lt;digit&gt;+"
</code></p>

<p>Notice that under this format, you can append a “child bookmark” inside a “parent bookmark”. For example, a <code>bmarks.out</code> may look like this</p>

<p><code>
(bookmarks
  ("bmark1"
    "#1")
  ("bmark2"
    "#5"
    ("bmark2subbmark1"
      "#6")
    ("bmark2subbmark2"
      "#7"))
  ("bmark3"
    "#9"
    ...))
</code></p>

<h3 id="step-2-translate-the-djvu-outline-to-pdf-metadata-format">Step 2. translate the Djvu outline to PDF metadata format</h3>

<p>Now, Djvu and PDF store the bookmark data in different formats. While Djvu uses SEXPR, PDF uses metadata, which looks like this:</p>

<p><code>
file ::= &lt;entry&gt;*
entry ::= BookmarkBegin
          BookmarkTitle: &lt;title&gt;
          BookmarkLevel: &lt;number&gt;
          BookmarkPageNumber: &lt;number&gt;
title ::= &lt;character&gt;*
</code></p>

<p>The example in Step 1 when translated into PDF metadata will look like</p>

<p><code>
BookmarkBegin
BookmarkTitle: bmark1
BookmarkLevel: 1
BookmarkPageNumber: 1
BookmarkBegin
BookmarkTitle: bmark2
BookmarkLevel: 1
BookmarkPageNumber: 5
BookmarkBegin
BookmarkTitle: bmark2subbmark1
BookmarkLevel: 2
BookmarkPageNumber: 6
BookmarkBegin
BookmarkTitle: bmark2subbmark2
BookmarkLevel: 2
BookmarkPageNumber: 7
BookmarkBegin
BookmarkTitle: bmark3
BookmarkLevel: 1
BookmarkPageNumber: 9
...
</code></p>

<p>It is a fun exercise to work out the correspondence of the two formats.</p>

<p><strong>Note:</strong> I have written a python program to automatically convert the Djvu SEXPR <code>bmarks.out</code> into the PDF metadata form and output as <code>bmarks2.txt</code></p>

<p><figure class='code'><figcaption><span>Convert Djvu outline into PDF metadata (bmarkDjvu2pdf.py)</span> <a href='/downloads/code/bmarkDjvu2pdf.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#! /usr/bin/env python</span>
</span><span class='line'><span class="n">metadata</span> <span class="o">=</span> <span class="s">&#39;&#39;</span> <span class="c"># string to be written into PDF metadata</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;bmarks.out&quot;</span><span class="p">)</span> <span class="c"># open input file: djvu outline</span>
</span><span class='line'><span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;(bookmarks&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="n">level</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">level</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">):</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;(&quot;&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">level</span> <span class="o">=</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">metadata</span> <span class="o">=</span> <span class="n">metadata</span> <span class="o">+</span> <span class="s">&quot;BookmarkBegin</span><span class="se">\n</span><span class="s">BookmarkTitle: &quot;</span><span class="o">+</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;(&quot;&#39;</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">BookmarkLevel: &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">level</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>        <span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">line</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&#39;)&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">level</span> <span class="o">=</span> <span class="n">level</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>        <span class="n">metadata</span> <span class="o">=</span> <span class="n">metadata</span> <span class="o">+</span> <span class="s">&quot;BookmarkPageNumber: &quot;</span><span class="o">+</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;&quot;#&#39;</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">line</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&#39;)&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">level</span> <span class="o">=</span> <span class="n">level</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;bmarks2.txt&quot;</span><span class="p">,</span><span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="c"># output file: for PDF metadata</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">metadata</span><span class="p">)</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="step-3-modify-pdf-metadata-to-include-the-bookmark-data">Step 3. modify PDF metadata to include the bookmark data</h3>

<p>Extract PDF metadata with this command:</p>

<p><code>bash
pdftk "book.pdf" dump_data &gt; pdfmetadata.out
</code></p>

<p>Open the <code>pdfmetadata.out</code> file, and find the line that begins with <code>NumberOfPages:</code>, and insert your list of bookmarks after this line. Save the new file as <code>pdfmetadata.in</code>. Now run this command:</p>

<p><code>bash
pdftk "book.pdf" update_info "pdfmetadata.in" output newbook.pdf
</code></p>

<p>The output <code>newbook.pdf</code> is your new <code>book.pdf</code> equiped with a convenient table of contents. Happy reading!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beamer Video Tutorial]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/01/12/beamer-video-tutorial/"/>
    <updated>2017-01-12T16:04:51-05:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/01/12/beamer-video-tutorial</id>
    <content type="html"><![CDATA[<p>As a researcher, I often need to make presentation slides, and want to embed movies in my slides for better illustrations. After doing a little research, I converged to the solution described in this article.</p>

<!--more-->

<p>If you want to benefit from this tutorial, here are two most important assumptions:</p>

<p><strong>1</strong>. Slides are made with the <a href="https://en.wikipedia.org/wiki/Beamer_(LaTeX)"><strong>LaTeX beamer</strong></a> package.<br />
<strong>2</strong>. Movie format is assumed to be <code>.flv</code> (because I can’t play <code>.mp4</code> movies on my Mac).</p>

<p>Accordingly, this tutorial has two parts:</p>

<p><strong>1</strong>. How to embed <code>.flv</code> in beamer.<br />
<strong>2</strong>. How to convert movie format to <code>.flv</code>.</p>

<h2 id="part-i-embed-flv-movies-in-latex">Part I: Embed <code>.flv</code> movies in LaTeX</h2>

<p><strong>(Update: I have found a better option, please ignore this part and jump to Part III)</strong></p>

<p><strong>Step 1</strong>: Download the <code>flashmovie.sty</code> package file from <a href="http://tug.ctan.org/tex-archive/macros/latex/contrib/flashmovie/">CTAN</a></p>

<blockquote>
  <p>Remark: The <code>flashmovie.sty</code> package is written by Professor Timo Hartmann from TU Berlin.</p>
</blockquote>

<p><strong>Step 2</strong>: Download the <a href="https://ia601703.us.archive.org/8/items/JwPlayerFiles/player.swf"><code>player.swf</code></a> file from <a href="https://archive.org/details/JwPlayerFiles">https://archive.org/details/JwPlayerFiles</a>. This file is needed by the JW Player engine in order to correctly compile the <code>.tex</code> file.</p>

<p><strong>Step 3</strong>: Embed the <code>.flv</code> movie in your beamer. Here is an example <code>.tex</code> file.</p>

<p><code>latex 
\RequirePackage{flashmovie}
\documentclass{beamer}   
\begin{document}
\begin{frame}
\frametitle{embed a movie}
\begin{center}
\flashmovie[width=0.7\textwidth,engine=jw-player,auto=0,image=POSTER.jpg,controlbar=1,loop=0]{YOUR_MOVIE.flv}
\end{center}    
\end{frame}
\end{document}
</code></p>

<p>Here <code>YOUR_MOVIE.flv</code> is the flv movie you want to embed, and <code>POSTER.jpg</code> is the image shown before the movie is played (note that the poster image is optional).</p>

<p><strong>Step 4</strong>: Compile the <code>.tex</code> file into PDF with all the neccessary files in the same directory (i.e. <code>flashmovie.sty</code>, <code>player.swf</code>, <code>YOUR_MOVIE.flv</code>, <code>POSTER.jpg</code>). Then open the PDF file using <strong>Adobe Reader 9 or above</strong></p>

<blockquote>
  <p>Remark:<br />
1. more options of the <code>\flashmovie</code> command can be found in the <code>flashmovie.sty</code> file.<br />
2. there are more different player options for <code>engine</code> other than the JW Player. For example, you may instead set <code>engine=flv-player</code> which uses an open-source player from <a href="http://flv-player.net">http://flv-player.net</a>. For this player another <code>.swf</code> file, <a href="http://flv-player.net/medias/player_flv_maxi.swf"><code>player_flv_maxi.swf</code></a>, is needed.</p>
</blockquote>

<h2 id="part-ii-convert-movie-formats-to-flv">Part II: Convert movie formats to <code>.flv</code></h2>

<p>The software used to convert movie formats is <a href="https://ffmpeg.org/"><strong>FFmpeg</strong></a>. This is a free and open-source software.</p>

<p>Assuming you are using Mac OSX like me, here are the steps:</p>

<p><strong>1</strong>. Make sure you installed <strong>Homebrew</strong> on your Mac, for details go to <a href="http://brew.sh/">http://brew.sh/</a>.<br />
<strong>2</strong>. Install <strong>ffmpeg</strong> by running <code>brew install ffmpeg</code> in command line.<br />
<strong>3</strong>. Convert movie formats using the <code>ffmpeg</code> command.</p>

<blockquote>
  <p>An explanation of the <code>ffmpeg</code> options can be found <a href="https://www.virag.si/2012/01/web-video-encoding-tutorial-with-ffmpeg-0-9/">here</a>. (Also a helpful article if your are using Windows or Linux.)</p>
</blockquote>

<p>An example command that I used to convert an <code>.mp4</code> file to <code>.flv</code>:</p>

<p><code>bash 
ffmpeg -i input_file.mp4 -c:v libx264 -vf scale=-1:270 -ar 22050 output_file.flv
</code></p>

<p>Some explanation of the command</p>

<ul>
  <li><strong><code>-i input_file.mp4</code></strong>: specify the input file</li>
  <li><strong><code>-c:v libx264</code></strong>: set video codec to be libx264</li>
  <li><strong><code>-vf scale=-1:270</code></strong>: set resolution of output file, <code>-1</code> means to maintain aspect ratio, <code>270</code> indicates the vertical resolution is 270p. (1080p is Full HD.) If not specified, resolution remains unchanged.</li>
  <li><strong><code>-ar 22050</code></strong>: set the audio sampling frequency. If don’t want any sound, use <code>-an</code> flag instead.</li>
  <li><strong><code>output_file.flv</code></strong>: specify output file and format</li>
</ul>

<h2 id="part-iii-embed-flv-movies-in-latex-to-replace-part-i">Part III: Embed <code>.flv</code> movies in LaTeX (To replace Part I)</h2>

<p><strong>(Updated 1/19/17)</strong></p>

<p>I have used the following movie embedding option a couple times before I posted this article, but I didn’t summarize it back then and forgot about it. Now memory strikes back.</p>

<p>The <a href="https://www.ctan.org/pkg/media9?lang=en"><code>media9</code> package</a> is the best option so far for embedding movies in beamer. Here is an example <code>.tex</code> file to do it:</p>

<p><code>latex 
\documentclass{beamer}   
\usepackage{media9}
\usepackage{graphicx}
\begin{document}
\begin{frame}{embed a movie}
\begin{center}
\includemedia[
	width=0.4\linewidth,height=0.3\linewidth,
	activate=pageopen,
	addresource=YOUR_MOVIE.flv,
	flashvars={
	   source=YOUR_MOVIE.flv
	}
]{\includegraphics[height=0.3\linewidth]{POSTER.jpg}{VPlayer9.swf}
\end{center}
\end{frame}
\end{document}
</code></p>

<p>A couple remarks about this example:</p>

<p><strong>1.</strong> Compile the <code>.tex</code> file into <code>.pdf</code> with all neccesary files (<code>YOUR_MOVIE.flv</code>, <code>POSTER.jpg</code>) in the same folder<br />
<strong>2.</strong> <code>POSTER.jpg</code> is the image displayed before <code>YOUR_MOVIE.flv</code> is played, and is included using the <code>\includegraphics</code> command from the <code>graphicx</code> package. The poster image is optional, you may intead use a <code>{}</code> (before the <code>{VPlayer9.swf}</code>) to leave it blank.<br />
<strong>3.</strong> <code>VPlayer9.swf</code> is the video player. You may use a fancier player <code>StrobeMediaPlayback.swf</code> and correspondingly in the <code>flashvars</code> options change <code>source=...</code> into <code>src=...</code>. Or if you are embedding audio, use <code>APlayer9.swf</code>.<br />
<strong>4.</strong> Embedding YouTube video would be a piece of cake with this package, here is an example given in the official documentation:</p>

<p><code>latex 
\includemedia[
  width=0.6\linewidth,height=0.3375\linewidth, % 16:9
  activate=pageopen,
  flashvars={
    modestbranding=1 % no YT logo in control bar
    &amp;autohide=1 % controlbar autohide
    &amp;showinfo=0 % no title and other info before start
    &amp;rel=0      % no related videos after end
  }
]{}{http://www.youtube.com/v/r382kfkqAF4?rel=0}
</code></p>

<p><strong>5.</strong> Go to the <a href="https://www.ctan.org/pkg/media9?lang=en">CTAN</a> page to find the complete <a href="http://mirrors.ctan.org/macros/latex/contrib/media9/doc/media9.pdf">documentation</a> for <code>media9</code>.</p>

<p>Hope this is helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[管理引用文献]]></title>
    <link href="http://bobbielf2.github.io/blog/2016/08/28/guan-li-yin-yong-wen-xian/"/>
    <updated>2016-08-28T00:31:02-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2016/08/28/guan-li-yin-yong-wen-xian</id>
    <content type="html"><![CDATA[<p>管理文献对于做研究或者各种技术工程师都是很重要的事情。需要资料时要快速查得到，运用资料时要给出出处，这就要平时把文献资料整理得井井有条；尤其当文献数量达到上百甚至上千条，没有有效的管理方法简直寸步难行。</p>

<p>于是专业人员都会用到软件来管理文献。比如文章 <a href="http://pne.people.si.umich.edu/PDF/howtoread.pdf">How to read a book</a> 就提到一些常用的文献管理软件(Reference Management Software)。</p>

<h4 id="section">市面上的文献管理软件</h4>

<p>个人测试过以下这几个最流行的软件</p>

<ul>
  <li>EndNote：据说挺好用，但是（1）需要花稍多一点的时间学习使用，（2）收费，差不多 80 大洋。网络 basic 版免费，但是试用了一下并不方便，也有导入数量限制。</li>
  <li>Papers：据说很好用，但是收费，学生版差不多 50 大洋。iPad 版免费，但是只用 iPad 版而没有桌面版也是很不方便。</li>
  <li>Bookends：优势是可以找 Amazon 上的书，不用费神想到底要连哪个出版商的数据库。</li>
  <li>Mendeley：暂时觉得最好用的一个。免费。可以把 PDF 文献原文拖入软件窗口，就会帮你自动识别 citation 信息，虽然并不总是准确，但如果知道 DOI 的话可以自动更正。在 mendeley 中可以连接到本地 PDF，并且直接打开做笔记挺方便。</li>
  <li>BibDesk：神器，免费，原生支持 <a href="http://www.bibtex.org/">BibTeX</a> (BibTeX 是基于 <a href="https://en.wikipedia.org/wiki/LaTeX">LaTeX</a> 的文献管理软件)。适合习惯用 LaTeX 写论文的人 (理工科写论文基本标配用 LaTeX )。就用它了！</li>
</ul>

<blockquote>
  <p>Remark: 如果不怎么用 LaTeX 写论文的话，Mendeley 就很好用。以前大部分人都用 Mendeley，现在很多科研人员不用的原因是因为“洁癖”： Mendeley 被 Elsevier (爱思唯尔出版社) 收购了，Elsevier 在学术界变得“臭名昭著”可以参考 <a href="https://en.wikipedia.org/wiki/The_Cost_of_Knowledge">Wikipedia: The Cost of Knowledge</a>，中文参考 <a href="http://news.sciencenet.cn/htmlnews/2012/7/266578.shtm">科学网：逾万科学家联名抵制爱思唯尔</a>。</p>
</blockquote>

<!--more-->

<h4 id="bibdesk">BibDesk</h4>

<p>这里有一篇介绍 <a href="http://www.mit.edu/people/lucylim/BibDesk.html">为什么要用 BibDesk</a> 的文章，作者是 NASA 的物理科学家 Lucy F. G. Lim。主要就是上面提到的三个优点：</p>

<ul>
  <li>可以做你想做的一切</li>
  <li>原生支持 BibTeX</li>
  <li>免费</li>
</ul>

<p>在 BibDesk 新增文献引用信息的条目很简单：只要找到文章的 BibTeX 形式的引用信息，command-C 复制到剪贴版，然后在 BibDesk 窗口按 alt-command-L 就自动把剪贴版的信息生成新的条目了。</p>

<h4 id="ads--arxiv">两个很有用的在线数据库：ADS 和 arXiv</h4>

<p>录入文献的引用信息，是整理文献的第一步，也是最机械最烦人的一步。如果有现成整理好的信息直接导入成 BibTeX 那该多好！幸好大家都是这么想的，you are not alone。早有牛人意识好这个需求，建立了收集文献信息的在线数据库，最著名的有 ADS 和 arXiv。配合 Google Scholar 的强大搜索功能，几乎所向披靡。</p>

<ul>
  <li><a href="http://adswww.harvard.edu/">ADS (Astrophysics Data System)</a> 是由美国宇航局（NASA）开发、哈佛大学（Harvard）天体物理中心运营的在线数据库，上面保存了大量的 astronomy 和 physics 的科研论文。论文不一定是同行评审过的。论文的 abstract 和 citation 信息都完整可查，而且几乎所有文章原文都可以 GIF 或者 PDF 的形式获取。</li>
  <li><a href="http://arxiv.org/">arXiv.org</a> 是由物理学家 Paul Ginsparg 开发、现由康奈尔大学（Cornell）运营的在线数据库，保存科研论文的预印本（preprint），涉及的学科包括 mathematics, physics, astronomy, computer science, quantitative biology, statistics, quantitative finance。所有文章的原文都可以 PDF 形式获取，论文的 abstract 和 citation 信息都完整可查。</li>
  <li><a href="https://scholar.google.com/">Google Scholar</a> 可以搜索到包括上面提到的数据库在内的文献，而且自带把 Citation 输出成包括 BibTeX 在内的多种格式的功能。</li>
</ul>

<blockquote>
  <p>Remark: 另外也要善用学校图书馆。各个大学的图书馆都有统一订阅了主流出版社的在线数据库，学生可以免费获得大量文章和书籍。</p>
</blockquote>

<h4 id="adsbibdesk">再安利一个软件：adsbibdesk</h4>

<p>这里再介绍多一种方式：用 <a href="https://pypi.python.org/pypi/adsbibdesk">adsbibdesk</a> 软件导入 citation 到 BibDesk。顾名思义 adsbibdesk 可以把 ADS 或者 arXiv 上的数据自动整理导入到 BibDesk 中。</p>

<p>使用方法很简单，按照 <a href="https://pypi.python.org/pypi/adsbibdesk">adsbibdesk</a> 主页指示安装好软件之后，就可以用 <code>adsbibdesk</code> 命令导入信息了。</p>

<p>导入时，在 BibDesk 打开想要修改的 .bib 文档，然后用 <code>adsbibdesk</code> 命令导入信息。用这个命令需要找到文章的 <strong>ADS 识别码</strong> (ADS bibcode)，在命令行运行</p>

<p><code>batch
adsbibdesk 1998ApJ...500..525S
</code></p>

<p>或者找到 <strong>arXiv 识别码</strong> （arXiv identifier），在命令行运行</p>

<p><code>batch
adsbibdesk 1401.3068
</code></p>

<p>或者找到 <strong>DOI 码</strong>（Digital Object Identifier），在命令行运行</p>

<p><code>batch
adsbibdesk 10.1137/S0036144502417715
</code></p>

<p>都可以把 citation 信息添加到 .bib 文档。</p>

<h4 id="section-1">后记</h4>

<p>网上还有很多比较不同管理软件的文章，比如</p>

<ul>
  <li>Wikipedia: <a href="https://en.wikipedia.org/wiki/Comparison_of_reference_management_software">Comparison of reference management software</a></li>
  <li>密大图书馆 Research Guides: <a href="http://guides.lib.umich.edu/citationmanagementoptions">Citation management software</a></li>
  <li>数据科学家 Max Masnick 的博客：
<a href="https://www.maxmasnick.com/2015/02/28/reference-managers/">Thoughts on Reference Management Software</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写数学 Blog]]></title>
    <link href="http://bobbielf2.github.io/blog/2016/08/06/shu-xue-blog/"/>
    <updated>2016-08-06T19:11:58-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2016/08/06/shu-xue-blog</id>
    <content type="html"><![CDATA[<p><a href="/blog/2016/08/06/yong-you-ni-de-ge-ren-bo-ke/index.html">上一篇文章</a>讲了如何用 Octopress 在 GitHub 上搭建个人主页，今天这篇写给可爱的科研狗们，介绍怎么样让网页兼容 LaTeX！首先看看效果：</p>

<ul>
  <li>LaTeX 行间模式（displayed math）</li>
</ul>

<p><code>latex latex
$$
\begin{align}
\mbox{欧拉公式：} &amp; e^{i\pi} + 1 = 0\\
\mbox{牛顿公式：} &amp; x_{i+1} = \frac{1}{2}\left(x_i+\frac{2}{x_i}\right)
\end{align}
$$
</code></p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\mbox{欧拉公式：} & e^{i\pi} + 1 = 0\\
\mbox{牛顿公式：} & x_{i+1} = \frac{1}{2}\left(x_i+\frac{2}{x_i}\right)
\end{align} %]]&gt;</script>

<!--more-->

<ul>
  <li>LaTeX 内嵌模式（inline math）</li>
</ul>

<p><code>latex latex
爱因斯坦说过：$E = mc^2$
</code></p>

<p>爱因斯坦说过：$E = mc^2$</p>

<h4 id="markdown-kramdown--mathjax">让 Markdown 显示数学公式：kramdown 和 MathJax</h4>

<h5 id="kramdown--rdiscount">1, 用 kramdown 代替 rdiscount</h5>

<p>Octopress 中默认的 rdiscount 不支持把 Markdown 中的 LaTeX 公式呈现出来，所以要换成 <a href="http://kramdown.gettalong.org/">kramdown</a>（这个 Markdown 转换器也是开源的，他家号称全球最快）。</p>

<ul>
  <li>安装 kramdown（假设你已经有 rbenv，参考<a href="/blog/2016/08/06/yong-you-ni-de-ge-ren-bo-ke/index.html">上一篇文章</a> ），运行命令</li>
</ul>

<p><code>bash
gem install kramdown
</code></p>

<ul>
  <li>修改 Octopress 的<code>_config.yml</code>配置文件，把全部<code>rdiscount</code>都改成<code>kramdown</code></li>
  <li>修改 Octopress 的<code>Gemfile</code>，把里面的<code>gem 'rdiscount', '~&gt; 2.0'</code>改成<code>gem 'kramdown'</code></li>
</ul>

<h4 id="mathjax">2, 配置 MathJax</h4>

<p>在<code>/source/_includes/custom/head.html</code>文件里添加</p>

<p><code>html head.html
&lt;!-- mathjax config similar to math.stackexchange --&gt;
&lt;script type="text/x-mathjax-config"&gt;
MathJax.Hub.Config({
  jax: ["input/TeX", "output/HTML-CSS"],
  tex2jax: {
    inlineMath: [ ['$', '$'] ],
    displayMath: [ ['$$', '$$']],
    processEscapes: true,
    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
  },
  messageStyle: "none",
  "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] }
});
&lt;/script&gt;
&lt;script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"&gt;&lt;/script&gt;
</code></p>

<h4 id="mathjax--bug">3, 修复 MathJax 在页面中右键变白屏的 bug</h4>

<p>修改 Octopress 的<code>/sass/base/_theme.scss</code>文件，把代码中的</p>

<p><code>sass _theme.scss
//...
&gt; div {
     background: $sidebar-bg $noise-bg;
     border-bottom: 1px solid $page-border-bottom;
     &gt; div {
//...
</code></p>

<p>加入<code>#main</code>，变成</p>

<p><code>sass sass
//...
&gt; div#main {
     background: $sidebar-bg $noise-bg;
     border-bottom: 1px solid $page-border-bottom;
     &gt; div {
//...
</code></p>

<h4 id="pygments-">4, 修复 Pygments 的问题</h4>

<p>这个是新版本出现的问题。使用 kramdown 之后，以前写的博客突然编译不出来了；当你运行 rake generate 时候，会报错：</p>

<p><code>
Error: Pygments can't parse unknown language: &lt;/p&gt;
</code></p>

<p>原因是最新版的 Pygments 这个插件对于 Markdown 的书写要求更严格了。</p>

<p>为了找出原来，可以修改 Pygments 的报错代码，在<code>/plugins/pygments_code.rb</code>文件中:</p>

<p><code>ruby pygments_code.rb
def self.pygments(code, lang)
    if defined?(PYGMENTS_CACHE_DIR)
      path = File.join(PYGMENTS_CACHE_DIR, "#{lang}-#{Digest::MD5.hexdigest(code)}.html")
      if File.exist?(path)
        highlighted_code = File.read(path)
      else
        begin
          highlighted_code = Pygments.highlight(code, :lexer =&gt; lang, :formatter =&gt; 'html', :options =&gt; {:encoding =&gt; 'utf-8', :startinline =&gt; true})
        rescue MentosError
          raise "Pygments can't parse unknown language: #{lang}."
        end
        File.open(path, 'w') {|f| f.print(highlighted_code) }
      end
</code></p>

<p>把这里的</p>

<p><code>ruby
raise "Pygments can't parse unknown language: #{lang}."
</code></p>

<p>修改成</p>

<p><code>ruby
raise "Pygments can't parse unknown language: #{lang}#{code}."
</code></p>

<p>可以使得<code>rake generate</code>编译时，把有问题的部分抛出来。</p>

<p>通过这个方法，我最终确定了我这里的情况是，用来标记 code block 的<code>```</code>符号和段落符号<code>&lt;/p&gt;</code>放在一起时产生某种错误（反正我是试不出怎么回事）。最后我用<code>~~~</code>代替了<code>```</code>（同样是 Markdown 标记代码的符号），终于没有编译错误了。</p>

<p><strong>2017/1/12 update:</strong> 更新到 python 3 之后，pygments 又出错了，不能 parse language。原因就是因为 pygments 只支持 python 2。<strong>解决方法：</strong> 用 anaconda 建立一个 python 2 的 environment:</p>

<p><code>bash 
conda create -n py27 python=2.7 anaconda
</code></p>

<p>安装好 python 2.7 后，激活这个 environment:</p>

<p><code>bash 
source activate py27
</code></p>

<p>这样就能正常编译了。</p>

<h4 id="section">后记</h4>

<p>写这篇文章的时候，遇到一个问题，就是不知道怎么让 Markdown 显示 <code>`</code>这个符号，后来发现了解决方法：</p>

<p>显示一个撇<code>`</code>，可以用两个撇来包裹</p>

<pre><code>`` ` ``(两撇，空格，一撇，空格，两撇)  
</code></pre>

<p>显示两个撇<code>``</code>，可以用三个撇来包裹</p>

<pre><code>``` `` ```(三撇，空格，两撇，空格，三撇)
</code></pre>

<p>以此类推。</p>

<h4 id="section-1">参考：</h4>

<p>构建：<a href="http://dreamrunner.org/blog/2014/03/09/octopresszhong-shi-yong-latexxie-shu-xue-gong-shi/">Octopress中使用Latex写数学公式</a><br />
修复：<a href="http://lvraikkonen.github.io/blog/2015/08/08/adding-support-for-math-formula/">配置Octopress支持LaTex数学公式</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[拥有你的个人博客]]></title>
    <link href="http://bobbielf2.github.io/blog/2016/08/06/yong-you-ni-de-ge-ren-bo-ke/"/>
    <updated>2016-08-06T15:57:31-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2016/08/06/yong-you-ni-de-ge-ren-bo-ke</id>
    <content type="html"><![CDATA[<p>每个人或多或少，某时某地，都想表达自己，最有收益的表达方法莫过于写 Blog！</p>

<p>搭建个人博客一直是我想做的事。之前试过在不同的地方栖息，包括 QQ 空间和 <a href="bobbielf2.weebly.com/index.html">weebly</a>，写的都是纯文字。后来想写带数学公式的文章，发觉只能把公式制作成图片插入文章，极其麻烦。然后我的好基友 Kuphrer 对我说：“没有原生latex不博客啊！”于是在他的指导下搭了一个 WordPress，又要另外弄存储空间又要备份什么的，弄得我这个网络小白晕头转向，终于还是没有坚持下去。</p>

<p>斗转星移，technology 一日千里，最近学习和编程的需要让我开始了解GitHub，发现这是一个大牛云集的宝地，而且只要项目是开源的就可以免费任意上传文件，而且没有广告，没有任何限制，简直就是搭建个人 Blog 的理想国。在网上搜了一下教程之后，我的博客搭建之旅开始了！</p>

<!--more-->

<h3 id="section">一、 预备知识</h3>

<h4 id="github">什么是 GitHub？</h4>

<p>Git 和 GitHub 并不是同一个东西。Git 是一个版本控制软件，而 GitHub 是一个公司，他家提供基于 git 的版本托管服务。因为 GitHub 上的开源项目的托管是<strong>免费的</strong>，全球最著名的开源社区和大公司的程序猿都聚集在这里。比如大公司都包括：</p>

<ul>
  <li><a href="https://github.com/google">Google</a></li>
  <li><a href="https://github.com/apple">Apple</a></li>
  <li><a href="https://github.com/facebook">Facebook</a></li>
  <li><a href="https://github.com/twitter">Twitter</a></li>
  <li><a href="https://github.com/microsoft">Microsoft</a></li>
  <li><a href="https://github.com/alibaba">阿里巴巴</a></li>
  <li>…</li>
</ul>

<p>开源项目包括</p>

<ul>
  <li><a href="https://github.com/torvalds/linux">Linux</a></li>
  <li><a href="https://github.com/apple/swift">Swift</a></li>
  <li><a href="https://github.com/ruby/ruby">Ruby</a></li>
  <li>…</li>
</ul>

<h4 id="octopress">什么是 Octopress</h4>

<p>Octopress 是一个基于 <strong>Jekyll</strong> 的<em>静态博客架构</em>（static blogging framework）。换句话说就是有个人使用 Jekyll 这个东西建了一个叫做 Octopress 的博客模版，我们可以修改它来建自己的博客，免去很多从头建设的技术上的麻烦。那 Jekyll 又是什么东东？</p>

<p>Jekyll 是一个对写作者友好的<em>网页模版系统</em>（web template system），能够处理文本文档生成<em>静态网站</em>（static site, 访问速度远远快于动态网站，因为动态网站是每次访问都重新生成的）。按它开发者的话来说，Jekyll 具有 “blog-aware（博客意识）” 的特点，意思是说它是为博客而生的，写作者用它来发布文章时，只需要处理好文字，而不用费神去处理数据库和网页内容管理之类的技术问题。当然，“好用”是基于不同人的体验的，对于我这种技术小白来说，学会 Jekyll 还是有点麻烦的，所以才要用 Octopress 这个现成模版。</p>

<blockquote>
  <p>Remark: Jekyll 是用 <a href="https://en.wikipedia.org/wiki/Ruby_(programming_language)">Ruby 编程语言</a>写出来的软件。
<br />
所有用 Ruby 写出来的软件都是用 <a href="https://en.wikipedia.org/wiki/RubyGems">RubyGems</a> 这个<em>软件包管理系统</em>（package manager）分发安装的。在 RubyGems 中，一个封装好的软件叫 Gem。RubyGems 的命令一般是用 <code>gem</code> 开头的。当需要安装不止一个软件甚至一些第三方软件包的时候，可以用 Bundler（另一个 Ruby 软件）来批量处理，命令以 <code>bundle</code> 开头，被执行的命令写在一个 Gemfile 里面。
<br />
Ruby 和其他编程语言一样可以执行脚本，叫做 Rakefile（类似 C 语言里面的 Makefile），方便编译运行 Ruby 程序。Rakefile 用 <code>rake</code> 执行（类似 Makefile 用 <code>make</code> 执行）。
<br />
综上所述，等下安装 Jekyll 和 Octopress 时首先要安装 Ruby， RubyGems 和 Bundler。</p>
</blockquote>

<h3 id="section-1">二、 安装博客的流程</h3>

<h4 id="git--ruby--rubygems">1. 安装 Git 和 Ruby (以及 RubyGems)</h4>

<p>如果用 Mac 的话有自带的 Git 和 Ruby 2.0，不需要安装。需要的话 git 可以从<a href="http://git-scm.com/downloads">这里</a>下载和安装。用 <code>ruby -v</code> 可以查询当前 Ruby 版本。新版的 Ruby 自带 RubyGems，所以也不用特别安装，如果没有的话可以在<a href="https://rubygems.org/">这里</a>安装。</p>

<h4 id="rbenv">1.1 安装 rbenv</h4>

<p>如果你的系统用 Mac OS，系统自带 Ruby，然而这个 Ruby 的目录（<code>/Library/Ruby/Gems/</code>）你是没有权限直接修改的，用<code>sudo</code>也不行。所以需要一个“虚拟机”：安装另一个版本的 Ruby 在虚拟机上就可以自由修改了。主流的 Ruby 虚拟机（又叫版本管理器，Ruby Version Manager）有 rbenv 和 RVM。</p>

<p>我用的是 rbenv。安装方法极其简单，用 Mac 自带的软件管理器 Homebrew 来安装，命令是 <code>brew</code></p>

<p><code>bash
brew update
brew install rbenv
</code></p>

<p>安装好了之后运行</p>

<p><code>bash
rbenv init
</code></p>

<p>系统会返回指令，教你怎么配置 rbenv。具体来说就是打开 <code>~/.bash_profile</code> 文件，在里面加入一行</p>

<p><code>bash
eval "$(rbenv init -)"
</code></p>

<p>重启 terminal 或者执行 <code>source ~/.bash_profile</code> 马上生效。</p>

<h4 id="octopress-1">2. 安装 Octopress</h4>

<p>现在开始建立 Octopress！ 首先为你的网站文档新建一个文件夹，假设是 <code>/Users/YOURNAME/Sites</code>，然后把 Octopress 的文档用 git 下载到里面：</p>

<p><code>bash
cd ~/Sites
git clone git://github.com/imathis/octopress.git octopress
cd octopress
</code></p>

<p>有了 rbenv 一切都简单了，首先用 Bundler 安装 octopress 所依赖的其他软件：</p>

<p><code>bash
gem install bundler
rbenv rehash # 更新 rbenv 以便之后使用 bundle 命令
bundle install
</code></p>

<blockquote>
  <p>如果你想知道最后一步<code>bundle install</code>做了什么，可以看看<code>Gemfile</code>文件，都安装了什么软件</p>
</blockquote>

<p>然后用 Rake（也就是 Ruby 的 Make）来安装 Octopress 的默认主题：</p>

<p><code>bash
rake install
</code></p>

<h4 id="github-">3. 关联 GitHub， 部署博客</h4>

<p>接着去 <a href="https://github.com/new">GitHub</a> 建一个新的 repository，名字要起成这样 <code>USERNAME.github.io</code>，比如我的就是 <code>bobbielf2.github.io</code>。然后用以下命令来建立 Octopress 和 GitHub 的连接：</p>

<p><code>bash
rake setup_github_pages
</code></p>

<p>执行这个命令，会让你输入 Repository url，把刚在 GitHub 建的 repository 地址输进去就好了，以下两种格式任选一个都可以</p>

<p><code>bash
https://github.com/USERNAME/USERNAME.github.io #格式1  
git@github.com:USERNAME/USERNAME.github.io.git #格式2  
</code></p>

<p>例如我就输入</p>

<p><code>bash
https://github.com/bobbielf2/bobbielf2.github.io  
</code></p>

<p>接着按照提示输入密码之类的，就完成和 GitHub 的关联了，接着可以生成和部署网站：</p>

<p><code>bash
rake generate
rake deploy
</code></p>

<p>当然不要忘记备份博客，把文件同步 push 到 GitHub 上</p>

<p><code>bash
git add .
git commit -m 'create blog'
git push origin source
</code></p>

<p>现在可以去你的 GitHub 网址看自己的网页了，比如我的就是 <a href="https://bobbielf2.github.io/">https://bobbielf2.github.io/</a>。</p>

<h4 id="section-2">4. 配置博客</h4>

<p>接着可以修改网页配置，位置在 <code>octopress/_config.yml</code>。</p>

<p><code>yaml
url:                # For rewriting urls for RSS, etc
title:              # Used in the header and title tags
subtitle:           # A description used in the header
author:             # Your name, for RSS, Copyright, Metadata
simple_search:      # Search engine for simple site search
description:        # A default meta description for your site
date_format:        # Format dates using Ruby's date strftime syntax
subscribe_rss:      # Url for your blog's feed, defauts to /atom.xml
subscribe_email:    # Url to subscribe by email (service required)
category_feeds:     # Enable per category RSS feeds (defaults to false in 2.1)
email:              # Email address for the RSS feed if you want it.
</code></p>

<p>编辑完成后再重新 generate 和 deploy 一次</p>

<p><code>bash
rake generate
rake deploy
# 别忘了用 git 备份
git add .
git commit -m "settings" 
git push origin source
</code></p>

<blockquote>
  <p>Remark: 每次 commit 来确认改变之前，都要 add 来更新索引。最终 push 来把 source 里的文件都备份到 GitHub 上。所以 commit 之前可以 add 很多次，push 之前也可以 commit 很多次。</p>
</blockquote>

<h3 id="section-3">三、 写博客</h3>

<p>终于！搭建好博客，就可以开始写文章了！GitHub 上的文章严重推荐用 <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a> 写。</p>

<blockquote>
  <p>题外话：Markdown 是当今很多网络写作者和程序员最爱用的格式。这种语言就一个字：简单！纯文本编辑，用简单的额外符号设置文字格式，没有像 MS Word 或者 Apple Pages 那样，不同版本不同平台就打不开文档的问题；然而又基本没什么学习成本，就能写出漂亮的排版。推荐看这个速成：
<br />
<a href="http://www.jianshu.com/p/q81RER">献给写作者的 Markdown 新手指南</a>。</p>
</blockquote>

<h4 id="section-4">1. 创建新的文章</h4>

<p>用这个命令生成新的 blog article</p>

<p><code>bash
rake new_post['title']
</code></p>

<p>生成的 Markdown 文件在 <code>octopress/source/_posts</code> 目录下</p>

<h4 id="section-5">2. 编辑和发布文章</h4>

<p>用 Markdown 语言写好文章，保存后可以预览： 运行 <code>rake preview </code>，然后在浏览器访问 <a href="http://localhost:4000/">http://localhost:4000/</a></p>

<p>然后发布：</p>

<p><code>bash
rake generate
git add .
git commit -m "new post"
git push origin source
rake deploy
</code></p>

<h3 id="section-6">四、 使用不同的主题。</h3>

<p>网上有很多人制作不同的网页主题（theme）。举例安装第三方主题：</p>

<p><code>bash
#这里以安装allenhsu定制的greyshade主题为例，原作者是shashankmehta
git clone git@github.com:allenhsu/greyshade.git .themes/greyshade
#Substitue 'color' with your highlight color
echo "\$greyshade: color;" &gt;&gt; sass/custom/_colors.scss 
rake "install[greyshade]"
</code></p>

<p>安装完再次更新</p>

<p><code>bash
rake generate
git add .
git commit -m "theme" 
git push origin source
rake deploy
</code></p>

<p>安装完 greyshade，你会发现左方导航栏上的 About me 是指向原作者的主页的，可以这样改回来：在 <code>/source/_includes/custom/navigation.html</code> 中记录了导航栏的内容</p>

<p>```html</p>
<li><a href="http://bobbielf2.github.io/">Blog</a></li>
<li><a href="http://about.me/shashankmehta">About</a></li>
<li><a href="http://bobbielf2.github.io/blog/archives">Archives</a></li>
<p>```</p>

<p>把里面的网址 <code>http://about.me/shashankmehta</code> 改成别的东西就好了。</p>

<h4 id="section-7">后续参考：</h4>

<p><a href="http://zwgithub.github.io/2016/06/14/%E7%94%A8Octopress%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84github%E5%8D%9A%E5%AE%A2/">设置头像，文章以摘要形式显示，评论功能</a></p>

<p><a href="https://shengmingzhiqing.com/blog/octopress-tutorials-toc.html/">生命之氢 - Octopress 教程目录</a></p>

<p><a href="http://blog.pnkfx.org/blog/2015/12/18/fixing-octopress-table-rendering/">修复 Octopress 不能显示漂亮的 markdown 表格的问题</a></p>
]]></content>
  </entry>
  
</feed>
