<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technology | Bobbie's Blog]]></title>
  <link href="http://bobbielf2.github.io/blog/categories/technology/atom.xml" rel="self"/>
  <link href="http://bobbielf2.github.io/"/>
  <updated>2019-11-20T14:06:57-06:00</updated>
  <id>http://bobbielf2.github.io/</id>
  <author>
    <name><![CDATA[Bowei "Bobbie" Wu .]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Resume Octopress Blogging From a New Computer]]></title>
    <link href="http://bobbielf2.github.io/blog/2019/06/21/resume-octopress-from-a-new-computer/"/>
    <updated>2019-06-21T12:02:54-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2019/06/21/resume-octopress-from-a-new-computer</id>
    <content type="html"><![CDATA[<p>I recently switched to a new computer. The switch isn’t too messy because I basically have all my data backed up, either on Google Drive or on GitHub.</p>

<p>One thing I wanted to make sure is that I can still update this blog, which is hosted using Octopress. But to be honest, until recently I am not really good at using git and GitHub, so it took me some time to figure out what I need to do to resume blogging with Octopress.</p>

<!--more-->

<p>Logically, the key concept with Octopress is that it uses a <em>ghost branch</em>. All the source files for my blog is tracked NOT by the master branch, but by a ghost branch (named “source” under the Octopress framework) that is completely unrelated to the master branch in terms of git history – it’s a hanging branch that lives in a parallel world albeit in the same repo, hence the name “ghost branch.”</p>

<p>Another important thing with Octopress is to find out how the local blog is deployed onto <a href="https://pages.github.com/">GitHub Pages</a>. This also took me a little bit to figure out. It turns out that my blog is first generated under a <code>_deploy</code>  folder, and then that folder is synced to the master branch on the repo.</p>

<p>Summarizing the two paragraphs above, Octopress is organizing my blog in the following way:</p>

<p><code>
MyBlog
|--source files (tracked by ghost branch)
|--_deploy
   |--github page files (tracked by master branch)
</code></p>

<p>Apparently, it is not the best practice to use a ghost branch, also not the best practice to use the master branch to track a sub-folder of the ghost branch. These are some twisted logic puzzles for the mind. But that’s how Octopress works!</p>

<p>Once the logic is clear, I only need to do the following three things to resume blogging:</p>

<p><strong>1. Clone source from ghost branch</strong> (my ghost branch named <code>source</code>)</p>

<p><code>bash
git clone -b source https://github.com/YOURNAME/YOURNAME.github.io.git
</code></p>

<p><strong>2. Clone GitHub Page (to a sub-directory <code>_deploy</code>) from master branch</strong></p>

<p><code>bash
cd YOURNAME.github.io
mkdir _deploy
git clone https://github.com/YOURNAME/YOURNAME.github.io.git _deploy
</code></p>

<p><strong>3. Re-install the plugins for my blog</strong></p>

<p><code>bash
bundle install --path vendor/bundle
</code></p>

<p>Of course, you need to have installed the <a href="https://bundler.io/">Bundler</a> to use the <code>bundle</code> command, and to do that on a Mac you will probably need to first install <a href="https://github.com/rbenv/rbenv">rbenv</a> for smoothly running your blog by executing Ruby commands. In other word, you will need to set up your environment again for Octopress, which I have covered in my <a href="/blog/2016/08/06/yong-you-ni-de-ge-ren-bo-ke/index.html">first blog post</a> (in Chinese).</p>

<hr />

<h3 id="updates-on-2019-11-20-using-rbenv-on-macos-catalina">(Updates on 2019-11-20) Using <code>rbenv</code> on MacOS Catalina</h3>

<p>After I upgraded my MacOS to 10.15 Catalina, I encountered troubles again. This time, when I do <code>rake</code> commands, I got the error message:</p>

<p><code>
You must use Bundler 2 or greater with this lockfile.
</code></p>

<p>So I need to update the <code>bundler</code> to version 2 or higher.</p>

<p>However, when I did <code>gem install bundler</code>, I got permission error again – this means that <code>gem</code> is trying to install bundler on Mac’s default system ruby, in other words, <code>rbenv</code> is broken.</p>

<p>So I tried to reinstall <code>rbenv</code> :</p>

<p><code>bash
brew reinstall rbenv
rbenv init
</code></p>

<p>and then install a custom <code>ruby</code> (version 2.6.5):</p>

<p><code>bash
rbenv install 2.6.5
</code></p>

<p>However, in this last step, I constantly ran into troubles. It was a long debugging process, so I am just going to list the hurdles that I have gone through, which maybe helpful to others.</p>

<p><strong>Hurdle #1</strong>: <code>openssl</code> overhead</p>

<p><code>rbenv</code> keep trying to first install <code>openssl</code> before actually installing <code>ruby 2.6.5</code>, this is taking a lot of time and greatly reducing my debugging efficiency. I checked <code>which openssl</code> and confirmed that my system has already had <code>openssl</code> installed. So I need to tell <code>rbenv</code> to use my system’s <code>openssl</code>. I do this with the command:</p>

<p><code>bash
RUBY_CONFIGURE_OPTS=--with-openssl-dir=/opt/local CC=/usr/bin/gcc rbenv install 2.6.5
</code></p>

<p><strong>Hurdle #2</strong>: incorrect C compiler</p>

<p>After many fails, I finally found out in the error log that <code>rbenv</code> is using <code>CC=x86_64-apple-darwin13.4.0-clang</code> as C compiler and therefore has not been able to compile and install ruby. This can be resolved by explicitly telling <code>rbenv</code> to use the system compiler <code>/usr/bin/gcc</code>.</p>

<p><code>bash
CC=/usr/bin/gcc RUBY_CONFIGURE_OPTS=--with-openssl-dir=/opt/local rbenv install 2.6.5
</code></p>

<p><strong>Hurdle #3</strong>: anaconda gets in the way</p>

<p>After the previous two fixes, I am still unable to install ruby. This time I found the following lines in the error log:</p>

<p><code>
/anaconda3/bin/x86_64-apple-darwin13.4.0-ar: illegal option -- n
usage:  ar -d [-TLsv] archive file ...
</code></p>

<p>It turns out that <code>rbenv</code> is using anaconda’s <code>ar</code> function instead of the system’s own <code>ar</code>. So I need to disable anaconda in my system as follows:</p>

<ul>
  <li>Open the <code>~/.bash_profile</code> file, remove/comment out any lines that have to do with anaconda/conda</li>
  <li>Restart terminal</li>
  <li>Try install ruby again:</li>
</ul>

<p><code>bash
RUBY_CONFIGURE_OPTS=--with-openssl-dir=/opt/local rbenv install 2.6.5
</code></p>

<p>Finally, I was able to install ruby on <code>rbenv</code>! Notice that in the last command I have removed <code>CC=/usr/bin/gcc</code>, because disabling anaconda also resolves the problem in Hurdle #2.</p>

<h4 id="final-steps">Final Steps</h4>

<p>After installing a custom ruby, I need to first tell the system to use that version of ruby</p>

<p><code>bash
rbenv global 2.6.5
</code></p>

<p>Then I can go back to my Octopress blog folder and install the newest bundler</p>

<p><code>bash
gem install bundler
bundle install
</code></p>

<p>However, there is still a final small hurdle for me:</p>

<p><strong>Hurdle #4</strong>: rake version</p>

<p>When I tried to create a new blog post via <code>rake new_post['title']</code>, I got the following error message:</p>

<p><code>
rake aborted!
Gem::LoadError: You have already activated rake 12.3.2, but your Gemfile requires rake 10.5.0. Prepending `bundle exec` to your command may solve this.
</code></p>

<p>So I just open the <code>Gemfile</code> in my Octopress folder, find the line with <code>gem 'rake', '~&gt; 10.5'</code>, change it to <code>gem 'rake', '~&gt; 12.3'</code>, and then <code>bundle install</code> again. Now it’s all set.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using GNU Screen to Resume an SSH Session]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/09/14/using-gnu-screen-to-resume-an-ssh-session/"/>
    <updated>2017-09-14T13:30:46-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/09/14/using-gnu-screen-to-resume-an-ssh-session</id>
    <content type="html"><![CDATA[<h3 id="why-gnu-screen">Why GNU Screen?</h3>

<p><strong>Scenario</strong>: you finish working with an SSH session, you close your laptop to go for lunch or for a tea. Then you come back and open your laptop wanting to resume your job, but the connection is broken or the VPN breaks and forced you to disconnect. You have no choice but setup the connection once again and reopen the documents/apps before you can resume from where you left.</p>

<!--more-->

<p><strong>Solution</strong>: with GNU Screen, you can directly resume from where you left, without having to reopen all the documents/apps you’ve been working on.</p>

<p>The concept of GNU Screen is like turning on and off of a computer screen. You turn off a screen when you are done, let the computer to hang in there; you come back later, turn the screen back on and continue your tasks.</p>

<h3 id="steps-using-gnu-screen">Steps Using GNU Screen</h3>

<ol>
  <li><strong>Connect</strong>. Connect to a remote server and create a Screen session via <code>ssh -t &lt;server.domain.name&gt; screen -R</code></li>
  <li><strong>Detach</strong>. When done with the SSH session, use <code>ctrl-a d</code> to detach from the session. This also disconnect with the SSH server.</li>
  <li><strong>Reconnect</strong>. The SSH session is still running actually. When you are ready to resume working with the session, use <code>ssh -t &lt;server.domain.name&gt; screen -R</code> again to reconnect, then you are right where you left it.</li>
  <li><strong>Terminate</strong>. To permanently terminate a Screen session, just disconnect from the server the usual way (<code>ctrl-d</code>).</li>
</ol>

<p><strong>Limitation</strong>: If you are using apps with graphical interface, not just the command line environment, then <code>screen</code> is not suitable for resuming such jobs, and <a href="https://en.wikipedia.org/wiki/Virtual_Network_Computing">VNC</a> instead would be the ideal choice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Access to Linux-based Computing Resources With Graphical Interface (for UM Students)]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/09/07/remote-access-to-linux-based-computing-resources-with-graphical-interface-for-um-students/"/>
    <updated>2017-09-07T15:25:54-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/09/07/remote-access-to-linux-based-computing-resources-with-graphical-interface-for-um-students</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Note: this note is about University of Michigan computing resources.</p>
</blockquote>

<p>People working on numerical analysis often need to develop efficient code by doing multi-language programming, e.g. MATLAB/C++ or MATLAB/Fortran. Linux operating system is needed to have the best programming experience. (Mac OS has all sorts of compatibility issues.) For UM people who are using a Mac, I have explore the following four options for remotely accessing Linux-based computing resources.</p>

<!--more-->

<h3 id="use-the-its-statistics-and-computation-service-scs">1. Use the ITS Statistics and Computation Service (SCS)</h3>

<p>The <a href="http://www.itcs.umich.edu/scs/">ITS SCS</a> provides the easiest way to certain computational resources, no extra permissions/purchases needed. But the software may not be up-to-date, e.g. MATLAB version on this server is relatively old (MATLAB R2012b).</p>

<p>Steps:</p>

<ol>
  <li>Install <a href="https://www.xquartz.org/">XQuartz</a> on your Mac (See <a href="http://www.itcs.umich.edu/scs/x11.php">info</a>)</li>
  <li>Connect to server by typing <code>ssh -Y uniqname@scs.dsc.umich.edu</code> in terminal.</li>
  <li>Upon successful connection, type <code>matlab</code> to run the program. XQuartz graphics will be invoked.</li>
</ol>

<h3 id="ask-lsa-it-for-help">2. Ask LSA-IT for help</h3>

<p>For math people, we can contact the East Hall Technical Service (EHTS) for help. They offer newer software. (The EHTS is one of the four regional support desks of the <a href="https://lsa.umich.edu/lsait">LSA-IT</a>).</p>

<p>Steps:</p>

<ol>
  <li>Install <a href="https://www.xquartz.org/">XQuartz</a> on your Mac.</li>
  <li>Ask EHTS techicians (Room 1069EH) to grant you access to a Linux machine.</li>
  <li>Download the <a href="https://wiki.x2go.org/doku.php/download:start">X2Go Client</a>.</li>
  <li>Configure X2Go Client to connect to the <code>vulpix.math.lsa.umich.edu</code> server.</li>
</ol>

<h3 id="use-the-caen-computers">3. Use the CAEN computers</h3>

<p>The UM Computer-Aided Engineering Network (CAEN) provides the smoothest experience for general users as well as power users. The CAEN computer operates the newest Linux and Windows systems, with newest and most complete software libraries for all sorts of computational work. <strong>But these are only conveniently available to engineering students.</strong></p>

<p>Availability:</p>

<ul>
  <li>If you are an engineering student, or are currently taking engineering classes, then you can <a href="https://caen.engin.umich.edu/accounts/">access CAEN computing resources anywhere</a>, on-site or remotely.</li>
  <li>All other non-engineering students have NO remote access to CAEN computers, and can only go to north campus to use the CAEN computers in the Duderstadt Center.</li>
</ul>

<p>Steps:</p>

<ol>
  <li>See CAEN <a href="https://caen.engin.umich.edu/connect/linux-login-service/">Linux Login Service</a></li>
</ol>

<h3 id="use-the-flux-hpc-cluster">4. Use the Flux HPC Cluster</h3>

<p>This option builds connections using <a href="https://en.wikipedia.org/wiki/Virtual_Network_Computing">VNC</a> (instead of XQuartz) is faster and more stable, can disconnect and <strong>resume</strong> right where you left at any time.</p>

<p>Info about Flux:</p>

<ul>
  <li>The <a href="http://arc-ts.umich.edu/">ARC-TS</a>’s Flux HPC Cluster provides high performance computing service and has its own professional technical help.</li>
  <li>LSA people can use the <a href="http://arc-ts.umich.edu/document/lsas-public-flux-allocation/">public LSA allocations</a> on Flux. These allocations are free, but take longer for jobs to start.</li>
  <li>If you or your advisor has purchased <a href="http://arc-ts.umich.edu/flux/managing-a-flux-project/">private allocation</a> on Flux, then there is much <a href="http://arc-ts.umich.edu/document/lsas-public-flux-allocation/">less wait or limitations</a>.</li>
</ul>

<p>Steps:</p>

<ol>
  <li><a href="http://arc-ts.umich.edu/flux-user-guide/">Obtain access to Flux</a></li>
  <li>Follow instructions <a href="http://arc-ts.umich.edu/flux/vnc/">here</a> to configure a VNC server, and use a VNC client to connect.</li>
  <li>Follow instructions <a href="http://arc-ts.umich.edu/flux-user-guide/#document-14">here</a> to load and use softwares on Flux.</li>
</ol>

<h3 id="summary">Summary</h3>

<ul>
  <li>If eligible for a CAEN account, always use CAEN</li>
  <li>For general use and easy access, ask LSA-IT for help</li>
  <li>For serious programming, use Flux HPC Cluster</li>
  <li>For not-so-serious purpose, use the ITS SCS</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dancing With Julia]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/06/07/dancing-with-julia/"/>
    <updated>2017-06-07T16:39:19-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/06/07/dancing-with-julia</id>
    <content type="html"><![CDATA[<p>I have been having fun with <a href="https://julialang.org/">the Julia language</a> lately. It is a new programming language for scientific computing. You may wonder, why do we need a new language at all? Don’t we already have MATLAB, Mathematica, Python with NumPy and SciPy, etc., are’t those enough?</p>

<p>Well, it is true that those are awesome softwares for scientific computing, they have all the necessary functionalities and powerful libraries, and they are easy to learn. But there is a common (fatal) issue that prevents them from creating industrial quality codes – speed. We want faster speed! The Julia language is developed specifically for this.</p>

<!--more-->

<h2 id="the-julia-language">1. The Julia Language</h2>

<p>What is the Julia language? According to its <a href="https://julialang.org/">official page</a></p>

<blockquote>
  <p>Julia a high-level, high-performance dynamic programming language for numerical computing.</p>
</blockquote>

<p>There are two keywords here: <strong>high-performance</strong> and <strong>dynamic programming</strong>. These two words don’t usually come together! If you have written some program for numerical computations, you probably have noticed:</p>

<ul>
  <li><strong>Dynamic programming</strong> languages like Python and MATLAB are very handy and human-friendly. Each such language has a <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a> that allows you to see the effects of your code immediately, so the workflow is interactive. You can easily explore ideas, quickly prototype a new software. The syntax is simple which allows for fast development.</li>
  <li>However, when you finally decide to write some software for practical use, all these dynamic programming languages suffer from slow running speeds. Then you have to switch to a <strong>high-performance</strong> programming language like C/C++ and Fortran. These languages are static, use a classic edit-compile-run-debug (ECRD) cycle in contrast to REPL. It takes a lot of time to write the code and debug.</li>
</ul>

<p>This is called the <strong>Two-language problem</strong>: efficiency for human or efiiciency for the machine, pick one. There have been efforts trying to resolve this problem, for example, by linking the C libraries in a Python code, but such usage of multi-language programming quickly makes the code really complex and hard to maintain.</p>

<h3 id="solving-the-two-language-problem">1.1 Solving the two-language problem</h3>

<p>This is exactly where Julia kicks in.</p>

<p>Julia is a dynamic programming language as MATLAB or Python, making it easy to use. But Julia also runs <a href="https://julialang.org/benchmarks/">very fast</a>, comparable to the performance of C codes. How could a dynamic language run fast? It does so by using the <a href="https://en.wikipedia.org/wiki/LLVM">LLVM</a>-based <a href="https://en.wikipedia.org/wiki/Just-in-time_compilation">just-in-time</a> (JIT) compiler. In fact Julia is designed for JIT from the very beginning!</p>

<h3 id="want-to-try-julia">1.2 Want to try Julia?</h3>

<p>If you would like to try out the Julia language, I recommend this quick hands-on approach: firstly, you learn the basics by going through some short tutorial found <a href="https://julialang.org/learning/#tutorials">here</a>; after having some familiarity with the syntax, you start some programming with your field of study with the help of some <a href="http://pkg.julialang.org/">existing packages</a>. For example, I work on numerical analysis and spectral methods, so I started with the <a href="https://github.com/JuliaApproximation/ApproxFun.jl">ApproxFun</a> package under the <a href="https://github.com/JuliaApproximation">JuliaApproximation</a> project; or if you have done some statistics programming with languages like R, there is a collection of statistics packages under the <a href="https://github.com/JuliaStats">Julia Statistics</a> project; or if you are an algebraist, you may have done some symbolic programming with languages like REDUCE, there is also a <a href="https://github.com/chakravala/Reduce.jl">Reduce</a> package for you. Check the <a href="http://pkg.julialang.org/">list of available packages</a>, no matter what you work on, you are likely to find something that suits your need.</p>

<p>Next, I am going to talk about an experience I had when coding Julia. It will be an example with very technical details, so you may stop reading at this point if all you want is just some general information about Julia.</p>

<h2 id="testing-my-code-why-cant-i-redefine-my-test-functions">2. Testing my code: why can’t I redefine my test functions?</h2>

<p>(<strong>Note:</strong> the issue mentioned in this note pertains to julia version <code>v0.5</code>, there will be a change/fix of the behavior in <code>v0.6</code>; see the P.S. in the end.)</p>

<h3 id="redefine-test-functions-that-will-be-called-by-a-high-order-function-the-failure">2.1 Redefine test functions that will be called by a high-order function: the failure</h3>

<p>In scientific computing, we often need to test a function by feeding it different parameters to see if the behaviors are as expected.</p>

<p>``` julia
julia&gt; function myFun1(value)
           return value + 1
       end</p>

<p>julia&gt; v = 1; myFun1(v)    #test case 1
2</p>

<p>julia&gt; v = pi; myFun1(v)    #test case 2
4.141592653589793</p>

<p>julia&gt; v = -e; myFun1(v)    #test case 3
-1.718281828459045
```</p>

<p>This is completely fine with a simple function. But if you are debugging a <strong>high-order function</strong>, i.e. a function whose input (or output) is also a function:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>       <span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>    <span class="c">#test case 1</span>
</span><span class='line'><span class="mi">2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>    <span class="c">#test case 2</span>
</span><span class='line'><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f</span><span class="p">(</span><span class="kt">Any</span><span class="p">)</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span><span class="mi">1</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="mf">1.</span>
</span><span class='line'><span class="mi">2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>    <span class="c">#test case 3</span>
</span><span class='line'><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f</span><span class="p">(</span><span class="kt">Any</span><span class="p">)</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="mi">1</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span><span class="mf">1.</span>
</span><span class='line'><span class="mi">2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">println</span><span class="p">([</span><span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)])</span>
</span><span class='line'><span class="p">[</span><span class="mf">7.38906</span><span class="p">,</span><span class="mf">2.0</span><span class="p">]</span> <span class="c">#both should have returned the same value f(2)!</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We see that redefining a function is okay if you just want to evaluate it, but redefining for the testing of another high-order function won’t work. Unless you also <strong>redefine that high-order function to update the dependence</strong>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">myFun2</span><span class="p">(</span><span class="kt">Any</span><span class="p">)</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span><span class="mi">2</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">11</span><span class="p">]:</span><span class="mf">2.</span>
</span><span class='line'><span class="n">myFun2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="mf">7.38905609893065</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>But redefining every high-order function is cumbersome, and even impractical if there is a chain of dependencies among multiple high-order functions.</p>

<h3 id="the-logic-behind-such-failure-how-the-jit-compiler-works">2.2 The logic behind such failure: how the JIT compiler works</h3>

<p>This issue received a long discussion (started a couple years ago and is still going on) on GitHub <a href="https://github.com/JuliaLang/julia/issues/265">issue #265</a>. This goes back to the fundamental question of how Julia’s JIT compiler works (under the hood) in real time.</p>

<ul>
  <li>The JIT compiler would compile a custom function (high-order or not) when it is executed for the first time. So you see behavior like this</li>
</ul>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> f1</span><span class="p">()</span>
</span><span class='line'>           <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'><span class="n">f1</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> f2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>           <span class="n">f</span><span class="p">()</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'><span class="n">f2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> f1</span><span class="p">()</span>
</span><span class='line'>           <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f1</span><span class="p">()</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span><span class="mi">2</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="mf">2.</span>
</span><span class='line'><span class="n">f1</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f2</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>
    <p>Because <code>f2</code> is compiled when <code>f2(f1)</code> is called; before the call, <code>f1</code> is most recently defined to return <code>3</code>, so <code>f2(f1)</code> returns <code>3</code>; the first definition of <code>f1</code> that returned <code>2</code> was overwritten.</p>
  </li>
  <li>
    <p>After the <code>f2(f1)</code> call, no matter how you overwrite the definition of <code>f1</code>, <code>f2(f1)</code> will always return <code>3</code> since that’s how it was when compiled at its first call.</p>
  </li>
</ul>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> f1</span><span class="p">()</span>
</span><span class='line'>           <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f1</span><span class="p">()</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="mi">2</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span><span class="mf">2.</span>
</span><span class='line'><span class="n">f1</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f2</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>Unless you also redefine <code>f2</code>, then <code>f2</code> becomes an uncompiled function again. The next time <code>f2</code> is called, it will be compiled again and updates its behavior.</li>
</ul>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> f2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>           <span class="n">f</span><span class="p">()</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f2</span><span class="p">(</span><span class="kt">Any</span><span class="p">)</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span><span class="mi">2</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">7</span><span class="p">]:</span><span class="mf">2.</span>
</span><span class='line'><span class="n">f2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f2</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>This experiment shows that the compilation is down to the lowest-order function, so if a high-order function is called, the JIT will compile all the functions it calls, until it hits a simple function. (Compilation can also occur when you feed a custom function with variables of different types. This is the subject of <strong>multiple dispatch</strong>, another great advantage of Julia).</li>
</ul>

<h3 id="solution-using-anonymous-functions">2.3 Solution: using anonymous functions</h3>

<p>I have found a solution in <a href="https://github.com/JuliaPlots/Plots.jl/issues/508#issuecomment-250200614">a comment of issue #508</a>, which is to use the lambda function notation <code>-&gt;</code> in Julia to define an anonymous function, and assign the anonymous function to a variable <code>f</code>. Then feed this variable into the high-order function you want to test.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'><span class="n">myFun2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">x</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="mi">4</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="mf">7.38905609893065</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>All works well now! This is because the variable <code>f</code> is now pointing to an anonymous function. If it is later redefined to point to a different function, this pointer value is updated because every anonymous function receives a unique label. So there are no more confusions!</p>

<h3 id="ps-issue-fixed-in-v06">P.S. Issue fixed in <code>v0.6</code></h3>

<p>I have downloaded the pre-released version <code>julia v0.6.0-rc2</code> to check if the issue is well handled. Apparently, the issue is well fixed in this new version:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'><span class="n">myFun2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="mi">4</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="mf">7.38905609893065</span>
</span></code></pre></td></tr></table></div></figure></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preserve the Table of Contents When Converting a Book From Djvu to PDF]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/04/11/preserve-the-table-of-contents-when-converting-a-book-from-djvu-to-pdf/"/>
    <updated>2017-04-11T20:47:57-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/04/11/preserve-the-table-of-contents-when-converting-a-book-from-djvu-to-pdf</id>
    <content type="html"><![CDATA[<p>There are many readily available softwares (e.g. <a href="https://itunes.apple.com/us/app/djvu2pdf/id629039447?mt=12">DjVu2PDF</a>) for converting a book from <code>.djvu</code> to <code>.pdf</code> format, but none of those will preserve the table of contents in the output PDF.</p>

<!--more-->

<p>Having a table of contents is very handy. For example when viewing a book in Preview, the table of contents works like a multi-level bookmark, you can simply click on any link in the sidebar to jump to any chapter/section of the book.</p>

<p><img src="/images/blog_figures/toc_in_preview.png" width="600"></p>

<p>So I Googled and found <a href="https://superuser.com/a/915399">this quetion</a> on StackExchange that asked exactly my question. Here is a summary of the accepted answer on how you can preserve (or more precisely, create) the table of contents in a PDF converted from Djvu.</p>

<h2 id="preliminary">1. Preliminary</h2>

<p>You will need to install <a href="https://www.pdflabs.com/tools/pdftk-server/">pdftk</a> (part of PDFtk Server) and <a href="https://sourceforge.net/projects/djvu/">djvused</a> (part of DjVuLibre)</p>

<p><strong>Note 1:</strong> pdftk for Mac OS X 10.11 and above. I found in <a href="http://stackoverflow.com/a/33248310/4608899">this answer</a> on Stack Overflow that the developer of PDFtk provides an installer for PDFtk Server on OS X 10.11 and above. It is kind of strange that the <a href="https://www.pdflabs.com/tools/pdftk-server/">official website</a> only provides the installer for OS X up to 10.8. (This older version can be installed, but won’t run. When you type pdftk commands in the Terminal, it will make you wait forever.)</p>

<p><strong>Note 2:</strong> About djvused command line setup on OS X. After installing DjVuLibre, in order to use djvused in command line, you need to run</p>

<p><code>bash
eval '/Applications/DjView.app/Contents/setpath.sh'
</code></p>

<p>If this doesn’t add the correct path, you can also manually add the following line into <code>~/.bash_profile</code></p>

<p><code>vim
PATH="/Applications/DjView.app/Contents/bin:${PATH}"
</code></p>

<h2 id="convert-the-table-of-contents">2. Convert the Table of Contents</h2>

<p>(Note: all materials in this section follow closely the <a href="https://superuser.com/a/915399">original answer</a> on StackExchange, except I coded a very simple python program in Step 2.)</p>

<p>Suppose now you have converted <code>book.djvu</code> into <code>book.pdf</code>, the former has a table of contents but the latter doesn’t.</p>

<h3 id="step-1-extract-djvu-outline">Step 1. extract Djvu outline</h3>

<p>Use the following command to extract the table of contents from <code>book.djvu</code></p>

<p><code>bash
djvused "book.djvu" -e 'print-outline' &gt; bmarks.out
</code></p>

<p>The output file <code>bmarks.out</code> lists the table of contents in a serialized tree format using <a href="https://en.wikipedia.org/wiki/S-expression">SEXPR</a>, which can be summarized as:</p>

<p><code>
file ::= (bookmarks
           &lt;bookmark&gt;*)
bookmark ::= (name
               page
               &lt;bookmark&gt;*)
name ::= "&lt;character&gt;*"
page ::= "#&lt;digit&gt;+"
</code></p>

<p>Notice that under this format, you can append a “child bookmark” inside a “parent bookmark”. For example, a <code>bmarks.out</code> may look like this</p>

<p><code>
(bookmarks
  ("bmark1"
    "#1")
  ("bmark2"
    "#5"
    ("bmark2subbmark1"
      "#6")
    ("bmark2subbmark2"
      "#7"))
  ("bmark3"
    "#9"
    ...))
</code></p>

<h3 id="step-2-translate-the-djvu-outline-to-pdf-metadata-format">Step 2. translate the Djvu outline to PDF metadata format</h3>

<p>Now, Djvu and PDF store the bookmark data in different formats. While Djvu uses SEXPR, PDF uses metadata, which looks like this:</p>

<p><code>
file ::= &lt;entry&gt;*
entry ::= BookmarkBegin
          BookmarkTitle: &lt;title&gt;
          BookmarkLevel: &lt;number&gt;
          BookmarkPageNumber: &lt;number&gt;
title ::= &lt;character&gt;*
</code></p>

<p>The example in Step 1 when translated into PDF metadata will look like</p>

<p><code>
BookmarkBegin
BookmarkTitle: bmark1
BookmarkLevel: 1
BookmarkPageNumber: 1
BookmarkBegin
BookmarkTitle: bmark2
BookmarkLevel: 1
BookmarkPageNumber: 5
BookmarkBegin
BookmarkTitle: bmark2subbmark1
BookmarkLevel: 2
BookmarkPageNumber: 6
BookmarkBegin
BookmarkTitle: bmark2subbmark2
BookmarkLevel: 2
BookmarkPageNumber: 7
BookmarkBegin
BookmarkTitle: bmark3
BookmarkLevel: 1
BookmarkPageNumber: 9
...
</code></p>

<p>It is a fun exercise to work out the correspondence of the two formats.</p>

<p><strong>Note:</strong> I have written a python program to automatically convert the Djvu SEXPR <code>bmarks.out</code> into the PDF metadata form and output as <code>bmarks2.txt</code></p>

<p><figure class='code'><figcaption><span>Convert Djvu outline into PDF metadata (bmarkDjvu2pdf.py)</span> <a href='/downloads/code/bmarkDjvu2pdf.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#! /usr/bin/env python</span>
</span><span class='line'><span class="n">metadata</span> <span class="o">=</span> <span class="s">&#39;&#39;</span> <span class="c"># string to be written into PDF metadata</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;bmarks.out&quot;</span><span class="p">)</span> <span class="c"># open input file: djvu outline</span>
</span><span class='line'><span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;(bookmarks&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="n">level</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">level</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">):</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;(&quot;&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">level</span> <span class="o">=</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">metadata</span> <span class="o">=</span> <span class="n">metadata</span> <span class="o">+</span> <span class="s">&quot;BookmarkBegin</span><span class="se">\n</span><span class="s">BookmarkTitle: &quot;</span><span class="o">+</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;(&quot;&#39;</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">BookmarkLevel: &quot;</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">level</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>        <span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">line</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&#39;)&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">level</span> <span class="o">=</span> <span class="n">level</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>        <span class="n">metadata</span> <span class="o">=</span> <span class="n">metadata</span> <span class="o">+</span> <span class="s">&quot;BookmarkPageNumber: &quot;</span><span class="o">+</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s">&#39;&quot;#&#39;</span><span class="p">)</span><span class="o">+</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">line</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&#39;)&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">level</span> <span class="o">=</span> <span class="n">level</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;bmarks2.txt&quot;</span><span class="p">,</span><span class="s">&#39;w&#39;</span><span class="p">)</span> <span class="c"># output file: for PDF metadata</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">metadata</span><span class="p">)</span>
</span><span class='line'><span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3 id="step-3-modify-pdf-metadata-to-include-the-bookmark-data">Step 3. modify PDF metadata to include the bookmark data</h3>

<p>Extract PDF metadata with this command:</p>

<p><code>bash
pdftk "book.pdf" dump_data &gt; pdfmetadata.out
</code></p>

<p>Open the <code>pdfmetadata.out</code> file, and find the line that begins with <code>NumberOfPages:</code>, and insert your list of bookmarks after this line. Save the new file as <code>pdfmetadata.in</code>. Now run this command:</p>

<p><code>bash
pdftk "book.pdf" update_info "pdfmetadata.in" output newbook.pdf
</code></p>

<p>The output <code>newbook.pdf</code> is your new <code>book.pdf</code> equiped with a convenient table of contents. Happy reading!</p>

]]></content>
  </entry>
  
</feed>
