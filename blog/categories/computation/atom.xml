<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Computation | Bobbie's Blog]]></title>
  <link href="http://bobbielf2.github.io/blog/categories/computation/atom.xml" rel="self"/>
  <link href="http://bobbielf2.github.io/"/>
  <updated>2021-01-17T20:35:45-06:00</updated>
  <id>http://bobbielf2.github.io/</id>
  <author>
    <name><![CDATA[Bowei "Bobbie" Wu .]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dancing With Julia]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/06/07/dancing-with-julia/"/>
    <updated>2017-06-07T16:39:19-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/06/07/dancing-with-julia</id>
    <content type="html"><![CDATA[<p>I have been having fun with <a href="https://julialang.org/">the Julia language</a> lately. It is a new programming language for scientific computing. You may wonder, why do we need a new language at all? Don’t we already have MATLAB, Mathematica, Python with NumPy and SciPy, etc., are’t those enough?</p>

<p>Well, it is true that those are awesome softwares for scientific computing, they have all the necessary functionalities and powerful libraries, and they are easy to learn. But there is a common (fatal) issue that prevents them from creating industrial quality codes – speed. We want faster speed! The Julia language is developed specifically for this.</p>

<!--more-->

<h2 id="the-julia-language">1. The Julia Language</h2>

<p>What is the Julia language? According to its <a href="https://julialang.org/">official page</a></p>

<blockquote>
  <p>Julia a high-level, high-performance dynamic programming language for numerical computing.</p>
</blockquote>

<p>There are two keywords here: <strong>high-performance</strong> and <strong>dynamic programming</strong>. These two words don’t usually come together! If you have written some program for numerical computations, you probably have noticed:</p>

<ul>
  <li><strong>Dynamic programming</strong> languages like Python and MATLAB are very handy and human-friendly. Each such language has a <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a> that allows you to see the effects of your code immediately, so the workflow is interactive. You can easily explore ideas, quickly prototype a new software. The syntax is simple which allows for fast development.</li>
  <li>However, when you finally decide to write some software for practical use, all these dynamic programming languages suffer from slow running speeds. Then you have to switch to a <strong>high-performance</strong> programming language like C/C++ and Fortran. These languages are static, use a classic edit-compile-run-debug (ECRD) cycle in contrast to REPL. It takes a lot of time to write the code and debug.</li>
</ul>

<p>This is called the <strong>Two-language problem</strong>: efficiency for human or efiiciency for the machine, pick one. There have been efforts trying to resolve this problem, for example, by linking the C libraries in a Python code, but such usage of multi-language programming quickly makes the code really complex and hard to maintain.</p>

<h3 id="solving-the-two-language-problem">1.1 Solving the two-language problem</h3>

<p>This is exactly where Julia kicks in.</p>

<p>Julia is a dynamic programming language as MATLAB or Python, making it easy to use. But Julia also runs <a href="https://julialang.org/benchmarks/">very fast</a>, comparable to the performance of C codes. How could a dynamic language run fast? It does so by using the <a href="https://en.wikipedia.org/wiki/LLVM">LLVM</a>-based <a href="https://en.wikipedia.org/wiki/Just-in-time_compilation">just-in-time</a> (JIT) compiler. In fact Julia is designed for JIT from the very beginning!</p>

<h3 id="want-to-try-julia">1.2 Want to try Julia?</h3>

<p>If you would like to try out the Julia language, I recommend this quick hands-on approach: firstly, you learn the basics by going through some short tutorial found <a href="https://julialang.org/learning/#tutorials">here</a>; after having some familiarity with the syntax, you start some programming with your field of study with the help of some <a href="http://pkg.julialang.org/">existing packages</a>. For example, I work on numerical analysis and spectral methods, so I started with the <a href="https://github.com/JuliaApproximation/ApproxFun.jl">ApproxFun</a> package under the <a href="https://github.com/JuliaApproximation">JuliaApproximation</a> project; or if you have done some statistics programming with languages like R, there is a collection of statistics packages under the <a href="https://github.com/JuliaStats">Julia Statistics</a> project; or if you are an algebraist, you may have done some symbolic programming with languages like REDUCE, there is also a <a href="https://github.com/chakravala/Reduce.jl">Reduce</a> package for you. Check the <a href="http://pkg.julialang.org/">list of available packages</a>, no matter what you work on, you are likely to find something that suits your need.</p>

<p>Next, I am going to talk about an experience I had when coding Julia. It will be an example with very technical details, so you may stop reading at this point if all you want is just some general information about Julia.</p>

<h2 id="testing-my-code-why-cant-i-redefine-my-test-functions">2. Testing my code: why can’t I redefine my test functions?</h2>

<p>(<strong>Note:</strong> the issue mentioned in this note pertains to julia version <code>v0.5</code>, there will be a change/fix of the behavior in <code>v0.6</code>; see the P.S. in the end.)</p>

<h3 id="redefine-test-functions-that-will-be-called-by-a-high-order-function-the-failure">2.1 Redefine test functions that will be called by a high-order function: the failure</h3>

<p>In scientific computing, we often need to test a function by feeding it different parameters to see if the behaviors are as expected.</p>

<p>``` julia
julia&gt; function myFun1(value)
           return value + 1
       end</p>

<p>julia&gt; v = 1; myFun1(v)    #test case 1
2</p>

<p>julia&gt; v = pi; myFun1(v)    #test case 2
4.141592653589793</p>

<p>julia&gt; v = -e; myFun1(v)    #test case 3
-1.718281828459045
```</p>

<p>This is completely fine with a simple function. But if you are debugging a <strong>high-order function</strong>, i.e. a function whose input (or output) is also a function:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>       <span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>    <span class="c">#test case 1</span>
</span><span class='line'><span class="mi">2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>    <span class="c">#test case 2</span>
</span><span class='line'><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f</span><span class="p">(</span><span class="kt">Any</span><span class="p">)</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span><span class="mi">1</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="mf">1.</span>
</span><span class='line'><span class="mi">2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>    <span class="c">#test case 3</span>
</span><span class='line'><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f</span><span class="p">(</span><span class="kt">Any</span><span class="p">)</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="mi">1</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span><span class="mf">1.</span>
</span><span class='line'><span class="mi">2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">println</span><span class="p">([</span><span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)])</span>
</span><span class='line'><span class="p">[</span><span class="mf">7.38906</span><span class="p">,</span><span class="mf">2.0</span><span class="p">]</span> <span class="c">#both should have returned the same value f(2)!</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We see that redefining a function is okay if you just want to evaluate it, but redefining for the testing of another high-order function won’t work. Unless you also <strong>redefine that high-order function to update the dependence</strong>:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">myFun2</span><span class="p">(</span><span class="kt">Any</span><span class="p">)</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span><span class="mi">2</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">11</span><span class="p">]:</span><span class="mf">2.</span>
</span><span class='line'><span class="n">myFun2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="mf">7.38905609893065</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>But redefining every high-order function is cumbersome, and even impractical if there is a chain of dependencies among multiple high-order functions.</p>

<h3 id="the-logic-behind-such-failure-how-the-jit-compiler-works">2.2 The logic behind such failure: how the JIT compiler works</h3>

<p>This issue received a long discussion (started a couple years ago and is still going on) on GitHub <a href="https://github.com/JuliaLang/julia/issues/265">issue #265</a>. This goes back to the fundamental question of how Julia’s JIT compiler works (under the hood) in real time.</p>

<ul>
  <li>The JIT compiler would compile a custom function (high-order or not) when it is executed for the first time. So you see behavior like this</li>
</ul>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> f1</span><span class="p">()</span>
</span><span class='line'>           <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'><span class="n">f1</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> f2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>           <span class="n">f</span><span class="p">()</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'><span class="n">f2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> f1</span><span class="p">()</span>
</span><span class='line'>           <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f1</span><span class="p">()</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span><span class="mi">2</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="mf">2.</span>
</span><span class='line'><span class="n">f1</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f2</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>
    <p>Because <code>f2</code> is compiled when <code>f2(f1)</code> is called; before the call, <code>f1</code> is most recently defined to return <code>3</code>, so <code>f2(f1)</code> returns <code>3</code>; the first definition of <code>f1</code> that returned <code>2</code> was overwritten.</p>
  </li>
  <li>
    <p>After the <code>f2(f1)</code> call, no matter how you overwrite the definition of <code>f1</code>, <code>f2(f1)</code> will always return <code>3</code> since that’s how it was when compiled at its first call.</p>
  </li>
</ul>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> f1</span><span class="p">()</span>
</span><span class='line'>           <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f1</span><span class="p">()</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span><span class="mi">2</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span><span class="mf">2.</span>
</span><span class='line'><span class="n">f1</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f2</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>Unless you also redefine <code>f2</code>, then <code>f2</code> becomes an uncompiled function again. The next time <code>f2</code> is called, it will be compiled again and updates its behavior.</li>
</ul>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> f2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>           <span class="n">f</span><span class="p">()</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'><span class="n">WARNING</span><span class="p">:</span> <span class="n">Method</span> <span class="n">definition</span> <span class="n">f2</span><span class="p">(</span><span class="kt">Any</span><span class="p">)</span> <span class="k">in</span> <span class="k">module</span> <span class="n">Main</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span><span class="mi">2</span> <span class="n">overwritten</span> <span class="n">at</span> <span class="n">REPL</span><span class="p">[</span><span class="mi">7</span><span class="p">]:</span><span class="mf">2.</span>
</span><span class='line'><span class="n">f2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f2</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>This experiment shows that the compilation is down to the lowest-order function, so if a high-order function is called, the JIT will compile all the functions it calls, until it hits a simple function. (Compilation can also occur when you feed a custom function with variables of different types. This is the subject of <strong>multiple dispatch</strong>, another great advantage of Julia).</li>
</ul>

<h3 id="solution-using-anonymous-functions">2.3 Solution: using anonymous functions</h3>

<p>I have found a solution in <a href="https://github.com/JuliaPlots/Plots.jl/issues/508#issuecomment-250200614">a comment of issue #508</a>, which is to use the lambda function notation <code>-&gt;</code> in Julia to define an anonymous function, and assign the anonymous function to a variable <code>f</code>. Then feed this variable into the high-order function you want to test.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'><span class="n">myFun2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">x</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="mi">4</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="mf">7.38905609893065</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>All works well now! This is because the variable <code>f</code> is now pointing to an anonymous function. If it is later redefined to point to a different function, this pointer value is updated because every anonymous function receives a unique label. So there are no more confusions!</p>

<h3 id="ps-issue-fixed-in-v06">P.S. Issue fixed in <code>v0.6</code></h3>

<p>I have downloaded the pre-released version <code>julia v0.6.0-rc2</code> to check if the issue is well handled. Apparently, the issue is well fixed in this new version:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='julia'><span class='line'><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="k">function</span><span class="nf"> myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>           <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'><span class="n">myFun2</span> <span class="p">(</span><span class="n">generic</span> <span class="k">function</span><span class="nf"> with</span> <span class="mi">1</span> <span class="n">method</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="p">;</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="mi">4</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">julia</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="n">myFun2</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'><span class="mf">7.38905609893065</span>
</span></code></pre></td></tr></table></div></figure></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Holy Trinity]]></title>
    <link href="http://bobbielf2.github.io/blog/2017/05/19/the-holy-trinity/"/>
    <updated>2017-05-19T22:03:22-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2017/05/19/the-holy-trinity</id>
    <content type="html"><![CDATA[<p>This isn’t about theology, but I will talk about the number three.</p>

<p>We love the number three. Many of our rules/doctrines consist of three parts. For example, in Christianity, there is the theory of the Holy Trinity, stating that God manifests Himself in three forms: the Father, the Son, and the Holy Spirit. I’d love to cast them into a shamrock diagram:</p>

<p><img class="center" src="/images/blog_figures/shamrock_holy.png" width="300"></p>

<p>The key idea here is that, although there are three forms, there is really only one God.</p>

<!--more-->

<p>While I am not a Theologist, I appreciate the idea that an important concept is broken into three aspects, each of them stems from the same root, and connects with each other to promote deeper understanding of the subject. Let’s call them the “shamrock ideas”.</p>

<p>I happened to have encountered some of the interesting and beautiful shamrock ideas in the realm of science and mathematics. These ideas have given me incredible insights into subjects, helping me see the big pictures of a lot of seemingly scattered knowledge.</p>

<h2 id="science">Science</h2>

<p>Perhaps the most well-known example of a shamrock idea is the three components of science.</p>

<blockquote>
  <p>There are three great branches of modern science: theory, experiment, and computation.</p>
</blockquote>

<p><img class="center" src="/images/blog_figures/shamrock_science.png" width="300"></p>

<p>The keyword in this shamrock is <em>computation</em>, it reminds us how computation has influenced science, and has evolved from a mere tool into a full-fledged scientific branch.</p>

<p>In the early days of science, machines were invented to help scientists with their calculations. Searching the internet you will find calculators like Arithmometer (1850s-1910s) and Comptometer (1880s-1970s). Those machines can add, subtract, multiply and divide numbers. They were once very useful to scientists, and are now all gone to museums. In the mid-1900s, electronic computers started to take over, and computing power skyrocketed in the past 60 years. Computer performance evolved from hectoscale computing (~200 operations per second) with the first IBM computer in 1946, to petascale computing in 2009 with modern supercomputers, which is thousands of trillions of operations per second.</p>

<p>Such leap in computing power has unleashed ideas that were sheer impossible just decades ago.</p>

<p>With experiment, science have gone a long way tracing back to the ancient Greeks. With computation, science has taken off and is moving ever faster. We can simulate things that are too far (universe), too small (quantum), too expensive (medicine), or too complex (social network).</p>

<h2 id="mathematics">Mathematics</h2>

<p>I would like to mention more shamrock ideas I found reading math.</p>

<h3 id="functions-boyd">Functions <sup id="fnref:boyd"><a href="#fn:boyd" class="footnote">1</a></sup></h3>

<p>The function shamrock has three leaves respectively labeled formula, spectral coefficients, and grid point values. Together, these three concepts help us better understand and use functions. To see how these three concepts connect to each other, we realize that we go from the symbolic $f(x)$ to values ${f_j}$ by sampling, from $f(x)$ to spectral coefficients ${a_j}$ by integral transforms (e.g. Fourier transform), and from ${f_j}$ to ${a_j}$ by discrete algorithms (e.g. FFT).</p>

<p><img class="center" src="/images/blog_figures/shamrock_function.png" width="300"></p>

<p>When solving a problem that involves a function $f(x)$, the symbolic formula is manipulated with analytical methods, its spectral coefficients are useful for Galerkin methods, and the grid point values are what the convenient pseudospectral methods operate on.</p>

<p>A mathematician would be crippled if failing to understand and to freely switch between any of them.</p>

<h3 id="analysis-trefethen">Analysis <sup id="fnref:trefethen"><a href="#fn:trefethen" class="footnote">2</a></sup></h3>

<p>This probably is my favorite shamrock. In analysis, the three types of series, Fourier, Laurent, and Chebyshev, are really the same series looking from different angles.</p>

<p><img class="center" src="/images/blog_figures/shamrock_analysis.png" width="300"></p>

<p>Let’s consider the substitutions</p>

<script type="math/tex; mode=display">x = \frac{z+z^{-1}}{2} = \cos\theta</script>

<p>they give the equivalent relations</p>

<script type="math/tex; mode=display">T_n(x) = \frac{z^n+z^{-n}}{2} = \cos(n\theta)</script>

<p>where $T_n(x)$ is the Chebyshev polynomial of order $n$. Given a smooth function $f(x)$ on $x\in[-1,1]$, it can be expanded as a Chebyshev series</p>

<script type="math/tex; mode=display">f(x) = \sum^\infty_{n=0}a_nT_n(x)</script>

<p>which under the equivalent relations gives</p>

<script type="math/tex; mode=display">\sum^\infty_{n=0}a_nT_n(x) = \sum^\infty_{n=0} a_n \frac{z^n+z^{-n}}{2} = \sum^\infty_{n=0} a_n \cos(n\theta)</script>

<p>or</p>

<script type="math/tex; mode=display">\sum^\infty_{n=0}a_nT_n(x) = \frac{a_0}{2}+\frac{1}{2}\sum^\infty_{n=-\infty} a_{|n|} z^n = \frac{a_0}{2}+\frac{1}{2}\sum^\infty_{n=-\infty} a_{|n|} e^{in\theta}</script>

<p>The last equalities show the amazing relationships between the three branches of analysis, providing a picture about how viewing from different angles gives you different series expansions:</p>

<ul>
  <li>If you look at the unit circle in the complex plane (or a periodic interval) $\theta\in[0,2\pi]$, you see Fourier series, the fundamental tool for real analysis</li>
  <li>If you look at the annulus <span>$\frac{1}{\rho} &lt; |z| &lt; \rho$</span>, you see Laurent series, the fundamental tool for complex analysis</li>
  <li>If you look at the interval $x\in[-1,1]$, you see Chebyshev series, the fundamental tool for numerical analysis</li>
</ul>

<p>Such connections are always there, but you need to discover them. Even many math majors know little about the shamrock, and most of them have taken all three courses.</p>

<h2 id="a-final-note">A final note</h2>

<p>I love the shamrocks not because they teach me new concepts; in fact they don’t. I have understood the concepts in the three leaves of each shamrock before I saw them put together. The important thing of these shamrocks is that they provide a unified view, a new prospective that connects and sees things you knew differently. Like Kalid Azad (author of <a href="https://betterexplained.com">BetterExplained</a>) once <a href="https://betterexplained.com/articles/learn-math-like-mega-man/">mentioned in a post</a>, our understandings improve the most not when we’ve learned new concepts, but when mindset shifts happen.</p>

<h3 id="references">References:</h3>

<div class="footnotes">
  <ol>
    <li id="fn:boyd">
      <p>John P Boyd, <em>Chebyshev and Fourier Spectral Methods</em>, Section 9.3 <a href="#fnref:boyd" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:trefethen">
      <p>Nick Trefethen, <em>Approximation Theory and Approximation Practice</em>, Chapter 3 <a href="#fnref:trefethen" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客更新]]></title>
    <link href="http://bobbielf2.github.io/blog/2016/11/26/bo-ke-geng-xin/"/>
    <updated>2016-11-26T15:24:57-05:00</updated>
    <id>http://bobbielf2.github.io/blog/2016/11/26/bo-ke-geng-xin</id>
    <content type="html"><![CDATA[<p>我对最开始的两编博客内容进行了更新。因为经过这段时间的学习，我的电脑水平有所增长，回头看当时写的东西不禁发现了各种不严谨和各种 bug，忍不修补了一下。</p>

<p>好了，本篇的主要内容完毕，以下完全是跑题的内容，是我对这个学期所学的一门课的吐嘈，可以随意忽略。。</p>

<!--more-->

<p>最近在忙学业。这个学期选修了一门 Scientific Computing 的课（简称 SC 课），是 <a href="http://micde.umich.edu/">MICDE</a> 开的第一门课。对于一个编程一直只用 Matlab，没有开发经验，不怎么 geek 的伪码农，我表示这门课又让我体验了一次被虐的快感。所以我决定小小吐嘈一下，就以“中途出家的码农之挣扎系列”为副标题，以后说不定这个系列还会更新。</p>

<p>吐嘈开始，首先看看这门课的大纲：</p>

<table>
  <thead>
    <tr>
      <th>Week</th>
      <th>Topic</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Introduction to Linux</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Programming Langues: C, C++, Fortran</td>
    </tr>
    <tr>
      <td> </td>
      <td>Linux Bash Scripting &amp; Introduction to Python</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Elements of Development: Configuring, Compiling, Linking</td>
    </tr>
    <tr>
      <td> </td>
      <td>Tools of the Trade: Version Control, Text Editors, Dev. Env</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Algorithms for Numerical Linear Algebra</td>
    </tr>
    <tr>
      <td> </td>
      <td>Sci. Computing Libs: BLAS, LAPACK, PETSc, Trilinos</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Software Engineering Practices &amp; Development Workflows</td>
    </tr>
    <tr>
      <td> </td>
      <td>Object-Oriented Programming, Design Patterns, UML</td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
    </tr>
    <tr>
      <td>8</td>
      <td>Serial Optimization Techniques</td>
    </tr>
    <tr>
      <td> </td>
      <td>Parallel Programming Models</td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
    </tr>
    <tr>
      <td>11</td>
      <td>Data Format Libraries: HDF5, NetCDF, SILO</td>
    </tr>
    <tr>
      <td> </td>
      <td>Mesh Libraries: Libmesh, Exodus, others</td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
    </tr>
  </tbody>
</table>

<p>可以看出主题非常广泛，包括操作系统，各种语言编程，开发过程，版本控制，文本处理，数值算法，计算机工程，并行运算，数据存贮和可视化，等等。基本上每周的 topic 都足以开一门一整个学期的课，我们的任务就是尽力掌握那一周的内容，达到基础程度的理解，并且能够在上机实验环节实行简单应用。</p>

<p>于是每个星期对于我们来说都像一场生死循环：在课堂上尽全力去理解，然后在上机实验的时候费尽九牛二虎之力完成任务，刚觉得这周的 topic 总算是入门了，又尼玛进入下一周的主题，重新开始轮回。</p>

<p>但是当你尽力从这门课里活下来了，你所看到的世界都不一样了，在科学计算的方方面面都已经有所涉足，对于这个信息时代的齿轮如何运作有了全新的深度和广度的理解。当然我还远远不是任何一方面的 expert，精确的说，现在的我对科学计算这门学问有了一个比以前更清晰的整体图像（big picture），就像下面这张图所展示的第二种（progressive）进程，对整个学科有了从低像素到高像素的改善。</p>

<p><img src="/images/blog_figures/baseline_vs_progressive.jpg" width="500"></p>

<h3 id="section">万金油技能总结</h3>

<p>Scientific Computing 的根本目标就是通过科学方法论、高效的协作来促进科学计算的理论和技术的发展。在接触这些方法论的过程中，我觉得有一些技能是在任何地方都十分宝贵的，不局限于 SC。</p>

<ol>
  <li><strong><a href="https://en.wikipedia.org/wiki/RTFM">RTFM</a> 的能力</strong>。在任何时候，懂得读 manual 和 documentation，都让你有了解决所有问题的利器。</li>
  <li><strong>运用 feedback 的能力</strong>。无论是编程 debug，还是学习别的技能，本质都是针对薄弱环节的刻意练习（deliberate practice）。刻意练习需要不断的接受 feedback 再次练习，feedback 的来源可以是程序的 compiler，老师，同学，网上练习系统等等。有效运用 feedback 本质上也是一种理解能力（动态的 RTFM）。</li>
  <li><strong>搜索（STFW）的能力</strong>。这个能力一说起来好像很简单，搜索谁不会嘛！但其实搜索能力是有不同级别，人人都能搜索，但是有的人是专家，有的人搜一下搜不到就放弃了。搜索能力本质上是<em>把碎片信息整理成系统信息的能力</em>。“搜”只是第一步，后续的整理信息，再搜索，再整理，再搜索……就是搜索能力的差别所在。</li>
  <li><strong>从“术”到“道”的能力</strong>。换个说法，就是从技术到理论，从 how 到 why，从方法到哲学，从科学到艺术的升华能力。说到底，知识是人的知识，人有强大的逻辑思维能力，但还有感情的影响和追求目标的动力。把知识学会，只需要有思维能力理解能力；把知识推向极致，运用到造福社会的程度，则需要理论和哲学的支持，需要做一件事情的意义和审美，需要影响其他人和接受他人的帮助，这些都是经过耐心的思考、实践、积累才能得到的。</li>
</ol>

<p>回想起来，我对付 SC 课和完成一切其他任务所用到的不外乎就是这几种技能了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要计算]]></title>
    <link href="http://bobbielf2.github.io/blog/2016/08/17/bu-yao-ji-suan/"/>
    <updated>2016-08-17T13:01:14-04:00</updated>
    <id>http://bobbielf2.github.io/blog/2016/08/17/bu-yao-ji-suan</id>
    <content type="html"><![CDATA[<p>计算是一种需要被抵制的诱惑。有经验的人对于计算这个工具，都持谨慎的态度：</p>

<blockquote>
  <p>A computation is a temptation that should be resisted as long as possible.<br />
- John P. Boyd (Michigan)</p>
</blockquote>

<blockquote>
  <p>Never do a calculation until you already know the answer.<br />
- John Wheeler</p>
</blockquote>

<p>更有甚者，以反讽态度强调理论之于计算的重要性。</p>

<blockquote>
  <p>Six months in the lab can save you a day in the library.<br />
- Albert Migliori</p>
</blockquote>

<!--more-->

<p>后人补充</p>

<blockquote>
  <p>Six months in the lab will save you: Half a day in the library or 30 minutes searching online.<br />
- Paul G. Kotula</p>
</blockquote>

<p>好像大家都在贬低计算的作用，尽管我的爱豆 Trefethen 说过计算是一门伟大的科学：</p>

<blockquote>
  <p>There are three great branches of science: theory, experiment, and computation.</p>
</blockquote>

<p>传说中的 Knuth 也以计算作为验证科学的标准：</p>

<blockquote>
  <p>Science is what we understand well enough to explain to a computer. Art is everything else we do.</p>
</blockquote>

<p>正如所有科学家一样，大家都明白计算机是现代科学一个最最重要的发明。因为计算机导致计算能力的提升，我们可以用前所未有的方法去进行科学研究：计算卫星轨道，模拟湍流，模拟黑洞，挑战人类顶尖棋手。不敢想像没有发明计算机的世界会是怎么样的。如果说中世纪宗教统治的欧洲是“黑暗中世纪”，那以前没有计算机的所有时代就是“黑暗蜗牛时代”。</p>

<p><em>既然计算这么好，为什么前辈们都在“贬低”计算呢？</em></p>

<p>所有认真写过代码的人，无论是在学校学习的学生还是在业界工作的程序猿，都尝过 debug 的痛苦，著名的“九十-九十法则”说过：</p>

<blockquote>
  <p><strong>Ninety-ninety rule</strong>:
The first 90% of the code takes 90% of the time. The remaining 10% takes the other 90% of the time.</p>
</blockquote>

<p>代码纠错是任何项目中最最烦人的过程。而“贬低”计算的前辈们就是那些成功打败各种 bug 生存下来的佼佼者。说到底，他们强调了一件事：<strong>理解</strong>与<strong>计算</strong>的关系。</p>

<h3 id="section">理解 — 计算</h3>

<ul>
  <li>计算是用来验证你是不是理解一个概念或者方法的。如果你已经理解，计算的成功验证可以给你更多的信心；如果计算没有验证成功，你也找不出 bug 在哪里，那只说明一件事，你还没有完全理解。所以<strong>理解是计算的前提</strong>。</li>
  <li>计算是运用理解力去实践创造的过程。理解一个理论之后，你就可以通过计算让理论在现实中派上用场。比如理解了建筑学和材料科学，就可以用模拟地震来研究建筑结构的薄弱部分；但是模拟出残垣断壁，并不能反过来让你自动学会材料科学。又比如理解了椭圆积分，就可以运用 AGM 算法来轻易算出 $\pi$ 到数亿位的精度；但是通过读 AGM 算法那几行简单的代码，并不能反过来告诉你它为什么这么有效，也不能教会你椭圆积分。<strong>理解是计算的前提</strong>。</li>
</ul>

<blockquote>
  <p>附上计算 $\pi$ 的 AGM 算法，看看代码简单到什么程度，看看光看代码你能学会什么。</p>
</blockquote>

<p><code>matlab 
% MATLAB code: compute Pi via AGM
y = sqrt(sqrt(2));
x = (y+1/y)/2;
p = 2+sqrt(2);
for i = 1:6
    fprintf('%21.16g\n',p)
    p = p*(1+x)/(1+y);
    s = sqrt(x);
    y = (y*s+1/s)/(1+y);
    x = (s+1/s)/2;
end
</code></p>

<p>所以，当你的程序有 bug 时，你应该做的不是死抠每一行代码，而是停止 debug，回去审视这些代码所基于的理论，让理论告诉你问题在哪里。这里再次引用那句话：</p>

<blockquote>
  <p>Never do a calculation until you already know the answer.</p>
</blockquote>

<p>真正的理解会告诉你答案，计算能做的只是验证和运用你的理解。</p>

<blockquote>
  <p>Things may seem magical, but to the people who understand math there is no magic. - Bobbie</p>
</blockquote>
]]></content>
  </entry>
  
</feed>
